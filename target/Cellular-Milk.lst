
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Milk/target/Cellular-Milk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ba8  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  08085bc0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000150  20000400  08085bc4  00030400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          0000076c  20000550  20000550  00040550  2**2
                  ALLOC
  5 .module_info_suffix 00000028  08085d14  08085d14  00035d14  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  08085d3c  08085d3c  00035d3c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000bb351  00000000  00000000  00035d40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00011faf  00000000  00000000  000f1091  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00017512  00000000  00000000  00103040  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000023f0  00000000  00000000  0011a552  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000039f0  00000000  00000000  0011c942  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00027d7f  00000000  00000000  00120332  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002a699  00000000  00000000  001480b1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a6b18  00000000  00000000  0017274a  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c994  00000000  00000000  00219264  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	6c 53 08 08                                         lS..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f004 fcdb 	bl	80849e8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f004 fce0 	bl	80849fe <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08085bc4 	.word	0x08085bc4
 808004c:	20000550 	.word	0x20000550
 8080050:	20000550 	.word	0x20000550
 8080054:	20000cbc 	.word	0x20000cbc
 8080058:	20000cbc 	.word	0x20000cbc

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f003 f9ef 	bl	8083440 <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08085b7c 	.word	0x08085b7c
 8080084:	08085bb8 	.word	0x08085bb8

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 beaa 	b.w	8080de0 <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 fc7b 	bl	8080988 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f003 b995 	b.w	80833c4 <_post_loop>

0808009a <_Znwj>:
 808009a:	f001 bdef 	b.w	8081c7c <malloc>

0808009e <_ZdlPv>:
 808009e:	f001 bdf5 	b.w	8081c8c <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr
	...

080800b4 <_Z11watchdogISRv>:
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void watchdogISR() {
  watchDogFlag = true;
 80800b4:	4b01      	ldr	r3, [pc, #4]	; (80800bc <_Z11watchdogISRv+0x8>)
 80800b6:	2201      	movs	r2, #1
 80800b8:	701a      	strb	r2, [r3, #0]
 80800ba:	4770      	bx	lr
 80800bc:	20000618 	.word	0x20000618

080800c0 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
 80800c0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80800c2:	4904      	ldr	r1, [pc, #16]	; (80800d4 <_Z10measureNow6String+0x14>)
 80800c4:	f002 fefb 	bl	8082ebe <_ZNK6String6equalsEPKc>
  if (command == "1")
 80800c8:	b118      	cbz	r0, 80800d2 <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
 80800ca:	4b03      	ldr	r3, [pc, #12]	; (80800d8 <_Z10measureNow6String+0x18>)
 80800cc:	2203      	movs	r2, #3
 80800ce:	701a      	strb	r2, [r3, #0]
    return 1;
 80800d0:	2001      	movs	r0, #1
  }
  else return 0;
}
 80800d2:	bd08      	pop	{r3, pc}
 80800d4:	080857cc 	.word	0x080857cc
 80800d8:	20000588 	.word	0x20000588

080800dc <_ZN11EEPROMClass4readEi.isra.14>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
 80800dc:	f001 bb6a 	b.w	80817b4 <HAL_EEPROM_Read>

080800e0 <_ZN11EEPROMClass5writeEih.isra.15>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
 80800e0:	f001 bb70 	b.w	80817c4 <HAL_EEPROM_Write>

080800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80800e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80800e6:	4605      	mov	r5, r0
 80800e8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80800ec:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80800ee:	f88d 3000 	strb.w	r3, [sp]
 80800f2:	233c      	movs	r3, #60	; 0x3c
 80800f4:	f002 f8b8 	bl	8082268 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
 80800f8:	4628      	mov	r0, r5
 80800fa:	b003      	add	sp, #12
 80800fc:	bd30      	pop	{r4, r5, pc}
	...

08080100 <_Z4pingttm>:
  return 1;
}

void ping(pin_t trig_pin, pin_t echo_pin, uint32_t wait)              // simple distance algorithm
//https://community.particle.io/t/simple-photon-ping-sensor-hc-sr04/16737
{
 8080100:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    int duration;
    static bool init = false;
    if (!init) {
 8080104:	4f1d      	ldr	r7, [pc, #116]	; (808017c <_Z4pingttm+0x7c>)
  return 1;
}

void ping(pin_t trig_pin, pin_t echo_pin, uint32_t wait)              // simple distance algorithm
//https://community.particle.io/t/simple-photon-ping-sensor-hc-sr04/16737
{
 8080106:	4604      	mov	r4, r0
    int duration;
    static bool init = false;
    if (!init) {
 8080108:	f897 8000 	ldrb.w	r8, [r7]
  return 1;
}

void ping(pin_t trig_pin, pin_t echo_pin, uint32_t wait)              // simple distance algorithm
//https://community.particle.io/t/simple-photon-ping-sensor-hc-sr04/16737
{
 808010c:	460e      	mov	r6, r1
 808010e:	4d1c      	ldr	r5, [pc, #112]	; (8080180 <_Z4pingttm+0x80>)
    int duration;
    static bool init = false;
    if (!init) {
 8080110:	f1b8 0f00 	cmp.w	r8, #0
 8080114:	d112      	bne.n	808013c <_Z4pingttm+0x3c>
        pinMode(trig_pin, OUTPUT);
 8080116:	2101      	movs	r1, #1
 8080118:	f003 f9e2 	bl	80834e0 <pinMode>
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 808011c:	231c      	movs	r3, #28
 808011e:	4363      	muls	r3, r4
 8080120:	682a      	ldr	r2, [r5, #0]
        digitalWriteFast(trig_pin, LOW);
        pinMode(echo_pin, INPUT);
 8080122:	4630      	mov	r0, r6
 8080124:	18d1      	adds	r1, r2, r3
 8080126:	58d3      	ldr	r3, [r2, r3]
 8080128:	888a      	ldrh	r2, [r1, #4]
 808012a:	4641      	mov	r1, r8
 808012c:	835a      	strh	r2, [r3, #26]
 808012e:	f003 f9d7 	bl	80834e0 <pinMode>
        delay(50);
 8080132:	2032      	movs	r0, #50	; 0x32
 8080134:	f001 fde2 	bl	8081cfc <delay>
        init = true;
 8080138:	2301      	movs	r3, #1
 808013a:	703b      	strb	r3, [r7, #0]
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

inline void pinSetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 808013c:	231c      	movs	r3, #28
 808013e:	435c      	muls	r4, r3
 8080140:	682b      	ldr	r3, [r5, #0]
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8080142:	200a      	movs	r0, #10
 8080144:	191a      	adds	r2, r3, r4
 8080146:	8892      	ldrh	r2, [r2, #4]
 8080148:	591b      	ldr	r3, [r3, r4]
 808014a:	831a      	strh	r2, [r3, #24]
 808014c:	f001 fb12 	bl	8081774 <HAL_Delay_Microseconds>
}

inline void pinResetFast(pin_t _pin)
{
    PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 8080150:	682b      	ldr	r3, [r5, #0]
    /* Trigger the sensor by sending a HIGH pulse of 10 or more microseconds */
    digitalWriteFast(trig_pin, HIGH);
    delayMicroseconds(10);
    digitalWriteFast(trig_pin, LOW);
  
    duration = pulseIn(echo_pin, HIGH);
 8080152:	2101      	movs	r1, #1
 8080154:	191a      	adds	r2, r3, r4
 8080156:	8892      	ldrh	r2, [r2, #4]
 8080158:	591b      	ldr	r3, [r3, r4]
 808015a:	4630      	mov	r0, r6
 808015c:	835a      	strh	r2, [r3, #26]
 808015e:	f003 f9fc 	bl	808355a <pulseIn>
    
    /* Convert the time into a distance */
    // Sound travels at 1130 ft/s (73.746 us/inch)
    // or 340 m/s (29 us/cm), out and back so divide by 2
    // Ref: http://www.parallax.com/dl/docs/prod/acc/28015-PING-v1.3.pdf
    distanceInCM = duration / 29 / 2;
 8080162:	233a      	movs	r3, #58	; 0x3a
 8080164:	fb90 f3f3 	sdiv	r3, r0, r3
 8080168:	4a06      	ldr	r2, [pc, #24]	; (8080184 <_Z4pingttm+0x84>)


    snprintf(distanceString, sizeof(distanceString), "%i cm", distanceInCM);
 808016a:	2110      	movs	r1, #16
    
    /* Convert the time into a distance */
    // Sound travels at 1130 ft/s (73.746 us/inch)
    // or 340 m/s (29 us/cm), out and back so divide by 2
    // Ref: http://www.parallax.com/dl/docs/prod/acc/28015-PING-v1.3.pdf
    distanceInCM = duration / 29 / 2;
 808016c:	6013      	str	r3, [r2, #0]


    snprintf(distanceString, sizeof(distanceString), "%i cm", distanceInCM);
 808016e:	4806      	ldr	r0, [pc, #24]	; (8080188 <_Z4pingttm+0x88>)
 8080170:	4a06      	ldr	r2, [pc, #24]	; (808018c <_Z4pingttm+0x8c>)
}
 8080172:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    // or 340 m/s (29 us/cm), out and back so divide by 2
    // Ref: http://www.parallax.com/dl/docs/prod/acc/28015-PING-v1.3.pdf
    distanceInCM = duration / 29 / 2;


    snprintf(distanceString, sizeof(distanceString), "%i cm", distanceInCM);
 8080176:	f001 bda9 	b.w	8081ccc <snprintf>
 808017a:	bf00      	nop
 808017c:	20000650 	.word	0x20000650
 8080180:	20000600 	.word	0x20000600
 8080184:	20000554 	.word	0x20000554
 8080188:	200005e8 	.word	0x200005e8
 808018c:	080853c0 	.word	0x080853c0

08080190 <_Z17getSignalStrengthv>:
}

void getSignalStrength()
{
 8080190:	b530      	push	{r4, r5, lr}
 8080192:	b08f      	sub	sp, #60	; 0x3c
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
 8080194:	4910      	ldr	r1, [pc, #64]	; (80801d8 <_Z17getSignalStrengthv+0x48>)
 8080196:	a804      	add	r0, sp, #16
 8080198:	f001 fe1c 	bl	8081dd4 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
 808019c:	a804      	add	r0, sp, #16
 808019e:	f001 fe74 	bl	8081e8a <_ZNK14CellularSignal19getAccessTechnologyEv>
 80801a2:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
 80801a4:	a804      	add	r0, sp, #16
 80801a6:	f001 fecf 	bl	8081f48 <_ZNK14CellularSignal11getStrengthEv>
 80801aa:	4605      	mov	r5, r0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
 80801ac:	a804      	add	r0, sp, #16
 80801ae:	f001 feb3 	bl	8081f18 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 80801b2:	f003 fd23 	bl	8083bfc <__aeabi_f2d>
 80801b6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80801ba:	4628      	mov	r0, r5
 80801bc:	f003 fd1e 	bl	8083bfc <__aeabi_f2d>
 80801c0:	e9cd 0100 	strd	r0, r1, [sp]
 80801c4:	4b05      	ldr	r3, [pc, #20]	; (80801dc <_Z17getSignalStrengthv+0x4c>)
 80801c6:	4a06      	ldr	r2, [pc, #24]	; (80801e0 <_Z17getSignalStrengthv+0x50>)
 80801c8:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 80801cc:	2140      	movs	r1, #64	; 0x40
 80801ce:	4805      	ldr	r0, [pc, #20]	; (80801e4 <_Z17getSignalStrengthv+0x54>)
 80801d0:	f001 fd7c 	bl	8081ccc <snprintf>
}
 80801d4:	b00f      	add	sp, #60	; 0x3c
 80801d6:	bd30      	pop	{r4, r5, pc}
 80801d8:	20000668 	.word	0x20000668
 80801dc:	20000478 	.word	0x20000478
 80801e0:	080853c6 	.word	0x080853c6
 80801e4:	20000598 	.word	0x20000598

080801e8 <_Z16takeMeasurementsv>:
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
 80801e8:	b513      	push	{r0, r1, r4, lr}

  lastDistanceInCM = distanceInCM;                            // Load the last values 
 80801ea:	4b1b      	ldr	r3, [pc, #108]	; (8080258 <_Z16takeMeasurementsv+0x70>)
  lastTemperatureInC = temperatureInC;
 80801ec:	4c1b      	ldr	r4, [pc, #108]	; (808025c <_Z16takeMeasurementsv+0x74>)

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {

  lastDistanceInCM = distanceInCM;                            // Load the last values 
 80801ee:	681a      	ldr	r2, [r3, #0]
 80801f0:	4b1b      	ldr	r3, [pc, #108]	; (8080260 <_Z16takeMeasurementsv+0x78>)
  lastTemperatureInC = temperatureInC;

  if (sensor.read()) {                                        // Get temperature in C
 80801f2:	481c      	ldr	r0, [pc, #112]	; (8080264 <_Z16takeMeasurementsv+0x7c>)

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {

  lastDistanceInCM = distanceInCM;                            // Load the last values 
 80801f4:	601a      	str	r2, [r3, #0]
  lastTemperatureInC = temperatureInC;
 80801f6:	6822      	ldr	r2, [r4, #0]
 80801f8:	4b1b      	ldr	r3, [pc, #108]	; (8080268 <_Z16takeMeasurementsv+0x80>)
 80801fa:	601a      	str	r2, [r3, #0]

  if (sensor.read()) {                                        // Get temperature in C
 80801fc:	f001 f8bc 	bl	8081378 <_ZN4DS184readEv>
 8080200:	b160      	cbz	r0, 808021c <_Z16takeMeasurementsv+0x34>
    temperatureInC = sensor.celsius();
 8080202:	4818      	ldr	r0, [pc, #96]	; (8080264 <_Z16takeMeasurementsv+0x7c>)
 8080204:	f001 f8dd 	bl	80813c2 <_ZN4DS187celsiusEv>
 8080208:	6020      	str	r0, [r4, #0]
    snprintf(temperatureString, sizeof(temperatureString), "%3.1f Degrees C", temperatureInC);  // Ensures you get the size right and prevent memory overflow2
 808020a:	f003 fcf7 	bl	8083bfc <__aeabi_f2d>
 808020e:	4a17      	ldr	r2, [pc, #92]	; (808026c <_Z16takeMeasurementsv+0x84>)
 8080210:	e9cd 0100 	strd	r0, r1, [sp]
 8080214:	2110      	movs	r1, #16
 8080216:	4816      	ldr	r0, [pc, #88]	; (8080270 <_Z16takeMeasurementsv+0x88>)
 8080218:	f001 fd58 	bl	8081ccc <snprintf>
  }

  ping(triggerPin, echoPin, 20);        // Trigger pin, Echo pin, delay (ms), visual=true|info=false
 808021c:	2214      	movs	r2, #20
 808021e:	211c      	movs	r1, #28
 8080220:	201a      	movs	r0, #26
 8080222:	f7ff ff6d 	bl	8080100 <_Z4pingttm>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8080226:	4b13      	ldr	r3, [pc, #76]	; (8080274 <_Z16takeMeasurementsv+0x8c>)
 8080228:	2200      	movs	r2, #0
 808022a:	4611      	mov	r1, r2
 808022c:	6858      	ldr	r0, [r3, #4]
 808022e:	f001 fced 	bl	8081c0c <network_ready>

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
 8080232:	b108      	cbz	r0, 8080238 <_Z16takeMeasurementsv+0x50>
 8080234:	f7ff ffac 	bl	8080190 <_Z17getSignalStrengthv>
  stateOfCharge = int(batteryMonitor.getSoC());                       // Percentage of full charge
 8080238:	480f      	ldr	r0, [pc, #60]	; (8080278 <_Z16takeMeasurementsv+0x90>)
 808023a:	f002 f9c5 	bl	80825c8 <_ZN9FuelGauge6getSoCEv>
 808023e:	f004 fa67 	bl	8084710 <__aeabi_f2iz>
 8080242:	4a0e      	ldr	r2, [pc, #56]	; (808027c <_Z16takeMeasurementsv+0x94>)
 8080244:	4603      	mov	r3, r0
 8080246:	6010      	str	r0, [r2, #0]
  snprintf(batteryString, sizeof(batteryString), "%i %%", stateOfCharge);
 8080248:	2110      	movs	r1, #16
 808024a:	4a0d      	ldr	r2, [pc, #52]	; (8080280 <_Z16takeMeasurementsv+0x98>)
 808024c:	480d      	ldr	r0, [pc, #52]	; (8080284 <_Z16takeMeasurementsv+0x9c>)
 808024e:	f001 fd3d 	bl	8081ccc <snprintf>

  return 1;
}
 8080252:	2001      	movs	r0, #1
 8080254:	b002      	add	sp, #8
 8080256:	bd10      	pop	{r4, pc}
 8080258:	20000554 	.word	0x20000554
 808025c:	2000060c 	.word	0x2000060c
 8080260:	2000056c 	.word	0x2000056c
 8080264:	2000061c 	.word	0x2000061c
 8080268:	20000590 	.word	0x20000590
 808026c:	080853df 	.word	0x080853df
 8080270:	20000558 	.word	0x20000558
 8080274:	20000668 	.word	0x20000668
 8080278:	20000578 	.word	0x20000578
 808027c:	20000594 	.word	0x20000594
 8080280:	080853ef 	.word	0x080853ef
 8080284:	20000653 	.word	0x20000653

08080288 <_Z17connectToParticlev>:
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
 8080288:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 808028c:	481a      	ldr	r0, [pc, #104]	; (80802f8 <_Z17connectToParticlev+0x70>)
 808028e:	2300      	movs	r3, #0
 8080290:	461a      	mov	r2, r3
 8080292:	4619      	mov	r1, r3
 8080294:	6840      	ldr	r0, [r0, #4]
 8080296:	f001 fcc1 	bl	8081c1c <network_on>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808029a:	f240 36e7 	movw	r6, #999	; 0x3e7
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 808029e:	f001 fc55 	bl	8081b4c <spark_cloud_flag_connect>
 80802a2:	f44f 7496 	mov.w	r4, #300	; 0x12c
 80802a6:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80802a8:	2000      	movs	r0, #0
 80802aa:	f001 faa3 	bl	80817f4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80802ae:	4680      	mov	r8, r0
 80802b0:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80802b4:	2000      	movs	r0, #0
 80802b6:	f001 fa9d 	bl	80817f4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80802ba:	ebb0 0008 	subs.w	r0, r0, r8
 80802be:	eb61 0109 	sbc.w	r1, r1, r9
 80802c2:	428f      	cmp	r7, r1
 80802c4:	bf08      	it	eq
 80802c6:	4286      	cmpeq	r6, r0
 80802c8:	d305      	bcc.n	80802d6 <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 80802ca:	f001 fc4f 	bl	8081b6c <spark_cloud_flag_connected>
 80802ce:	b910      	cbnz	r0, 80802d6 <_Z17connectToParticlev+0x4e>
            spark_process();
 80802d0:	f001 fc34 	bl	8081b3c <spark_process>
 80802d4:	e7ee      	b.n	80802b4 <_Z17connectToParticlev+0x2c>
 80802d6:	f001 fc49 	bl	8081b6c <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80802da:	b118      	cbz	r0, 80802e4 <_Z17connectToParticlev+0x5c>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
 80802dc:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
 80802e0:	f001 bc44 	b.w	8081b6c <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80802e4:	f001 fa4e 	bl	8081784 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80802e8:	4b04      	ldr	r3, [pc, #16]	; (80802fc <_Z17connectToParticlev+0x74>)
 80802ea:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 80802ec:	f001 fc26 	bl	8081b3c <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 80802f0:	3c01      	subs	r4, #1
 80802f2:	d0f3      	beq.n	80802dc <_Z17connectToParticlev+0x54>
 80802f4:	e7d8      	b.n	80802a8 <_Z17connectToParticlev+0x20>
 80802f6:	bf00      	nop
 80802f8:	20000668 	.word	0x20000668
 80802fc:	20000b80 	.word	0x20000b80

08080300 <_Z12notConnectedv>:
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
 8080300:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080302:	f001 fc33 	bl	8081b6c <spark_cloud_flag_connected>
    return !Particle.connected();
 8080306:	f080 0001 	eor.w	r0, r0, #1
}
 808030a:	b2c0      	uxtb	r0, r0
 808030c:	bd08      	pop	{r3, pc}
	...

08080310 <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
 8080310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 8080312:	f001 fc23 	bl	8081b5c <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080316:	2000      	movs	r0, #0
 8080318:	f001 fa6c 	bl	80817f4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808031c:	f643 2697 	movw	r6, #14999	; 0x3a97
 8080320:	4604      	mov	r4, r0
 8080322:	2500      	movs	r5, #0
 8080324:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 8080326:	2000      	movs	r0, #0
 8080328:	f001 fa64 	bl	80817f4 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808032c:	1b00      	subs	r0, r0, r4
 808032e:	eb61 0105 	sbc.w	r1, r1, r5
 8080332:	428f      	cmp	r7, r1
 8080334:	bf08      	it	eq
 8080336:	4286      	cmpeq	r6, r0
 8080338:	d305      	bcc.n	8080346 <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem                              
 808033a:	f7ff ffe1 	bl	8080300 <_Z12notConnectedv>
 808033e:	b910      	cbnz	r0, 8080346 <_Z22disconnectFromParticlev+0x36>
            spark_process();
 8080340:	f001 fbfc 	bl	8081b3c <spark_process>
 8080344:	e7ef      	b.n	8080326 <_Z22disconnectFromParticlev+0x16>
 8080346:	f7ff ffdb 	bl	8080300 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 808034a:	4806      	ldr	r0, [pc, #24]	; (8080364 <_Z22disconnectFromParticlev+0x54>)
 808034c:	2300      	movs	r3, #0
 808034e:	461a      	mov	r2, r3
 8080350:	4619      	mov	r1, r3
 8080352:	6840      	ldr	r0, [r0, #4]
 8080354:	f001 fc6a 	bl	8081c2c <network_off>
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
 8080358:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 808035c:	f001 fcce 	bl	8081cfc <delay>
  return true;
}
 8080360:	2001      	movs	r0, #1
 8080362:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8080364:	20000668 	.word	0x20000668

08080368 <_Z9PMICresetv>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
    return !Particle.connected();
}

// Power Management function
void PMICreset() {
 8080368:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  power.begin();                                            // Settings for Solar powered power management
 808036a:	481f      	ldr	r0, [pc, #124]	; (80803e8 <_Z9PMICresetv+0x80>)
 808036c:	f002 faac 	bl	80828c8 <_ZN4PMIC5beginEv>
  power.disableWatchdog();
 8080370:	481d      	ldr	r0, [pc, #116]	; (80803e8 <_Z9PMICresetv+0x80>)
 8080372:	f002 fc56 	bl	8082c22 <_ZN4PMIC15disableWatchdogEv>
  if (solarPowerMode) {
 8080376:	4b1d      	ldr	r3, [pc, #116]	; (80803ec <_Z9PMICresetv+0x84>)
 8080378:	781c      	ldrb	r4, [r3, #0]
 808037a:	4b1d      	ldr	r3, [pc, #116]	; (80803f0 <_Z9PMICresetv+0x88>)
 808037c:	b1bc      	cbz	r4, 80803ae <_Z9PMICresetv+0x46>
    lowBattLimit = 20;                                      // Trigger for Low Batt State
 808037e:	2214      	movs	r2, #20
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
 8080380:	f241 21e8 	movw	r1, #4840	; 0x12e8
 8080384:	4818      	ldr	r0, [pc, #96]	; (80803e8 <_Z9PMICresetv+0x80>)
// Power Management function
void PMICreset() {
  power.begin();                                            // Settings for Solar powered power management
  power.disableWatchdog();
  if (solarPowerMode) {
    lowBattLimit = 20;                                      // Trigger for Low Batt State
 8080386:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
 8080388:	f002 fb20 	bl	80829cc <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(900);                        // default is 900mA
 808038c:	f44f 7161 	mov.w	r1, #900	; 0x384
 8080390:	4815      	ldr	r0, [pc, #84]	; (80803e8 <_Z9PMICresetv+0x80>)
 8080392:	f002 fba5 	bl	8082ae0 <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
 8080396:	2200      	movs	r2, #0
 8080398:	4611      	mov	r1, r2
 808039a:	9202      	str	r2, [sp, #8]
 808039c:	9201      	str	r2, [sp, #4]
 808039e:	9200      	str	r2, [sp, #0]
 80803a0:	2301      	movs	r3, #1
 80803a2:	4811      	ldr	r0, [pc, #68]	; (80803e8 <_Z9PMICresetv+0x80>)
 80803a4:	f002 fbe4 	bl	8082b70 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
 80803a8:	f241 0170 	movw	r1, #4208	; 0x1070
 80803ac:	e016      	b.n	80803dc <_Z9PMICresetv+0x74>
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
 80803ae:	221e      	movs	r2, #30
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
 80803b0:	f241 0170 	movw	r1, #4208	; 0x1070
 80803b4:	480c      	ldr	r0, [pc, #48]	; (80803e8 <_Z9PMICresetv+0x80>)
    power.setInputCurrentLimit(900);                        // default is 900mA
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
 80803b6:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
 80803b8:	f002 fb08 	bl	80829cc <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
 80803bc:	f240 51dc 	movw	r1, #1500	; 0x5dc
 80803c0:	4809      	ldr	r0, [pc, #36]	; (80803e8 <_Z9PMICresetv+0x80>)
 80803c2:	f002 fb8d 	bl	8082ae0 <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
 80803c6:	2301      	movs	r3, #1
 80803c8:	4621      	mov	r1, r4
 80803ca:	9402      	str	r4, [sp, #8]
 80803cc:	9401      	str	r4, [sp, #4]
 80803ce:	9400      	str	r4, [sp, #0]
 80803d0:	461a      	mov	r2, r3
 80803d2:	4805      	ldr	r0, [pc, #20]	; (80803e8 <_Z9PMICresetv+0x80>)
 80803d4:	f002 fbcc 	bl	8082b70 <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
 80803d8:	f241 0110 	movw	r1, #4112	; 0x1010
 80803dc:	4802      	ldr	r0, [pc, #8]	; (80803e8 <_Z9PMICresetv+0x80>)
  }
}
 80803de:	b004      	add	sp, #16
 80803e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
 80803e4:	f002 bbf7 	b.w	8082bd6 <_ZN4PMIC16setChargeVoltageEt>
 80803e8:	20000589 	.word	0x20000589
 80803ec:	20000652 	.word	0x20000652
 80803f0:	20000568 	.word	0x20000568

080803f4 <_Z20meterParticlePublishv>:
  }
  Serial.println(stateTransitionString);
}

bool meterParticlePublish(void)                             // Improved - now with own Timestamps
{
 80803f4:	b510      	push	{r4, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 80803f6:	f001 f9c5 	bl	8081784 <HAL_Timer_Get_Milli_Seconds>
  static unsigned long lastPublish = 0;
  if(millis() - lastPublish <= publishFrequency) return 0;
 80803fa:	4c06      	ldr	r4, [pc, #24]	; (8080414 <_Z20meterParticlePublishv+0x20>)
 80803fc:	6823      	ldr	r3, [r4, #0]
 80803fe:	1ac0      	subs	r0, r0, r3
 8080400:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8080404:	d904      	bls.n	8080410 <_Z20meterParticlePublishv+0x1c>
 8080406:	f001 f9bd 	bl	8081784 <HAL_Timer_Get_Milli_Seconds>
  else {
    lastPublish = millis();
 808040a:	6020      	str	r0, [r4, #0]
 808040c:	2001      	movs	r0, #1
 808040e:	bd10      	pop	{r4, pc}
}

bool meterParticlePublish(void)                             // Improved - now with own Timestamps
{
  static unsigned long lastPublish = 0;
  if(millis() - lastPublish <= publishFrequency) return 0;
 8080410:	2000      	movs	r0, #0
  else {
    lastPublish = millis();
    return 1;
  }
}
 8080412:	bd10      	pop	{r4, pc}
 8080414:	20000610 	.word	0x20000610

08080418 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.32>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 8080418:	b508      	push	{r3, lr}
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  if(Particle.connected()) {
    waitUntil(meterParticlePublish);
 808041a:	f7ff ffeb 	bl	80803f4 <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808041e:	b118      	cbz	r0, 8080428 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.32+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 8080420:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8080424:	f7ff bfe6 	b.w	80803f4 <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 8080428:	f001 fb88 	bl	8081b3c <spark_process>
 808042c:	e7f5      	b.n	808041a <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.32+0x2>
	...

08080430 <_Z14fullModemResetv>:
    lastPublish = millis();
    return 1;
  }
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 8080430:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080432:	f001 fb93 	bl	8081b5c <spark_cloud_flag_disconnect>
 8080436:	f001 f9a5 	bl	8081784 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 808043a:	f643 2597 	movw	r5, #14999	; 0x3a97
 808043e:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080440:	f001 fb94 	bl	8081b6c <spark_cloud_flag_connected>
 8080444:	b140      	cbz	r0, 8080458 <_Z14fullModemResetv+0x28>
 8080446:	f001 f99d 	bl	8081784 <HAL_Timer_Get_Milli_Seconds>
 808044a:	1b00      	subs	r0, r0, r4
 808044c:	42a8      	cmp	r0, r5
 808044e:	d803      	bhi.n	8080458 <_Z14fullModemResetv+0x28>
		delay(100);
 8080450:	2064      	movs	r0, #100	; 0x64
 8080452:	f001 fc53 	bl	8081cfc <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8080456:	e7f3      	b.n	8080440 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 8080458:	2100      	movs	r1, #0
 808045a:	4b09      	ldr	r3, [pc, #36]	; (8080480 <_Z14fullModemResetv+0x50>)
 808045c:	f247 5230 	movw	r2, #30000	; 0x7530
 8080460:	4608      	mov	r0, r1
 8080462:	f001 f957 	bl	8081714 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 8080466:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 808046a:	f001 fc47 	bl	8081cfc <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 808046e:	4b05      	ldr	r3, [pc, #20]	; (8080484 <_Z14fullModemResetv+0x54>)
 8080470:	220a      	movs	r2, #10
 8080472:	681b      	ldr	r3, [r3, #0]
 8080474:	2101      	movs	r1, #1
 8080476:	4668      	mov	r0, sp
 8080478:	f002 fd54 	bl	8082f24 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 808047c:	b003      	add	sp, #12
 808047e:	bd30      	pop	{r4, r5, pc}
 8080480:	080853f5 	.word	0x080853f5
 8080484:	200005e4 	.word	0x200005e4

08080488 <_Z11petWatchdogv>:

void watchdogISR() {
  watchDogFlag = true;
}

void petWatchdog() {
 8080488:	b508      	push	{r3, lr}
  digitalWrite(donePin,HIGH);
 808048a:	2101      	movs	r1, #1
 808048c:	2006      	movs	r0, #6
 808048e:	f003 f838 	bl	8083502 <digitalWrite>
  digitalWrite(donePin,LOW);
 8080492:	2100      	movs	r1, #0
 8080494:	2006      	movs	r0, #6
 8080496:	f003 f834 	bl	8083502 <digitalWrite>
  watchDogFlag = false;
 808049a:	4b02      	ldr	r3, [pc, #8]	; (80804a4 <_Z11petWatchdogv+0x1c>)
 808049c:	2200      	movs	r2, #0
 808049e:	701a      	strb	r2, [r3, #0]
 80804a0:	bd08      	pop	{r3, pc}
 80804a2:	bf00      	nop
 80804a4:	20000618 	.word	0x20000618

080804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80804a8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80804aa:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80804ac:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80804ae:	b17c      	cbz	r4, 80804d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80804b0:	6863      	ldr	r3, [r4, #4]
 80804b2:	3b01      	subs	r3, #1
 80804b4:	6063      	str	r3, [r4, #4]
 80804b6:	b95b      	cbnz	r3, 80804d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80804b8:	6823      	ldr	r3, [r4, #0]
 80804ba:	4620      	mov	r0, r4
 80804bc:	689b      	ldr	r3, [r3, #8]
 80804be:	4798      	blx	r3
          if (--_M_weak_count == 0)
 80804c0:	68a3      	ldr	r3, [r4, #8]
 80804c2:	3b01      	subs	r3, #1
 80804c4:	60a3      	str	r3, [r4, #8]
 80804c6:	b91b      	cbnz	r3, 80804d0 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 80804c8:	6823      	ldr	r3, [r4, #0]
 80804ca:	4620      	mov	r0, r4
 80804cc:	68db      	ldr	r3, [r3, #12]
 80804ce:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 80804d0:	4628      	mov	r0, r5
 80804d2:	bd38      	pop	{r3, r4, r5, pc}

080804d4 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
 80804d4:	b500      	push	{lr}
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Distance\":%i, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, distanceInCM, stateOfCharge,resetCount, alertCount);
 80804d6:	4b1e      	ldr	r3, [pc, #120]	; (8080550 <_Z9sendEventv+0x7c>)
    break;
  }
}

void sendEvent()
{
 80804d8:	b0c9      	sub	sp, #292	; 0x124
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Distance\":%i, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, distanceInCM, stateOfCharge,resetCount, alertCount);
 80804da:	681b      	ldr	r3, [r3, #0]
 80804dc:	9305      	str	r3, [sp, #20]
 80804de:	4b1d      	ldr	r3, [pc, #116]	; (8080554 <_Z9sendEventv+0x80>)
 80804e0:	681b      	ldr	r3, [r3, #0]
 80804e2:	9304      	str	r3, [sp, #16]
 80804e4:	4b1c      	ldr	r3, [pc, #112]	; (8080558 <_Z9sendEventv+0x84>)
 80804e6:	681b      	ldr	r3, [r3, #0]
 80804e8:	9303      	str	r3, [sp, #12]
 80804ea:	4b1c      	ldr	r3, [pc, #112]	; (808055c <_Z9sendEventv+0x88>)
 80804ec:	681b      	ldr	r3, [r3, #0]
 80804ee:	9302      	str	r3, [sp, #8]
 80804f0:	4b1b      	ldr	r3, [pc, #108]	; (8080560 <_Z9sendEventv+0x8c>)
 80804f2:	6818      	ldr	r0, [r3, #0]
 80804f4:	f003 fb82 	bl	8083bfc <__aeabi_f2d>
 80804f8:	4a1a      	ldr	r2, [pc, #104]	; (8080564 <_Z9sendEventv+0x90>)
 80804fa:	e9cd 0100 	strd	r0, r1, [sp]
 80804fe:	f44f 7180 	mov.w	r1, #256	; 0x100
 8080502:	a808      	add	r0, sp, #32
 8080504:	f001 fbe2 	bl	8081ccc <snprintf>
 8080508:	4b17      	ldr	r3, [pc, #92]	; (8080568 <_Z9sendEventv+0x94>)
  Particle.publish("Cellular_Milk_Hook", data, PRIVATE);
 808050a:	2200      	movs	r2, #0
 808050c:	4917      	ldr	r1, [pc, #92]	; (808056c <_Z9sendEventv+0x98>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808050e:	781b      	ldrb	r3, [r3, #0]
 8080510:	a806      	add	r0, sp, #24
 8080512:	f88d 2000 	strb.w	r2, [sp]
 8080516:	aa08      	add	r2, sp, #32
 8080518:	f7ff fde4 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808051c:	a807      	add	r0, sp, #28
 808051e:	f7ff ffc3 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentHourlyPeriod = Time.hour();                                      // Change the time period
 8080522:	f002 fdc9 	bl	80830b8 <_ZN9TimeClass4hourEv>
 8080526:	4b12      	ldr	r3, [pc, #72]	; (8080570 <_Z9sendEventv+0x9c>)
 8080528:	7018      	strb	r0, [r3, #0]
  currentDailyPeriod = Time.day();
 808052a:	f002 fdd9 	bl	80830e0 <_ZN9TimeClass3dayEv>
 808052e:	4b11      	ldr	r3, [pc, #68]	; (8080574 <_Z9sendEventv+0xa0>)
 8080530:	7018      	strb	r0, [r3, #0]
  currentMinutePeriod = Time.minute();
 8080532:	f002 fdcb 	bl	80830cc <_ZN9TimeClass6minuteEv>
 8080536:	4b10      	ldr	r3, [pc, #64]	; (8080578 <_Z9sendEventv+0xa4>)
  dataInFlight = true;                                                // set the data inflight flag
 8080538:	2201      	movs	r2, #1
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Distance\":%i, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, distanceInCM, stateOfCharge,resetCount, alertCount);
  Particle.publish("Cellular_Milk_Hook", data, PRIVATE);
  currentHourlyPeriod = Time.hour();                                      // Change the time period
  currentDailyPeriod = Time.day();
  currentMinutePeriod = Time.minute();
 808053a:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                // set the data inflight flag
 808053c:	4b0f      	ldr	r3, [pc, #60]	; (808057c <_Z9sendEventv+0xa8>)
 808053e:	701a      	strb	r2, [r3, #0]
 8080540:	f001 f920 	bl	8081784 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
 8080544:	4b0e      	ldr	r3, [pc, #56]	; (8080580 <_Z9sendEventv+0xac>)
 8080546:	6018      	str	r0, [r3, #0]
}
 8080548:	b049      	add	sp, #292	; 0x124
 808054a:	f85d fb04 	ldr.w	pc, [sp], #4
 808054e:	bf00      	nop
 8080550:	2000058c 	.word	0x2000058c
 8080554:	200005d8 	.word	0x200005d8
 8080558:	20000594 	.word	0x20000594
 808055c:	20000554 	.word	0x20000554
 8080560:	2000060c 	.word	0x2000060c
 8080564:	08085402 	.word	0x08085402
 8080568:	20000570 	.word	0x20000570
 808056c:	0808544f 	.word	0x0808544f
 8080570:	200005dc 	.word	0x200005dc
 8080574:	2000058a 	.word	0x2000058a
 8080578:	20000651 	.word	0x20000651
 808057c:	20000474 	.word	0x20000474
 8080580:	20000584 	.word	0x20000584

08080584 <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
 8080584:	b5f0      	push	{r4, r5, r6, r7, lr}
 8080586:	b085      	sub	sp, #20
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
 8080588:	4608      	mov	r0, r1
  dataInFlight = true;                                                // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
 808058a:	af02      	add	r7, sp, #8
 808058c:	460e      	mov	r6, r1
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
 808058e:	f004 fa94 	bl	8084aba <strlen>
 8080592:	f100 0308 	add.w	r3, r0, #8
 8080596:	f023 0307 	bic.w	r3, r3, #7
  {
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
 808059a:	466d      	mov	r5, sp
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
 808059c:	ebad 0d03 	sub.w	sp, sp, r3
 80805a0:	ac02      	add	r4, sp, #8
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
 80805a2:	1c42      	adds	r2, r0, #1
 80805a4:	4631      	mov	r1, r6
 80805a6:	4620      	mov	r0, r4
 80805a8:	f004 faa4 	bl	8084af4 <strncpy>
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
 80805ac:	f89d 6008 	ldrb.w	r6, [sp, #8]
 80805b0:	b94e      	cbnz	r6, 80805c6 <_Z14UbidotsHandlerPKcS0_+0x42>
 80805b2:	f001 fadb 	bl	8081b6c <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
 80805b6:	2800      	cmp	r0, #0
 80805b8:	d037      	beq.n	808062a <_Z14UbidotsHandlerPKcS0_+0xa6>
 80805ba:	4b1e      	ldr	r3, [pc, #120]	; (8080634 <_Z14UbidotsHandlerPKcS0_+0xb0>)
 80805bc:	4a1e      	ldr	r2, [pc, #120]	; (8080638 <_Z14UbidotsHandlerPKcS0_+0xb4>)
 80805be:	781b      	ldrb	r3, [r3, #0]
 80805c0:	f88d 6000 	strb.w	r6, [sp]
 80805c4:	e02a      	b.n	808061c <_Z14UbidotsHandlerPKcS0_+0x98>
    return;
  }
  int responseCode = atoi(dataCopy);                                  // Response is only a single number thanks to Template
 80805c6:	4620      	mov	r0, r4
 80805c8:	f004 f904 	bl	80847d4 <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 80805cc:	38c8      	subs	r0, #200	; 0xc8
 80805ce:	2801      	cmp	r0, #1
 80805d0:	d81b      	bhi.n	808060a <_Z14UbidotsHandlerPKcS0_+0x86>
 80805d2:	f001 facb 	bl	8081b6c <spark_cloud_flag_connected>
  {
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
 80805d6:	b160      	cbz	r0, 80805f2 <_Z14UbidotsHandlerPKcS0_+0x6e>
 80805d8:	4b16      	ldr	r3, [pc, #88]	; (8080634 <_Z14UbidotsHandlerPKcS0_+0xb0>)
 80805da:	2200      	movs	r2, #0
 80805dc:	781b      	ldrb	r3, [r3, #0]
 80805de:	4638      	mov	r0, r7
 80805e0:	f88d 2000 	strb.w	r2, [sp]
 80805e4:	4915      	ldr	r1, [pc, #84]	; (808063c <_Z14UbidotsHandlerPKcS0_+0xb8>)
 80805e6:	4a16      	ldr	r2, [pc, #88]	; (8080640 <_Z14UbidotsHandlerPKcS0_+0xbc>)
 80805e8:	f7ff fd7c 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 80805ec:	1d38      	adds	r0, r7, #4
 80805ee:	f7ff ff5b 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
 80805f2:	f002 ffb5 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 80805f6:	f002 fd58 	bl	80830aa <_ZN9TimeClass3nowEv>
 80805fa:	b2c1      	uxtb	r1, r0
 80805fc:	2005      	movs	r0, #5
 80805fe:	f7ff fd6f 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
    dataInFlight = false;                                             // Data has been received
 8080602:	4b10      	ldr	r3, [pc, #64]	; (8080644 <_Z14UbidotsHandlerPKcS0_+0xc0>)
 8080604:	2200      	movs	r2, #0
 8080606:	701a      	strb	r2, [r3, #0]
 8080608:	e00f      	b.n	808062a <_Z14UbidotsHandlerPKcS0_+0xa6>
 808060a:	f001 faaf 	bl	8081b6c <spark_cloud_flag_connected>
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
 808060e:	b160      	cbz	r0, 808062a <_Z14UbidotsHandlerPKcS0_+0xa6>
 8080610:	4b08      	ldr	r3, [pc, #32]	; (8080634 <_Z14UbidotsHandlerPKcS0_+0xb0>)
 8080612:	2200      	movs	r2, #0
 8080614:	781b      	ldrb	r3, [r3, #0]
 8080616:	f88d 2000 	strb.w	r2, [sp]
 808061a:	4622      	mov	r2, r4
 808061c:	4638      	mov	r0, r7
 808061e:	490a      	ldr	r1, [pc, #40]	; (8080648 <_Z14UbidotsHandlerPKcS0_+0xc4>)
 8080620:	f7ff fd60 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 8080624:	1d38      	adds	r0, r7, #4
 8080626:	f7ff ff3f 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    return;
 808062a:	46ad      	mov	sp, r5
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}
 808062c:	370c      	adds	r7, #12
 808062e:	46bd      	mov	sp, r7
 8080630:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8080632:	bf00      	nop
 8080634:	20000570 	.word	0x20000570
 8080638:	08085462 	.word	0x08085462
 808063c:	08085489 	.word	0x08085489
 8080640:	08085477 	.word	0x08085477
 8080644:	20000474 	.word	0x20000474
 8080648:	0808546a 	.word	0x0808546a

0808064c <_Z12setSolarMode6String>:
  }
  else return 0;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
 808064c:	b530      	push	{r4, r5, lr}
 808064e:	4924      	ldr	r1, [pc, #144]	; (80806e0 <_Z12setSolarMode6String+0x94>)
 8080650:	b085      	sub	sp, #20
 8080652:	4605      	mov	r5, r0
 8080654:	f002 fc33 	bl	8082ebe <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080658:	4604      	mov	r4, r0
 808065a:	b1d0      	cbz	r0, 8080692 <_Z12setSolarMode6String+0x46>
  {
    solarPowerMode = true;
 808065c:	4b21      	ldr	r3, [pc, #132]	; (80806e4 <_Z12setSolarMode6String+0x98>)
 808065e:	2401      	movs	r4, #1
 8080660:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 8080662:	f002 ff7d 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080666:	2004      	movs	r0, #4
 8080668:	f7ff fd38 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
    controlRegister = (0b00000100 | controlRegister);          // Turn on solarPowerMode
 808066c:	4d1e      	ldr	r5, [pc, #120]	; (80806e8 <_Z12setSolarMode6String+0x9c>)
 808066e:	f040 0004 	orr.w	r0, r0, #4
 8080672:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister);// Write it to the register
 8080674:	f002 ff74 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080678:	7829      	ldrb	r1, [r5, #0]
 808067a:	2004      	movs	r0, #4
 808067c:	f7ff fd30 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
    PMICreset();                                               // Change the power management Settings
 8080680:	f7ff fe72 	bl	8080368 <_Z9PMICresetv>
 8080684:	4b19      	ldr	r3, [pc, #100]	; (80806ec <_Z12setSolarMode6String+0xa0>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
 8080686:	2200      	movs	r2, #0
 8080688:	781b      	ldrb	r3, [r3, #0]
 808068a:	f88d 2000 	strb.w	r2, [sp]
 808068e:	4a18      	ldr	r2, [pc, #96]	; (80806f0 <_Z12setSolarMode6String+0xa4>)
 8080690:	e01c      	b.n	80806cc <_Z12setSolarMode6String+0x80>
 8080692:	4918      	ldr	r1, [pc, #96]	; (80806f4 <_Z12setSolarMode6String+0xa8>)
 8080694:	4628      	mov	r0, r5
 8080696:	f002 fc12 	bl	8082ebe <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 808069a:	b1f8      	cbz	r0, 80806dc <_Z12setSolarMode6String+0x90>
  {
    solarPowerMode = false;
 808069c:	4b11      	ldr	r3, [pc, #68]	; (80806e4 <_Z12setSolarMode6String+0x98>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
 808069e:	4d12      	ldr	r5, [pc, #72]	; (80806e8 <_Z12setSolarMode6String+0x9c>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    solarPowerMode = false;
 80806a0:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80806a2:	f002 ff5d 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 80806a6:	2004      	movs	r0, #4
 80806a8:	f7ff fd18 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
 80806ac:	f020 0004 	bic.w	r0, r0, #4
 80806b0:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 80806b2:	f002 ff55 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 80806b6:	7829      	ldrb	r1, [r5, #0]
 80806b8:	2004      	movs	r0, #4
 80806ba:	f7ff fd11 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
    PMICreset();                                                // Change the power management settings
 80806be:	f7ff fe53 	bl	8080368 <_Z9PMICresetv>
 80806c2:	4b0a      	ldr	r3, [pc, #40]	; (80806ec <_Z12setSolarMode6String+0xa0>)
    Particle.publish("Mode","Cleared Solar Powered Mode",PRIVATE);
 80806c4:	4a0c      	ldr	r2, [pc, #48]	; (80806f8 <_Z12setSolarMode6String+0xac>)
 80806c6:	781b      	ldrb	r3, [r3, #0]
 80806c8:	f88d 4000 	strb.w	r4, [sp]
 80806cc:	490b      	ldr	r1, [pc, #44]	; (80806fc <_Z12setSolarMode6String+0xb0>)
 80806ce:	a802      	add	r0, sp, #8
 80806d0:	f7ff fd08 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 80806d4:	a803      	add	r0, sp, #12
 80806d6:	f7ff fee7 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 80806da:	2001      	movs	r0, #1
  }
  else return 0;
}
 80806dc:	b005      	add	sp, #20
 80806de:	bd30      	pop	{r4, r5, pc}
 80806e0:	080857cc 	.word	0x080857cc
 80806e4:	20000652 	.word	0x20000652
 80806e8:	20000663 	.word	0x20000663
 80806ec:	20000570 	.word	0x20000570
 80806f0:	0808548f 	.word	0x0808548f
 80806f4:	080854a6 	.word	0x080854a6
 80806f8:	080854a8 	.word	0x080854a8
 80806fc:	080854be 	.word	0x080854be

08080700 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
 8080700:	b530      	push	{r4, r5, lr}
 8080702:	4922      	ldr	r1, [pc, #136]	; (808078c <_Z14setVerboseMode6String+0x8c>)
 8080704:	b085      	sub	sp, #20
 8080706:	4605      	mov	r5, r0
 8080708:	f002 fbd9 	bl	8082ebe <_ZNK6String6equalsEPKc>
  if (command == "1")
 808070c:	4604      	mov	r4, r0
 808070e:	b1c0      	cbz	r0, 8080742 <_Z14setVerboseMode6String+0x42>
  {
    verboseMode = true;
 8080710:	4b1f      	ldr	r3, [pc, #124]	; (8080790 <_Z14setVerboseMode6String+0x90>)
 8080712:	2401      	movs	r4, #1
 8080714:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 8080716:	f002 ff23 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 808071a:	2004      	movs	r0, #4
 808071c:	f7ff fcde 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 8080720:	4d1c      	ldr	r5, [pc, #112]	; (8080794 <_Z14setVerboseMode6String+0x94>)
 8080722:	f040 0008 	orr.w	r0, r0, #8
 8080726:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8080728:	f002 ff1a 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 808072c:	7829      	ldrb	r1, [r5, #0]
 808072e:	2004      	movs	r0, #4
 8080730:	f7ff fcd6 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
 8080734:	4b18      	ldr	r3, [pc, #96]	; (8080798 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 8080736:	2200      	movs	r2, #0
 8080738:	781b      	ldrb	r3, [r3, #0]
 808073a:	f88d 2000 	strb.w	r2, [sp]
 808073e:	4a17      	ldr	r2, [pc, #92]	; (808079c <_Z14setVerboseMode6String+0x9c>)
 8080740:	e01a      	b.n	8080778 <_Z14setVerboseMode6String+0x78>
 8080742:	4917      	ldr	r1, [pc, #92]	; (80807a0 <_Z14setVerboseMode6String+0xa0>)
 8080744:	4628      	mov	r0, r5
 8080746:	f002 fbba 	bl	8082ebe <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 808074a:	b1e8      	cbz	r0, 8080788 <_Z14setVerboseMode6String+0x88>
  {
    verboseMode = false;
 808074c:	4b10      	ldr	r3, [pc, #64]	; (8080790 <_Z14setVerboseMode6String+0x90>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 808074e:	4d11      	ldr	r5, [pc, #68]	; (8080794 <_Z14setVerboseMode6String+0x94>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
 8080750:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 8080752:	f002 ff05 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080756:	2004      	movs	r0, #4
 8080758:	f7ff fcc0 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 808075c:	f020 0008 	bic.w	r0, r0, #8
 8080760:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8080762:	f002 fefd 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080766:	7829      	ldrb	r1, [r5, #0]
 8080768:	2004      	movs	r0, #4
 808076a:	f7ff fcb9 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
 808076e:	4b0a      	ldr	r3, [pc, #40]	; (8080798 <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 8080770:	4a0c      	ldr	r2, [pc, #48]	; (80807a4 <_Z14setVerboseMode6String+0xa4>)
 8080772:	781b      	ldrb	r3, [r3, #0]
 8080774:	f88d 4000 	strb.w	r4, [sp]
 8080778:	490b      	ldr	r1, [pc, #44]	; (80807a8 <_Z14setVerboseMode6String+0xa8>)
 808077a:	a802      	add	r0, sp, #8
 808077c:	f7ff fcb2 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 8080780:	a803      	add	r0, sp, #12
 8080782:	f7ff fe91 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 8080786:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080788:	b005      	add	sp, #20
 808078a:	bd30      	pop	{r4, r5, pc}
 808078c:	080857cc 	.word	0x080857cc
 8080790:	20000604 	.word	0x20000604
 8080794:	20000663 	.word	0x20000663
 8080798:	20000570 	.word	0x20000570
 808079c:	080854c3 	.word	0x080854c3
 80807a0:	080854a6 	.word	0x080854a6
 80807a4:	080854d4 	.word	0x080854d4
 80807a8:	080854be 	.word	0x080854be

080807ac <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
 80807ac:	b570      	push	{r4, r5, r6, lr}
 80807ae:	b0cc      	sub	sp, #304	; 0x130
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 80807b0:	220a      	movs	r2, #10
 80807b2:	a905      	add	r1, sp, #20
 80807b4:	6800      	ldr	r0, [r0, #0]
 80807b6:	f004 fa37 	bl	8084c28 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 80807ba:	b2c5      	uxtb	r5, r0
 80807bc:	f105 030c 	add.w	r3, r5, #12
 80807c0:	b2db      	uxtb	r3, r3
 80807c2:	2b18      	cmp	r3, #24
 80807c4:	d83d      	bhi.n	8080842 <_Z11setTimeZone6String+0x96>

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 80807c6:	b244      	sxtb	r4, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
 80807c8:	4620      	mov	r0, r4
 80807ca:	f003 fd87 	bl	80842dc <__aeabi_i2f>
 80807ce:	f002 fc0d 	bl	8082fec <_ZN9TimeClass4zoneEf>
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
 80807d2:	f002 fec5 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 80807d6:	4629      	mov	r1, r5
 80807d8:	2003      	movs	r0, #3
 80807da:	f7ff fc81 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
  t = Time.now();
 80807de:	f002 fc64 	bl	80830aa <_ZN9TimeClass3nowEv>
 80807e2:	4e19      	ldr	r6, [pc, #100]	; (8080848 <_Z11setTimeZone6String+0x9c>)
 80807e4:	4d19      	ldr	r5, [pc, #100]	; (808084c <_Z11setTimeZone6String+0xa0>)
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 80807e6:	4623      	mov	r3, r4
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
  t = Time.now();
 80807e8:	6030      	str	r0, [r6, #0]
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 80807ea:	4a19      	ldr	r2, [pc, #100]	; (8080850 <_Z11setTimeZone6String+0xa4>)
 80807ec:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 80807f0:	2400      	movs	r4, #0
 80807f2:	a80c      	add	r0, sp, #48	; 0x30
 80807f4:	f001 fa6a 	bl	8081ccc <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 80807f8:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Time",data,PRIVATE);
 80807fa:	aa0c      	add	r2, sp, #48	; 0x30
 80807fc:	4915      	ldr	r1, [pc, #84]	; (8080854 <_Z11setTimeZone6String+0xa8>)
 80807fe:	a808      	add	r0, sp, #32
 8080800:	f88d 4000 	strb.w	r4, [sp]
 8080804:	f7ff fc6e 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 8080808:	a809      	add	r0, sp, #36	; 0x24
 808080a:	f7ff fe4d 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 808080e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080812:	f001 fa73 	bl	8081cfc <delay>
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
 8080816:	6831      	ldr	r1, [r6, #0]
 8080818:	a808      	add	r0, sp, #32
 808081a:	f002 fc03 	bl	8083024 <_ZN9TimeClass7timeStrEl>
 808081e:	9b08      	ldr	r3, [sp, #32]
 8080820:	490c      	ldr	r1, [pc, #48]	; (8080854 <_Z11setTimeZone6String+0xa8>)
 8080822:	9303      	str	r3, [sp, #12]
 8080824:	9a03      	ldr	r2, [sp, #12]
 8080826:	782b      	ldrb	r3, [r5, #0]
 8080828:	a806      	add	r0, sp, #24
 808082a:	f88d 4000 	strb.w	r4, [sp]
 808082e:	f7ff fc59 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 8080832:	a807      	add	r0, sp, #28
 8080834:	f7ff fe38 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080838:	a808      	add	r0, sp, #32
 808083a:	f002 facc 	bl	8082dd6 <_ZN6StringD1Ev>
  return 1;
 808083e:	2001      	movs	r0, #1
 8080840:	e000      	b.n	8080844 <_Z11setTimeZone6String+0x98>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 8080842:	2000      	movs	r0, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
  Particle.publish("Time",data,PRIVATE);
  delay(1000);
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
  return 1;
}
 8080844:	b04c      	add	sp, #304	; 0x130
 8080846:	bd70      	pop	{r4, r5, r6, pc}
 8080848:	20000574 	.word	0x20000574
 808084c:	20000570 	.word	0x20000570
 8080850:	080854e9 	.word	0x080854e9
 8080854:	080854fd 	.word	0x080854fd

08080858 <_Z15setLowPowerMode6String>:


int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
 8080858:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 808085a:	4926      	ldr	r1, [pc, #152]	; (80808f4 <_Z15setLowPowerMode6String+0x9c>)
 808085c:	4605      	mov	r5, r0
 808085e:	f002 fb2e 	bl	8082ebe <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
 8080862:	b928      	cbnz	r0, 8080870 <_Z15setLowPowerMode6String+0x18>
 8080864:	4924      	ldr	r1, [pc, #144]	; (80808f8 <_Z15setLowPowerMode6String+0xa0>)
 8080866:	4628      	mov	r0, r5
 8080868:	f002 fb29 	bl	8082ebe <_ZNK6String6equalsEPKc>
 808086c:	2800      	cmp	r0, #0
 808086e:	d03f      	beq.n	80808f0 <_Z15setLowPowerMode6String+0x98>
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 8080870:	f002 fe76 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080874:	2004      	movs	r0, #4
 8080876:	f7ff fc31 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
 808087a:	4c20      	ldr	r4, [pc, #128]	; (80808fc <_Z15setLowPowerMode6String+0xa4>)
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 808087c:	491d      	ldr	r1, [pc, #116]	; (80808f4 <_Z15setLowPowerMode6String+0x9c>)
 808087e:	7020      	strb	r0, [r4, #0]
 8080880:	4628      	mov	r0, r5
 8080882:	f002 fb1c 	bl	8082ebe <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
 8080886:	4606      	mov	r6, r0
 8080888:	b1a0      	cbz	r0, 80808b4 <_Z15setLowPowerMode6String+0x5c>
 808088a:	4b1d      	ldr	r3, [pc, #116]	; (8080900 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Low Power",PRIVATE);
 808088c:	2200      	movs	r2, #0
 808088e:	781b      	ldrb	r3, [r3, #0]
 8080890:	491c      	ldr	r1, [pc, #112]	; (8080904 <_Z15setLowPowerMode6String+0xac>)
 8080892:	f88d 2000 	strb.w	r2, [sp]
 8080896:	a802      	add	r0, sp, #8
 8080898:	4a1b      	ldr	r2, [pc, #108]	; (8080908 <_Z15setLowPowerMode6String+0xb0>)
 808089a:	f7ff fc23 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 808089e:	a803      	add	r0, sp, #12
 80808a0:	f7ff fe02 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 80808a4:	7823      	ldrb	r3, [r4, #0]
    lowPowerMode = true;
 80808a6:	2201      	movs	r2, #1
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
  if (command == "1")                                                 // Command calls for setting lowPowerMode
  {
    Particle.publish("Mode","Low Power",PRIVATE);
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 80808a8:	f043 0301 	orr.w	r3, r3, #1
 80808ac:	7023      	strb	r3, [r4, #0]
    lowPowerMode = true;
 80808ae:	4b17      	ldr	r3, [pc, #92]	; (808090c <_Z15setLowPowerMode6String+0xb4>)
 80808b0:	701a      	strb	r2, [r3, #0]
 80808b2:	e016      	b.n	80808e2 <_Z15setLowPowerMode6String+0x8a>
 80808b4:	4910      	ldr	r1, [pc, #64]	; (80808f8 <_Z15setLowPowerMode6String+0xa0>)
 80808b6:	4628      	mov	r0, r5
 80808b8:	f002 fb01 	bl	8082ebe <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
 80808bc:	b188      	cbz	r0, 80808e2 <_Z15setLowPowerMode6String+0x8a>
 80808be:	4b10      	ldr	r3, [pc, #64]	; (8080900 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Normal Operations",PRIVATE);
 80808c0:	4a13      	ldr	r2, [pc, #76]	; (8080910 <_Z15setLowPowerMode6String+0xb8>)
 80808c2:	781b      	ldrb	r3, [r3, #0]
 80808c4:	490f      	ldr	r1, [pc, #60]	; (8080904 <_Z15setLowPowerMode6String+0xac>)
 80808c6:	a802      	add	r0, sp, #8
 80808c8:	f88d 6000 	strb.w	r6, [sp]
 80808cc:	f7ff fc0a 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 80808d0:	a803      	add	r0, sp, #12
 80808d2:	f7ff fde9 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b1111110 & controlRegister);                  // If so, flip the lowPowerMode bit
 80808d6:	7823      	ldrb	r3, [r4, #0]
 80808d8:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 80808dc:	7023      	strb	r3, [r4, #0]
    lowPowerMode = false;
 80808de:	4b0b      	ldr	r3, [pc, #44]	; (808090c <_Z15setLowPowerMode6String+0xb4>)
 80808e0:	701e      	strb	r6, [r3, #0]
  }
  EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 80808e2:	f002 fe3d 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 80808e6:	2004      	movs	r0, #4
 80808e8:	7821      	ldrb	r1, [r4, #0]
 80808ea:	f7ff fbf9 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
 80808ee:	2001      	movs	r0, #1
  return 1;
}
 80808f0:	b004      	add	sp, #16
 80808f2:	bd70      	pop	{r4, r5, r6, pc}
 80808f4:	080857cc 	.word	0x080857cc
 80808f8:	080854a6 	.word	0x080854a6
 80808fc:	20000663 	.word	0x20000663
 8080900:	20000570 	.word	0x20000570
 8080904:	080854be 	.word	0x080854be
 8080908:	08085502 	.word	0x08085502
 808090c:	200005fe 	.word	0x200005fe
 8080910:	0808550c 	.word	0x0808550c

08080914 <_Z22publishStateTransitionv>:

void publishStateTransition(void)
{
 8080914:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8080916:	4d16      	ldr	r5, [pc, #88]	; (8080970 <_Z22publishStateTransitionv+0x5c>)
 8080918:	4916      	ldr	r1, [pc, #88]	; (8080974 <_Z22publishStateTransitionv+0x60>)
 808091a:	782a      	ldrb	r2, [r5, #0]
 808091c:	230e      	movs	r3, #14
 808091e:	fb03 1202 	mla	r2, r3, r2, r1
 8080922:	4c15      	ldr	r4, [pc, #84]	; (8080978 <_Z22publishStateTransitionv+0x64>)
  EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
  return 1;
}

void publishStateTransition(void)
{
 8080924:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 8080926:	7820      	ldrb	r0, [r4, #0]
 8080928:	9200      	str	r2, [sp, #0]
 808092a:	fb03 1300 	mla	r3, r3, r0, r1
 808092e:	4a13      	ldr	r2, [pc, #76]	; (808097c <_Z22publishStateTransitionv+0x68>)
 8080930:	2128      	movs	r1, #40	; 0x28
 8080932:	a804      	add	r0, sp, #16
 8080934:	f001 f9ca 	bl	8081ccc <snprintf>
  oldState = state;
 8080938:	782b      	ldrb	r3, [r5, #0]
 808093a:	7023      	strb	r3, [r4, #0]
 808093c:	f001 f916 	bl	8081b6c <spark_cloud_flag_connected>
  if(Particle.connected()) {
 8080940:	b170      	cbz	r0, 8080960 <_Z22publishStateTransitionv+0x4c>
    waitUntil(meterParticlePublish);
 8080942:	f7ff fd69 	bl	8080418 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.32>
 8080946:	4b0e      	ldr	r3, [pc, #56]	; (8080980 <_Z22publishStateTransitionv+0x6c>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
 8080948:	2200      	movs	r2, #0
 808094a:	781b      	ldrb	r3, [r3, #0]
 808094c:	a802      	add	r0, sp, #8
 808094e:	f88d 2000 	strb.w	r2, [sp]
 8080952:	490c      	ldr	r1, [pc, #48]	; (8080984 <_Z22publishStateTransitionv+0x70>)
 8080954:	aa04      	add	r2, sp, #16
 8080956:	f7ff fbc5 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 808095a:	a803      	add	r0, sp, #12
 808095c:	f7ff fda4 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  }
  Serial.println(stateTransitionString);
 8080960:	f002 fc90 	bl	8083284 <_Z16_fetch_usbserialv>
 8080964:	a904      	add	r1, sp, #16
 8080966:	f002 f9a8 	bl	8082cba <_ZN5Print7printlnEPKc>
}
 808096a:	b00f      	add	sp, #60	; 0x3c
 808096c:	bd30      	pop	{r4, r5, pc}
 808096e:	bf00      	nop
 8080970:	20000588 	.word	0x20000588
 8080974:	20000400 	.word	0x20000400
 8080978:	20000581 	.word	0x20000581
 808097c:	0808551e 	.word	0x0808551e
 8080980:	20000570 	.word	0x20000570
 8080984:	0808552c 	.word	0x0808552c

08080988 <loop>:
  meterParticlePublish();                                               // Sets the first publish time.
  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
}

void loop()
{
 8080988:	b570      	push	{r4, r5, r6, lr}

  switch(state) {
 808098a:	4c8c      	ldr	r4, [pc, #560]	; (8080bbc <loop+0x234>)
  meterParticlePublish();                                               // Sets the first publish time.
  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
}

void loop()
{
 808098c:	b086      	sub	sp, #24

  switch(state) {
 808098e:	7823      	ldrb	r3, [r4, #0]
 8080990:	3b01      	subs	r3, #1
 8080992:	2b06      	cmp	r3, #6
 8080994:	f200 8200 	bhi.w	8080d98 <loop+0x410>
 8080998:	e8df f013 	tbh	[pc, r3, lsl #1]
 808099c:	00070183 	.word	0x00070183
 80809a0:	0078003b 	.word	0x0078003b
 80809a4:	00d0009d 	.word	0x00d0009d
 80809a8:	014c      	.short	0x014c
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 80809aa:	4b85      	ldr	r3, [pc, #532]	; (8080bc0 <loop+0x238>)
 80809ac:	781b      	ldrb	r3, [r3, #0]
 80809ae:	b12b      	cbz	r3, 80809bc <loop+0x34>
 80809b0:	4b84      	ldr	r3, [pc, #528]	; (8080bc4 <loop+0x23c>)
 80809b2:	781b      	ldrb	r3, [r3, #0]
 80809b4:	2b02      	cmp	r3, #2
 80809b6:	d001      	beq.n	80809bc <loop+0x34>
 80809b8:	f7ff ffac 	bl	8080914 <_Z22publishStateTransitionv>
    if (watchDogFlag) petWatchdog();
 80809bc:	4b82      	ldr	r3, [pc, #520]	; (8080bc8 <loop+0x240>)
 80809be:	781b      	ldrb	r3, [r3, #0]
 80809c0:	b10b      	cbz	r3, 80809c6 <loop+0x3e>
 80809c2:	f7ff fd61 	bl	8080488 <_Z11petWatchdogv>
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;
 80809c6:	4b81      	ldr	r3, [pc, #516]	; (8080bcc <loop+0x244>)
 80809c8:	781b      	ldrb	r3, [r3, #0]
 80809ca:	b14b      	cbz	r3, 80809e0 <loop+0x58>
 80809cc:	f000 feda 	bl	8081784 <HAL_Timer_Get_Milli_Seconds>
 80809d0:	4b7f      	ldr	r3, [pc, #508]	; (8080bd0 <loop+0x248>)
 80809d2:	681b      	ldr	r3, [r3, #0]
 80809d4:	1ac0      	subs	r0, r0, r3
 80809d6:	4b7f      	ldr	r3, [pc, #508]	; (8080bd4 <loop+0x24c>)
 80809d8:	681b      	ldr	r3, [r3, #0]
 80809da:	4298      	cmp	r0, r3
 80809dc:	f200 81d6 	bhi.w	8080d8c <loop+0x404>
    if ((Time.minute() % 5 == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;      // Move to a 5 minute polling interval
 80809e0:	f002 fb74 	bl	80830cc <_ZN9TimeClass6minuteEv>
 80809e4:	2305      	movs	r3, #5
 80809e6:	fb90 f3f3 	sdiv	r3, r0, r3
 80809ea:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80809ee:	4298      	cmp	r0, r3
 80809f0:	d106      	bne.n	8080a00 <loop+0x78>
 80809f2:	f002 fb6b 	bl	80830cc <_ZN9TimeClass6minuteEv>
 80809f6:	4b78      	ldr	r3, [pc, #480]	; (8080bd8 <loop+0x250>)
 80809f8:	781b      	ldrb	r3, [r3, #0]
 80809fa:	4298      	cmp	r0, r3
 80809fc:	f040 81c9 	bne.w	8080d92 <loop+0x40a>
    if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;        // The battery is low - sleep
 8080a00:	4b76      	ldr	r3, [pc, #472]	; (8080bdc <loop+0x254>)
 8080a02:	681a      	ldr	r2, [r3, #0]
 8080a04:	4b76      	ldr	r3, [pc, #472]	; (8080be0 <loop+0x258>)
 8080a06:	681b      	ldr	r3, [r3, #0]
 8080a08:	429a      	cmp	r2, r3
 8080a0a:	f300 81c5 	bgt.w	8080d98 <loop+0x410>
 8080a0e:	2307      	movs	r3, #7
 8080a10:	e032      	b.n	8080a78 <loop+0xf0>
    break;

  case MEASURING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 8080a12:	4b6b      	ldr	r3, [pc, #428]	; (8080bc0 <loop+0x238>)
 8080a14:	781a      	ldrb	r2, [r3, #0]
 8080a16:	461d      	mov	r5, r3
 8080a18:	b12a      	cbz	r2, 8080a26 <loop+0x9e>
 8080a1a:	4b6a      	ldr	r3, [pc, #424]	; (8080bc4 <loop+0x23c>)
 8080a1c:	781b      	ldrb	r3, [r3, #0]
 8080a1e:	2b03      	cmp	r3, #3
 8080a20:	d001      	beq.n	8080a26 <loop+0x9e>
 8080a22:	f7ff ff77 	bl	8080914 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
 8080a26:	f7ff fbdf 	bl	80801e8 <_Z16takeMeasurementsv>
 8080a2a:	4606      	mov	r6, r0
 8080a2c:	b9a0      	cbnz	r0, 8080a58 <loop+0xd0>
    {
      state = ERROR_STATE;
 8080a2e:	2301      	movs	r3, #1
 8080a30:	7023      	strb	r3, [r4, #0]
      if (verboseMode) {
 8080a32:	782b      	ldrb	r3, [r5, #0]
 8080a34:	2b00      	cmp	r3, #0
 8080a36:	f000 81af 	beq.w	8080d98 <loop+0x410>
        waitUntil(meterParticlePublish);
 8080a3a:	f7ff fced 	bl	8080418 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.32>
 8080a3e:	4b69      	ldr	r3, [pc, #420]	; (8080be4 <loop+0x25c>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
 8080a40:	a802      	add	r0, sp, #8
 8080a42:	781b      	ldrb	r3, [r3, #0]
 8080a44:	4a68      	ldr	r2, [pc, #416]	; (8080be8 <loop+0x260>)
 8080a46:	f88d 6000 	strb.w	r6, [sp]
 8080a4a:	4968      	ldr	r1, [pc, #416]	; (8080bec <loop+0x264>)
 8080a4c:	f7ff fb4a 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 8080a50:	a803      	add	r0, sp, #12
 8080a52:	f7ff fd29 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080a56:	e19f      	b.n	8080d98 <loop+0x410>
      }
    }
    else if (abs(lastDistanceInCM-distanceInCM) >=1 || abs(lastTemperatureInC-temperatureInC) >= 1) state = REPORTING_STATE;
 8080a58:	4b65      	ldr	r3, [pc, #404]	; (8080bf0 <loop+0x268>)
 8080a5a:	681a      	ldr	r2, [r3, #0]
 8080a5c:	4b65      	ldr	r3, [pc, #404]	; (8080bf4 <loop+0x26c>)
 8080a5e:	681b      	ldr	r3, [r3, #0]
 8080a60:	429a      	cmp	r2, r3
 8080a62:	d108      	bne.n	8080a76 <loop+0xee>
 8080a64:	4b64      	ldr	r3, [pc, #400]	; (8080bf8 <loop+0x270>)
 8080a66:	6819      	ldr	r1, [r3, #0]
 8080a68:	4b64      	ldr	r3, [pc, #400]	; (8080bfc <loop+0x274>)
 8080a6a:	6818      	ldr	r0, [r3, #0]
 8080a6c:	f003 fb80 	bl	8084170 <__aeabi_fsub>
 8080a70:	f003 fe4e 	bl	8084710 <__aeabi_f2iz>
 8080a74:	b110      	cbz	r0, 8080a7c <loop+0xf4>
 8080a76:	2304      	movs	r3, #4
 8080a78:	7023      	strb	r3, [r4, #0]
 8080a7a:	e18d      	b.n	8080d98 <loop+0x410>
    else if (Time.hour() != currentHourlyPeriod) state = REPORTING_STATE;
 8080a7c:	f002 fb1c 	bl	80830b8 <_ZN9TimeClass4hourEv>
 8080a80:	4b5f      	ldr	r3, [pc, #380]	; (8080c00 <loop+0x278>)
 8080a82:	781b      	ldrb	r3, [r3, #0]
 8080a84:	4298      	cmp	r0, r3
 8080a86:	d1f6      	bne.n	8080a76 <loop+0xee>
    else state = IDLE_STATE;
 8080a88:	2302      	movs	r3, #2
 8080a8a:	e7f5      	b.n	8080a78 <loop+0xf0>
    break;

  case REPORTING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 8080a8c:	4b4c      	ldr	r3, [pc, #304]	; (8080bc0 <loop+0x238>)
 8080a8e:	781b      	ldrb	r3, [r3, #0]
 8080a90:	b12b      	cbz	r3, 8080a9e <loop+0x116>
 8080a92:	4b4c      	ldr	r3, [pc, #304]	; (8080bc4 <loop+0x23c>)
 8080a94:	781b      	ldrb	r3, [r3, #0]
 8080a96:	2b04      	cmp	r3, #4
 8080a98:	d001      	beq.n	8080a9e <loop+0x116>
 8080a9a:	f7ff ff3b 	bl	8080914 <_Z22publishStateTransitionv>
 8080a9e:	f001 f865 	bl	8081b6c <spark_cloud_flag_connected>
    if (Particle.connected()) {
 8080aa2:	2800      	cmp	r0, #0
 8080aa4:	d048      	beq.n	8080b38 <loop+0x1b0>
      if (Time.hour() == 12) Particle.syncTime();                         // Set the clock each day at noon
 8080aa6:	f002 fb07 	bl	80830b8 <_ZN9TimeClass4hourEv>
 8080aaa:	280c      	cmp	r0, #12
 8080aac:	d102      	bne.n	8080ab4 <loop+0x12c>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
 8080aae:	2000      	movs	r0, #0
 8080ab0:	f001 f87c 	bl	8081bac <spark_sync_time>
      if (Time.hour() == 0) setVerboseMode("0");                          // Turn off verbose mode
 8080ab4:	f002 fb00 	bl	80830b8 <_ZN9TimeClass4hourEv>
 8080ab8:	b948      	cbnz	r0, 8080ace <loop+0x146>
 8080aba:	4952      	ldr	r1, [pc, #328]	; (8080c04 <loop+0x27c>)
 8080abc:	a802      	add	r0, sp, #8
 8080abe:	f002 f9d1 	bl	8082e64 <_ZN6StringC1EPK19__FlashStringHelper>
 8080ac2:	a802      	add	r0, sp, #8
 8080ac4:	f7ff fe1c 	bl	8080700 <_Z14setVerboseMode6String>
 8080ac8:	a802      	add	r0, sp, #8
 8080aca:	f002 f984 	bl	8082dd6 <_ZN6StringD1Ev>
      sendEvent();                                                        // Send data to Ubidots
 8080ace:	f7ff fd01 	bl	80804d4 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                            // Wait for Response
 8080ad2:	2305      	movs	r3, #5
 8080ad4:	e7d0      	b.n	8080a78 <loop+0xf0>
    }
    else state = ERROR_STATE;
    break;

  case RESP_WAIT_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 8080ad6:	4b3a      	ldr	r3, [pc, #232]	; (8080bc0 <loop+0x238>)
 8080ad8:	781b      	ldrb	r3, [r3, #0]
 8080ada:	b12b      	cbz	r3, 8080ae8 <loop+0x160>
 8080adc:	4b39      	ldr	r3, [pc, #228]	; (8080bc4 <loop+0x23c>)
 8080ade:	781b      	ldrb	r3, [r3, #0]
 8080ae0:	2b05      	cmp	r3, #5
 8080ae2:	d001      	beq.n	8080ae8 <loop+0x160>
 8080ae4:	f7ff ff16 	bl	8080914 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
 8080ae8:	4b47      	ldr	r3, [pc, #284]	; (8080c08 <loop+0x280>)
 8080aea:	781b      	ldrb	r3, [r3, #0]
 8080aec:	b94b      	cbnz	r3, 8080b02 <loop+0x17a>
    {
      state = IDLE_STATE;
 8080aee:	2302      	movs	r3, #2
 8080af0:	7023      	strb	r3, [r4, #0]
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
 8080af2:	4a46      	ldr	r2, [pc, #280]	; (8080c0c <loop+0x284>)
 8080af4:	4b37      	ldr	r3, [pc, #220]	; (8080bd4 <loop+0x24c>)
 8080af6:	601a      	str	r2, [r3, #0]
 8080af8:	f000 fe44 	bl	8081784 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
 8080afc:	4b34      	ldr	r3, [pc, #208]	; (8080bd0 <loop+0x248>)
 8080afe:	6018      	str	r0, [r3, #0]
 8080b00:	e14a      	b.n	8080d98 <loop+0x410>
 8080b02:	f000 fe3f 	bl	8081784 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
 8080b06:	4b42      	ldr	r3, [pc, #264]	; (8080c10 <loop+0x288>)
 8080b08:	681b      	ldr	r3, [r3, #0]
 8080b0a:	1ac0      	subs	r0, r0, r3
 8080b0c:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8080b10:	4298      	cmp	r0, r3
 8080b12:	f240 8141 	bls.w	8080d98 <loop+0x410>
 8080b16:	f000 fe35 	bl	8081784 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080b1a:	4b3e      	ldr	r3, [pc, #248]	; (8080c14 <loop+0x28c>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 8080b1c:	2200      	movs	r2, #0
      state = IDLE_STATE;
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
      stayAwakeTimeStamp = millis();
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
      resetTimeStamp = millis();
 8080b1e:	6018      	str	r0, [r3, #0]
 8080b20:	4b30      	ldr	r3, [pc, #192]	; (8080be4 <loop+0x25c>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 8080b22:	a802      	add	r0, sp, #8
 8080b24:	781b      	ldrb	r3, [r3, #0]
 8080b26:	493c      	ldr	r1, [pc, #240]	; (8080c18 <loop+0x290>)
 8080b28:	f88d 2000 	strb.w	r2, [sp]
 8080b2c:	4a3b      	ldr	r2, [pc, #236]	; (8080c1c <loop+0x294>)
 8080b2e:	f7ff fad9 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 8080b32:	a803      	add	r0, sp, #12
 8080b34:	f7ff fcb8 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
 8080b38:	2301      	movs	r3, #1
 8080b3a:	e79d      	b.n	8080a78 <loop+0xf0>
    }
    break;

  case SLEEPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (verboseMode && state != oldState) publishStateTransition();
 8080b3c:	4b20      	ldr	r3, [pc, #128]	; (8080bc0 <loop+0x238>)
 8080b3e:	781a      	ldrb	r2, [r3, #0]
 8080b40:	461c      	mov	r4, r3
 8080b42:	b12a      	cbz	r2, 8080b50 <loop+0x1c8>
 8080b44:	4b1f      	ldr	r3, [pc, #124]	; (8080bc4 <loop+0x23c>)
 8080b46:	781b      	ldrb	r3, [r3, #0]
 8080b48:	2b06      	cmp	r3, #6
 8080b4a:	d001      	beq.n	8080b50 <loop+0x1c8>
 8080b4c:	f7ff fee2 	bl	8080914 <_Z22publishStateTransitionv>
    if (!readyForBed)                                                   // Only do these things once - at bedtime
 8080b50:	4b33      	ldr	r3, [pc, #204]	; (8080c20 <loop+0x298>)
 8080b52:	781d      	ldrb	r5, [r3, #0]
 8080b54:	461e      	mov	r6, r3
 8080b56:	bb3d      	cbnz	r5, 8080ba8 <loop+0x220>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080b58:	f001 f808 	bl	8081b6c <spark_cloud_flag_connected>
    {
      if (Particle.connected()) {
 8080b5c:	b1a8      	cbz	r0, 8080b8a <loop+0x202>
        if (verboseMode) {
 8080b5e:	7823      	ldrb	r3, [r4, #0]
 8080b60:	b16b      	cbz	r3, 8080b7e <loop+0x1f6>
          waitUntil(meterParticlePublish);
 8080b62:	f7ff fc59 	bl	8080418 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.32>
 8080b66:	4b1f      	ldr	r3, [pc, #124]	; (8080be4 <loop+0x25c>)
          Particle.publish("State","Going to Sleep",PRIVATE);
 8080b68:	a802      	add	r0, sp, #8
 8080b6a:	781b      	ldrb	r3, [r3, #0]
 8080b6c:	4a2d      	ldr	r2, [pc, #180]	; (8080c24 <loop+0x29c>)
 8080b6e:	f88d 5000 	strb.w	r5, [sp]
 8080b72:	491e      	ldr	r1, [pc, #120]	; (8080bec <loop+0x264>)
 8080b74:	f7ff fab6 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 8080b78:	a803      	add	r0, sp, #12
 8080b7a:	f7ff fc95 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        }
        delay(1000);                                                    // Time to send last update
 8080b7e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080b82:	f001 f8bb 	bl	8081cfc <delay>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 8080b86:	f7ff fbc3 	bl	8080310 <_Z22disconnectFromParticlev>
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
 8080b8a:	f002 fce9 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080b8e:	4b26      	ldr	r3, [pc, #152]	; (8080c28 <loop+0x2a0>)
 8080b90:	2002      	movs	r0, #2
 8080b92:	7819      	ldrb	r1, [r3, #0]
 8080b94:	f7ff faa4 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
      ledState = false;
 8080b98:	4b24      	ldr	r3, [pc, #144]	; (8080c2c <loop+0x2a4>)
 8080b9a:	2100      	movs	r1, #0
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080b9c:	2007      	movs	r0, #7
        }
        delay(1000);                                                    // Time to send last update
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
      ledState = false;
 8080b9e:	7019      	strb	r1, [r3, #0]
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080ba0:	f002 fcaf 	bl	8083502 <digitalWrite>
      readyForBed = true;                                               // Set the flag for the night
 8080ba4:	2301      	movs	r3, #1
 8080ba6:	7033      	strb	r3, [r6, #0]
    }
    int secondsToHour = (60*(60 - Time.minute()));                      // Time till the top of the hour
 8080ba8:	f002 fa90 	bl	80830cc <_ZN9TimeClass6minuteEv>
    System.sleep(SLEEP_MODE_SOFTPOWEROFF,secondsToHour);                // Very deep sleep till the next hour - then resets
 8080bac:	4b20      	ldr	r3, [pc, #128]	; (8080c30 <loop+0x2a8>)
 8080bae:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8080bb2:	223c      	movs	r2, #60	; 0x3c
 8080bb4:	681b      	ldr	r3, [r3, #0]
 8080bb6:	4342      	muls	r2, r0
 8080bb8:	2102      	movs	r1, #2
 8080bba:	e06e      	b.n	8080c9a <loop+0x312>
 8080bbc:	20000588 	.word	0x20000588
 8080bc0:	20000604 	.word	0x20000604
 8080bc4:	20000581 	.word	0x20000581
 8080bc8:	20000618 	.word	0x20000618
 8080bcc:	200005fe 	.word	0x200005fe
 8080bd0:	20000608 	.word	0x20000608
 8080bd4:	200005e0 	.word	0x200005e0
 8080bd8:	20000651 	.word	0x20000651
 8080bdc:	20000594 	.word	0x20000594
 8080be0:	20000568 	.word	0x20000568
 8080be4:	20000570 	.word	0x20000570
 8080be8:	0808553d 	.word	0x0808553d
 8080bec:	08085489 	.word	0x08085489
 8080bf0:	2000056c 	.word	0x2000056c
 8080bf4:	20000554 	.word	0x20000554
 8080bf8:	2000060c 	.word	0x2000060c
 8080bfc:	20000590 	.word	0x20000590
 8080c00:	200005dc 	.word	0x200005dc
 8080c04:	080854a6 	.word	0x080854a6
 8080c08:	20000474 	.word	0x20000474
 8080c0c:	00015f90 	.word	0x00015f90
 8080c10:	20000584 	.word	0x20000584
 8080c14:	20000614 	.word	0x20000614
 8080c18:	08085557 	.word	0x08085557
 8080c1c:	08085401 	.word	0x08085401
 8080c20:	20000664 	.word	0x20000664
 8080c24:	08085570 	.word	0x08085570
 8080c28:	200005d8 	.word	0x200005d8
 8080c2c:	20000580 	.word	0x20000580
 8080c30:	200005e4 	.word	0x200005e4
    } break;


  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
    if (verboseMode && state != oldState) publishStateTransition();
 8080c34:	4b59      	ldr	r3, [pc, #356]	; (8080d9c <loop+0x414>)
 8080c36:	781a      	ldrb	r2, [r3, #0]
 8080c38:	461c      	mov	r4, r3
 8080c3a:	b12a      	cbz	r2, 8080c48 <loop+0x2c0>
 8080c3c:	4b58      	ldr	r3, [pc, #352]	; (8080da0 <loop+0x418>)
 8080c3e:	781b      	ldrb	r3, [r3, #0]
 8080c40:	2b07      	cmp	r3, #7
 8080c42:	d001      	beq.n	8080c48 <loop+0x2c0>
 8080c44:	f7ff fe66 	bl	8080914 <_Z22publishStateTransitionv>
 8080c48:	f000 ff90 	bl	8081b6c <spark_cloud_flag_connected>
    if (Particle.connected()) {
 8080c4c:	b1b0      	cbz	r0, 8080c7c <loop+0x2f4>
      if (verboseMode) {
 8080c4e:	7823      	ldrb	r3, [r4, #0]
 8080c50:	b173      	cbz	r3, 8080c70 <loop+0x2e8>
        waitUntil(meterParticlePublish);
 8080c52:	f7ff fbe1 	bl	8080418 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.32>
 8080c56:	4b53      	ldr	r3, [pc, #332]	; (8080da4 <loop+0x41c>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080c58:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080c5a:	781b      	ldrb	r3, [r3, #0]
        Particle.publish("State","Low Battery - Sleeping",PRIVATE);
 8080c5c:	a802      	add	r0, sp, #8
 8080c5e:	f88d 2000 	strb.w	r2, [sp]
 8080c62:	4951      	ldr	r1, [pc, #324]	; (8080da8 <loop+0x420>)
 8080c64:	4a51      	ldr	r2, [pc, #324]	; (8080dac <loop+0x424>)
 8080c66:	f7ff fa3d 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 8080c6a:	a803      	add	r0, sp, #12
 8080c6c:	f7ff fc1c 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      }
      delay(1000);                                                    // Time to send last update
 8080c70:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080c74:	f001 f842 	bl	8081cfc <delay>
      disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 8080c78:	f7ff fb4a 	bl	8080310 <_Z22disconnectFromParticlev>
    }
    ledState = false;
 8080c7c:	4b4c      	ldr	r3, [pc, #304]	; (8080db0 <loop+0x428>)
 8080c7e:	2100      	movs	r1, #0
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080c80:	2007      	movs	r0, #7
        Particle.publish("State","Low Battery - Sleeping",PRIVATE);
      }
      delay(1000);                                                    // Time to send last update
      disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
    }
    ledState = false;
 8080c82:	7019      	strb	r1, [r3, #0]
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080c84:	f002 fc3d 	bl	8083502 <digitalWrite>
    int secondsToHour = (60*(60 - Time.minute()));                    // Time till the top of the hour
 8080c88:	f002 fa20 	bl	80830cc <_ZN9TimeClass6minuteEv>
    System.sleep(SLEEP_MODE_DEEP,secondsToHour);                      // Very deep sleep till the next hour - then resets
 8080c8c:	223c      	movs	r2, #60	; 0x3c
 8080c8e:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8080c92:	4b48      	ldr	r3, [pc, #288]	; (8080db4 <loop+0x42c>)
 8080c94:	4342      	muls	r2, r0
 8080c96:	681b      	ldr	r3, [r3, #0]
 8080c98:	2101      	movs	r1, #1
 8080c9a:	a802      	add	r0, sp, #8
 8080c9c:	f002 f942 	bl	8082f24 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
 8080ca0:	e07a      	b.n	8080d98 <loop+0x410>

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (verboseMode && state != oldState) publishStateTransition();
 8080ca2:	4b3e      	ldr	r3, [pc, #248]	; (8080d9c <loop+0x414>)
 8080ca4:	781b      	ldrb	r3, [r3, #0]
 8080ca6:	b12b      	cbz	r3, 8080cb4 <loop+0x32c>
 8080ca8:	4b3d      	ldr	r3, [pc, #244]	; (8080da0 <loop+0x418>)
 8080caa:	781b      	ldrb	r3, [r3, #0]
 8080cac:	2b01      	cmp	r3, #1
 8080cae:	d001      	beq.n	8080cb4 <loop+0x32c>
 8080cb0:	f7ff fe30 	bl	8080914 <_Z22publishStateTransitionv>
 8080cb4:	f000 fd66 	bl	8081784 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
 8080cb8:	4b3f      	ldr	r3, [pc, #252]	; (8080db8 <loop+0x430>)
 8080cba:	681b      	ldr	r3, [r3, #0]
 8080cbc:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8080cc0:	3330      	adds	r3, #48	; 0x30
 8080cc2:	4298      	cmp	r0, r3
 8080cc4:	d968      	bls.n	8080d98 <loop+0x410>
    {
      if (resetCount <= 3) {                                          // First try simple reset
 8080cc6:	4b3d      	ldr	r3, [pc, #244]	; (8080dbc <loop+0x434>)
 8080cc8:	681b      	ldr	r3, [r3, #0]
 8080cca:	2b03      	cmp	r3, #3
 8080ccc:	dc16      	bgt.n	8080cfc <loop+0x374>
 8080cce:	f000 ff4d 	bl	8081b6c <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
 8080cd2:	b160      	cbz	r0, 8080cee <loop+0x366>
 8080cd4:	4b33      	ldr	r3, [pc, #204]	; (8080da4 <loop+0x41c>)
 8080cd6:	2200      	movs	r2, #0
 8080cd8:	781b      	ldrb	r3, [r3, #0]
 8080cda:	a802      	add	r0, sp, #8
 8080cdc:	f88d 2000 	strb.w	r2, [sp]
 8080ce0:	4931      	ldr	r1, [pc, #196]	; (8080da8 <loop+0x420>)
 8080ce2:	4a37      	ldr	r2, [pc, #220]	; (8080dc0 <loop+0x438>)
 8080ce4:	f7ff f9fe 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 8080ce8:	a803      	add	r0, sp, #12
 8080cea:	f7ff fbdd 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8080cee:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080cf2:	f001 f803 	bl	8081cfc <delay>
        System.reset();
 8080cf6:	f002 f911 	bl	8082f1c <_ZN11SystemClass5resetEv>
 8080cfa:	e04d      	b.n	8080d98 <loop+0x410>
      }
      else if (Time.now() - EEPROM.read(MEM_MAP::currentCountsTimeAddr) > 7200L) { //It has been more than two hours since a sucessful hook response
 8080cfc:	f002 f9d5 	bl	80830aa <_ZN9TimeClass3nowEv>
 8080d00:	4604      	mov	r4, r0
 8080d02:	f002 fc2d 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080d06:	2005      	movs	r0, #5
 8080d08:	f7ff f9e8 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
 8080d0c:	1a20      	subs	r0, r4, r0
 8080d0e:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
 8080d12:	dd1e      	ble.n	8080d52 <loop+0x3ca>
 8080d14:	f000 ff2a 	bl	8081b6c <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
 8080d18:	b160      	cbz	r0, 8080d34 <loop+0x3ac>
 8080d1a:	4b22      	ldr	r3, [pc, #136]	; (8080da4 <loop+0x41c>)
 8080d1c:	2200      	movs	r2, #0
 8080d1e:	781b      	ldrb	r3, [r3, #0]
 8080d20:	a802      	add	r0, sp, #8
 8080d22:	f88d 2000 	strb.w	r2, [sp]
 8080d26:	4920      	ldr	r1, [pc, #128]	; (8080da8 <loop+0x420>)
 8080d28:	4a26      	ldr	r2, [pc, #152]	; (8080dc4 <loop+0x43c>)
 8080d2a:	f7ff f9db 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 8080d2e:	a803      	add	r0, sp, #12
 8080d30:	f7ff fbba 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8080d34:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080d38:	f000 ffe0 	bl	8081cfc <delay>
        EEPROM.write(MEM_MAP::resetCountAddr,0);                           // Zero the ResetCount
 8080d3c:	f002 fc10 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080d40:	2100      	movs	r1, #0
 8080d42:	2002      	movs	r0, #2
 8080d44:	f7ff f9cc 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
        digitalWrite(hardResetPin,HIGH);                              // This will cut all power to the Electron AND the carrier board
 8080d48:	2101      	movs	r1, #1
 8080d4a:	2004      	movs	r0, #4
 8080d4c:	f002 fbd9 	bl	8083502 <digitalWrite>
 8080d50:	e022      	b.n	8080d98 <loop+0x410>
 8080d52:	f000 ff0b 	bl	8081b6c <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
 8080d56:	b160      	cbz	r0, 8080d72 <loop+0x3ea>
 8080d58:	4b12      	ldr	r3, [pc, #72]	; (8080da4 <loop+0x41c>)
 8080d5a:	2200      	movs	r2, #0
 8080d5c:	781b      	ldrb	r3, [r3, #0]
 8080d5e:	a802      	add	r0, sp, #8
 8080d60:	f88d 2000 	strb.w	r2, [sp]
 8080d64:	4910      	ldr	r1, [pc, #64]	; (8080da8 <loop+0x420>)
 8080d66:	4a18      	ldr	r2, [pc, #96]	; (8080dc8 <loop+0x440>)
 8080d68:	f7ff f9bc 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 8080d6c:	a803      	add	r0, sp, #12
 8080d6e:	f7ff fb9b 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8080d72:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080d76:	f000 ffc1 	bl	8081cfc <delay>
        EEPROM.write(MEM_MAP::resetCountAddr,0);                           // Zero the ResetCount
 8080d7a:	f002 fbf1 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080d7e:	2100      	movs	r1, #0
 8080d80:	2002      	movs	r0, #2
 8080d82:	f7ff f9ad 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
        fullModemReset();                                             // Full Modem reset and reboots
 8080d86:	f7ff fb53 	bl	8080430 <_Z14fullModemResetv>
      }
    }
    break;
  }
}
 8080d8a:	e005      	b.n	8080d98 <loop+0x410>

  switch(state) {
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
    if (watchDogFlag) petWatchdog();
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;
 8080d8c:	2306      	movs	r3, #6
 8080d8e:	7023      	strb	r3, [r4, #0]
 8080d90:	e626      	b.n	80809e0 <loop+0x58>
    if ((Time.minute() % 5 == 0) && (Time.minute() != currentMinutePeriod)) state = MEASURING_STATE;      // Move to a 5 minute polling interval
 8080d92:	2303      	movs	r3, #3
 8080d94:	7023      	strb	r3, [r4, #0]
 8080d96:	e633      	b.n	8080a00 <loop+0x78>
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
}
 8080d98:	b006      	add	sp, #24
 8080d9a:	bd70      	pop	{r4, r5, r6, pc}
 8080d9c:	20000604 	.word	0x20000604
 8080da0:	20000581 	.word	0x20000581
 8080da4:	20000570 	.word	0x20000570
 8080da8:	08085489 	.word	0x08085489
 8080dac:	0808557f 	.word	0x0808557f
 8080db0:	20000580 	.word	0x20000580
 8080db4:	200005e4 	.word	0x200005e4
 8080db8:	20000614 	.word	0x20000614
 8080dbc:	200005d8 	.word	0x200005d8
 8080dc0:	08085596 	.word	0x08085596
 8080dc4:	080855aa 	.word	0x080855aa
 8080dc8:	080855c4 	.word	0x080855c4

08080dcc <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080dcc:	2300      	movs	r3, #0
 8080dce:	2204      	movs	r2, #4
 8080dd0:	f000 bea4 	b.w	8081b1c <spark_variable>

08080dd4 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8080dd4:	4602      	mov	r2, r0
 8080dd6:	4801      	ldr	r0, [pc, #4]	; (8080ddc <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 8080dd8:	f001 b926 	b.w	8082028 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080ddc:	08081ffd 	.word	0x08081ffd

08080de0 <setup>:
float lastTemperatureInC = 0;
int distanceInCM = 0;
int lastDistanceInCM = 0;

void setup()                                                      // Note: Disconnected Setup()
{
 8080de0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080de4:	b0b8      	sub	sp, #224	; 0xe0
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
 8080de6:	aa08      	add	r2, sp, #32
 8080de8:	4616      	mov	r6, r2
 8080dea:	4b93      	ldr	r3, [pc, #588]	; (8081038 <setup+0x258>)
 8080dec:	f103 0510 	add.w	r5, r3, #16
 8080df0:	4614      	mov	r4, r2
 8080df2:	6818      	ldr	r0, [r3, #0]
 8080df4:	6859      	ldr	r1, [r3, #4]
 8080df6:	3308      	adds	r3, #8
 8080df8:	c403      	stmia	r4!, {r0, r1}
 8080dfa:	42ab      	cmp	r3, r5
 8080dfc:	4622      	mov	r2, r4
 8080dfe:	d1f7      	bne.n	8080df0 <setup+0x10>
 8080e00:	8819      	ldrh	r1, [r3, #0]
 8080e02:	789b      	ldrb	r3, [r3, #2]
 8080e04:	222d      	movs	r2, #45	; 0x2d
 8080e06:	70a3      	strb	r3, [r4, #2]
 8080e08:	8021      	strh	r1, [r4, #0]
 8080e0a:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 8080e0e:	2100      	movs	r1, #0
  state = IDLE_STATE;
 8080e10:	4f8a      	ldr	r7, [pc, #552]	; (808103c <setup+0x25c>)
int distanceInCM = 0;
int lastDistanceInCM = 0;

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
 8080e12:	f003 fdf4 	bl	80849fe <memset>
  state = IDLE_STATE;
 8080e16:	2502      	movs	r5, #2

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080e18:	2101      	movs	r1, #1
 8080e1a:	2007      	movs	r0, #7
int lastDistanceInCM = 0;

void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
  state = IDLE_STATE;
 8080e1c:	703d      	strb	r5, [r7, #0]

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080e1e:	f002 fb5f 	bl	80834e0 <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
 8080e22:	2100      	movs	r1, #0
 8080e24:	2005      	movs	r0, #5
 8080e26:	f002 fb5b 	bl	80834e0 <pinMode>
  pinMode(donePin,OUTPUT);                                        // To pet the watchdog
 8080e2a:	2101      	movs	r1, #1
 8080e2c:	2006      	movs	r0, #6
 8080e2e:	f002 fb57 	bl	80834e0 <pinMode>
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
 8080e32:	2100      	movs	r1, #0
 8080e34:	2011      	movs	r0, #17
 8080e36:	f002 fb53 	bl	80834e0 <pinMode>
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH
 8080e3a:	2101      	movs	r1, #1
 8080e3c:	2004      	movs	r0, #4
 8080e3e:	f002 fb4f 	bl	80834e0 <pinMode>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 8080e42:	a804      	add	r0, sp, #16
    particle::Future<bool> publish(const char* name, const char* data) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data, int ttl) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 8080e44:	2400      	movs	r4, #0
 8080e46:	f000 fe99 	bl	8081b7c <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8080e4a:	2300      	movs	r3, #0
 8080e4c:	227d      	movs	r2, #125	; 0x7d
 8080e4e:	a918      	add	r1, sp, #96	; 0x60
 8080e50:	a804      	add	r0, sp, #16
 8080e52:	f002 f846 	bl	8082ee2 <_ZNK6String8getBytesEPhjj>
 8080e56:	4623      	mov	r3, r4
 8080e58:	4622      	mov	r2, r4
 8080e5a:	4979      	ldr	r1, [pc, #484]	; (8081040 <setup+0x260>)
 8080e5c:	9401      	str	r4, [sp, #4]
 8080e5e:	9400      	str	r4, [sp, #0]
 8080e60:	a818      	add	r0, sp, #96	; 0x60
 8080e62:	f000 fe9b 	bl	8081b9c <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
 8080e66:	4977      	ldr	r1, [pc, #476]	; (8081044 <setup+0x264>)
 8080e68:	4877      	ldr	r0, [pc, #476]	; (8081048 <setup+0x268>)
 8080e6a:	f7ff ffaf 	bl	8080dcc <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080e6e:	4623      	mov	r3, r4
 8080e70:	462a      	mov	r2, r5
 8080e72:	4976      	ldr	r1, [pc, #472]	; (808104c <setup+0x26c>)
 8080e74:	4876      	ldr	r0, [pc, #472]	; (8081050 <setup+0x270>)
 8080e76:	f000 fe51 	bl	8081b1c <spark_variable>
 8080e7a:	4976      	ldr	r1, [pc, #472]	; (8081054 <setup+0x274>)
 8080e7c:	4623      	mov	r3, r4
 8080e7e:	2204      	movs	r2, #4
 8080e80:	6809      	ldr	r1, [r1, #0]
 8080e82:	4875      	ldr	r0, [pc, #468]	; (8081058 <setup+0x278>)
 8080e84:	f000 fe4a 	bl	8081b1c <spark_variable>
  Particle.variable("ResetCount", resetCount);
  Particle.variable("Release",releaseNumber);
  Particle.variable("stateOfChg", batteryString);
 8080e88:	4974      	ldr	r1, [pc, #464]	; (808105c <setup+0x27c>)
 8080e8a:	4875      	ldr	r0, [pc, #468]	; (8081060 <setup+0x280>)
 8080e8c:	f7ff ff9e 	bl	8080dcc <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
 8080e90:	4623      	mov	r3, r4
 8080e92:	2201      	movs	r2, #1
 8080e94:	4973      	ldr	r1, [pc, #460]	; (8081064 <setup+0x284>)
 8080e96:	4874      	ldr	r0, [pc, #464]	; (8081068 <setup+0x288>)
 8080e98:	f000 fe40 	bl	8081b1c <spark_variable>
  Particle.variable("lowPowerMode",lowPowerMode);
  Particle.variable("temperature", temperatureString);
 8080e9c:	4973      	ldr	r1, [pc, #460]	; (808106c <setup+0x28c>)
 8080e9e:	4874      	ldr	r0, [pc, #464]	; (8081070 <setup+0x290>)
 8080ea0:	f7ff ff94 	bl	8080dcc <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>
  Particle.variable("distance", distanceString);
 8080ea4:	4973      	ldr	r1, [pc, #460]	; (8081074 <setup+0x294>)
 8080ea6:	4874      	ldr	r0, [pc, #464]	; (8081078 <setup+0x298>)
 8080ea8:	f7ff ff90 	bl	8080dcc <_ZN10CloudClass8variableIA9_cIA16_cEEEbRKT_DpRKT0_>

  
  Particle.function("Measure-Now",measureNow);
 8080eac:	4973      	ldr	r1, [pc, #460]	; (808107c <setup+0x29c>)
 8080eae:	4874      	ldr	r0, [pc, #464]	; (8081080 <setup+0x2a0>)
 8080eb0:	f7ff ff90 	bl	8080dd4 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
 8080eb4:	4973      	ldr	r1, [pc, #460]	; (8081084 <setup+0x2a4>)
 8080eb6:	4874      	ldr	r0, [pc, #464]	; (8081088 <setup+0x2a8>)
 8080eb8:	f7ff ff8c 	bl	8080dd4 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
 8080ebc:	4973      	ldr	r1, [pc, #460]	; (808108c <setup+0x2ac>)
 8080ebe:	4874      	ldr	r0, [pc, #464]	; (8081090 <setup+0x2b0>)
 8080ec0:	f7ff ff88 	bl	8080dd4 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
 8080ec4:	4973      	ldr	r1, [pc, #460]	; (8081094 <setup+0x2b4>)
 8080ec6:	4874      	ldr	r0, [pc, #464]	; (8081098 <setup+0x2b8>)
 8080ec8:	f7ff ff84 	bl	8080dd4 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTimeZone",setTimeZone);
 8080ecc:	4973      	ldr	r1, [pc, #460]	; (808109c <setup+0x2bc>)
 8080ece:	4874      	ldr	r0, [pc, #464]	; (80810a0 <setup+0x2c0>)
 8080ed0:	f7ff ff80 	bl	8080dd4 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
 8080ed4:	f002 fb44 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080ed8:	4620      	mov	r0, r4
 8080eda:	f7ff f8ff 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
 8080ede:	2801      	cmp	r0, #1
 8080ee0:	d119      	bne.n	8080f16 <setup+0x136>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
    }
  }

  resetCount = EEPROM.read(MEM_MAP::resetCountAddr);                    // Retrive system recount data from FRAM
 8080ee2:	f002 fb3d 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080ee6:	2002      	movs	r0, #2
 8080ee8:	f7ff f8f8 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
 8080eec:	4c57      	ldr	r4, [pc, #348]	; (808104c <setup+0x26c>)
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080eee:	2200      	movs	r2, #0
 8080ef0:	6020      	str	r0, [r4, #0]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080ef2:	4611      	mov	r1, r2
 8080ef4:	a802      	add	r0, sp, #8
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080ef6:	9202      	str	r2, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080ef8:	f000 fc2c 	bl	8081754 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080efc:	9b02      	ldr	r3, [sp, #8]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
 8080efe:	2b14      	cmp	r3, #20
 8080f00:	d11e      	bne.n	8080f40 <setup+0x160>
  {
    resetCount++;
 8080f02:	6823      	ldr	r3, [r4, #0]
 8080f04:	3301      	adds	r3, #1
 8080f06:	6023      	str	r3, [r4, #0]
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                  // If so, store incremented number - watchdog must have done This
 8080f08:	f002 fb2a 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080f0c:	7821      	ldrb	r1, [r4, #0]
 8080f0e:	2002      	movs	r0, #2
 8080f10:	f7ff f8e6 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
 8080f14:	e014      	b.n	8080f40 <setup+0x160>
  Particle.function("Solar-Mode",setSolarMode);
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
 8080f16:	f002 fb23 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080f1a:	2501      	movs	r5, #1
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080f1c:	2204      	movs	r2, #4
 8080f1e:	a902      	add	r1, sp, #8
 8080f20:	4620      	mov	r0, r4
 8080f22:	9502      	str	r5, [sp, #8]
 8080f24:	f000 fc56 	bl	80817d4 <HAL_EEPROM_Put>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
 8080f28:	f002 fb1a 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080f2c:	4628      	mov	r0, r5
 8080f2e:	2204      	movs	r2, #4
 8080f30:	a902      	add	r1, sp, #8
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
 8080f32:	3501      	adds	r5, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
 8080f34:	9402      	str	r4, [sp, #8]
 8080f36:	f000 fc4d 	bl	80817d4 <HAL_EEPROM_Put>
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
 8080f3a:	2d0a      	cmp	r5, #10
 8080f3c:	d1f4      	bne.n	8080f28 <setup+0x148>
 8080f3e:	e7d0      	b.n	8080ee2 <setup+0x102>
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
  {
    resetCount++;
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                  // If so, store incremented number - watchdog must have done This
  }
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
 8080f40:	6823      	ldr	r3, [r4, #0]
 8080f42:	2b05      	cmp	r3, #5
 8080f44:	dd07      	ble.n	8080f56 <setup+0x176>
    EEPROM.write(MEM_MAP::resetCountAddr,4);                            // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
 8080f46:	f002 fb0b 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080f4a:	2104      	movs	r1, #4
 8080f4c:	2002      	movs	r0, #2
 8080f4e:	f7ff f8c7 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
 8080f52:	f7ff fa6d 	bl	8080430 <_Z14fullModemResetv>
  }

  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
 8080f56:	f002 fb03 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080f5a:	2003      	movs	r0, #3
 8080f5c:	f7ff f8be 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
 8080f60:	f100 030c 	add.w	r3, r0, #12
 8080f64:	b2db      	uxtb	r3, r3
 8080f66:	2b18      	cmp	r3, #24
 8080f68:	d803      	bhi.n	8080f72 <setup+0x192>
 8080f6a:	b240      	sxtb	r0, r0
 8080f6c:	f003 f9b6 	bl	80842dc <__aeabi_i2f>
 8080f70:	e000      	b.n	8080f74 <setup+0x194>
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM
 8080f72:	2000      	movs	r0, #0
 8080f74:	f002 f83a 	bl	8082fec <_ZN9TimeClass4zoneEf>

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8080f78:	f002 faf2 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080f7c:	2004      	movs	r0, #4
 8080f7e:	f7ff f8ad 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8080f82:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8081064 <setup+0x284>
 8080f86:	f000 0301 	and.w	r3, r0, #1
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8080f8a:	4d46      	ldr	r5, [pc, #280]	; (80810a4 <setup+0x2c4>)
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8080f8c:	f888 3000 	strb.w	r3, [r8]
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode                                           
 8080f90:	4c45      	ldr	r4, [pc, #276]	; (80810a8 <setup+0x2c8>)
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
 8080f92:	4b46      	ldr	r3, [pc, #280]	; (80810ac <setup+0x2cc>)
 8080f94:	f3c0 0280 	ubfx	r2, r0, #2, #1
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8080f98:	7028      	strb	r0, [r5, #0]
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode                                           
 8080f9a:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
 8080f9e:	701a      	strb	r2, [r3, #0]
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode                                           
 8080fa0:	7020      	strb	r0, [r4, #0]

  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
 8080fa2:	f7ff f9e1 	bl	8080368 <_Z9PMICresetv>

  takeMeasurements();                                                   // For the benefit of monitoring the device
 8080fa6:	f7ff f91f 	bl	80801e8 <_Z16takeMeasurementsv>

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
 8080faa:	2005      	movs	r0, #5
 8080fac:	f002 fac2 	bl	8083534 <digitalRead>
 8080fb0:	b958      	cbnz	r0, 8080fca <setup+0x1ea>
    lowPowerMode = false;                                               // Press the user switch while resetting the device
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
 8080fb2:	782b      	ldrb	r3, [r5, #0]
  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode

  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
    lowPowerMode = false;                                               // Press the user switch while resetting the device
 8080fb4:	f888 0000 	strb.w	r0, [r8]
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
 8080fb8:	f023 0301 	bic.w	r3, r3, #1
 8080fbc:	702b      	strb	r3, [r5, #0]
    EEPROM.write(controlRegister,MEM_MAP::controlRegisterAddr);         // Write to the EEMPROM
 8080fbe:	f002 facf 	bl	8083560 <_Z21__fetch_global_EEPROMv>
 8080fc2:	2104      	movs	r1, #4
 8080fc4:	7828      	ldrb	r0, [r5, #0]
 8080fc6:	f7ff f88b 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
  }

  if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
 8080fca:	4b39      	ldr	r3, [pc, #228]	; (80810b0 <setup+0x2d0>)
 8080fcc:	681a      	ldr	r2, [r3, #0]
 8080fce:	4b39      	ldr	r3, [pc, #228]	; (80810b4 <setup+0x2d4>)
 8080fd0:	681b      	ldr	r3, [r3, #0]
 8080fd2:	429a      	cmp	r2, r3
 8080fd4:	dc02      	bgt.n	8080fdc <setup+0x1fc>
 8080fd6:	2307      	movs	r3, #7
 8080fd8:	703b      	strb	r3, [r7, #0]
 8080fda:	e008      	b.n	8080fee <setup+0x20e>
  else if(!connectToParticle()) {
 8080fdc:	f7ff f954 	bl	8080288 <_Z17connectToParticlev>
 8080fe0:	b928      	cbnz	r0, 8080fee <setup+0x20e>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
 8080fe2:	2301      	movs	r3, #1
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
 8080fe4:	4934      	ldr	r1, [pc, #208]	; (80810b8 <setup+0x2d8>)
 8080fe6:	4630      	mov	r0, r6
    EEPROM.write(controlRegister,MEM_MAP::controlRegisterAddr);         // Write to the EEMPROM
  }

  if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
 8080fe8:	703b      	strb	r3, [r7, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
 8080fea:	f003 fd43 	bl	8084a74 <strcpy>
  }

  petWatchdog();                                                        // Need to pet the watchdog as we are waking from sleep
  attachInterrupt(wakeUpPin,watchdogISR,RISING);                        // Interrupt from watchdog - need to pet when triggered
 8080fee:	2500      	movs	r5, #0
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  petWatchdog();                                                        // Need to pet the watchdog as we are waking from sleep
 8080ff0:	f7ff fa4a 	bl	8080488 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin,watchdogISR,RISING);                        // Interrupt from watchdog - need to pet when triggered
 8080ff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080ff8:	2201      	movs	r2, #1
 8080ffa:	4930      	ldr	r1, [pc, #192]	; (80810bc <setup+0x2dc>)
 8080ffc:	9500      	str	r5, [sp, #0]
 8080ffe:	2011      	movs	r0, #17
 8081000:	f001 fb7a 	bl	80826f8 <_Z15attachInterrupttPFvvE13InterruptModeah>

  meterParticlePublish();                                               // Sets the first publish time.
 8081004:	f7ff f9f6 	bl	80803f4 <_Z20meterParticlePublishv>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8081008:	f000 fdb0 	bl	8081b6c <spark_cloud_flag_connected>
  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
 808100c:	b108      	cbz	r0, 8081012 <setup+0x232>
 808100e:	7823      	ldrb	r3, [r4, #0]
 8081010:	b92b      	cbnz	r3, 808101e <setup+0x23e>
  pinMode(donePin,OUTPUT);                                        // To pet the watchdog
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
 8081012:	a804      	add	r0, sp, #16
 8081014:	f001 fedf 	bl	8082dd6 <_ZN6StringD1Ev>
  petWatchdog();                                                        // Need to pet the watchdog as we are waking from sleep
  attachInterrupt(wakeUpPin,watchdogISR,RISING);                        // Interrupt from watchdog - need to pet when triggered

  meterParticlePublish();                                               // Sets the first publish time.
  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
}
 8081018:	b038      	add	sp, #224	; 0xe0
 808101a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808101e:	4b28      	ldr	r3, [pc, #160]	; (80810c0 <setup+0x2e0>)

  petWatchdog();                                                        // Need to pet the watchdog as we are waking from sleep
  attachInterrupt(wakeUpPin,watchdogISR,RISING);                        // Interrupt from watchdog - need to pet when triggered

  meterParticlePublish();                                               // Sets the first publish time.
  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
 8081020:	a802      	add	r0, sp, #8
 8081022:	781b      	ldrb	r3, [r3, #0]
 8081024:	4632      	mov	r2, r6
 8081026:	f88d 5000 	strb.w	r5, [sp]
 808102a:	4926      	ldr	r1, [pc, #152]	; (80810c4 <setup+0x2e4>)
 808102c:	f7ff f85a 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.38.constprop.43>
 8081030:	a803      	add	r0, sp, #12
 8081032:	f7ff fa39 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081036:	e7ec      	b.n	8081012 <setup+0x232>
 8081038:	08085380 	.word	0x08085380
 808103c:	20000588 	.word	0x20000588
 8081040:	08080585 	.word	0x08080585
 8081044:	20000598 	.word	0x20000598
 8081048:	080855e3 	.word	0x080855e3
 808104c:	200005d8 	.word	0x200005d8
 8081050:	080855ea 	.word	0x080855ea
 8081054:	20000470 	.word	0x20000470
 8081058:	080855f5 	.word	0x080855f5
 808105c:	20000653 	.word	0x20000653
 8081060:	080855fd 	.word	0x080855fd
 8081064:	200005fe 	.word	0x200005fe
 8081068:	08085608 	.word	0x08085608
 808106c:	20000558 	.word	0x20000558
 8081070:	08085615 	.word	0x08085615
 8081074:	200005e8 	.word	0x200005e8
 8081078:	08085621 	.word	0x08085621
 808107c:	080800c1 	.word	0x080800c1
 8081080:	0808562a 	.word	0x0808562a
 8081084:	08080859 	.word	0x08080859
 8081088:	08085636 	.word	0x08085636
 808108c:	0808064d 	.word	0x0808064d
 8081090:	08085643 	.word	0x08085643
 8081094:	08080701 	.word	0x08080701
 8081098:	0808564e 	.word	0x0808564e
 808109c:	080807ad 	.word	0x080807ad
 80810a0:	0808565b 	.word	0x0808565b
 80810a4:	20000663 	.word	0x20000663
 80810a8:	20000604 	.word	0x20000604
 80810ac:	20000652 	.word	0x20000652
 80810b0:	20000594 	.word	0x20000594
 80810b4:	20000568 	.word	0x20000568
 80810b8:	08085667 	.word	0x08085667
 80810bc:	080800b5 	.word	0x080800b5
 80810c0:	20000570 	.word	0x20000570
 80810c4:	08085679 	.word	0x08085679

080810c8 <_GLOBAL__sub_I_SystemMode>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 80810c8:	4b1b      	ldr	r3, [pc, #108]	; (8081138 <_GLOBAL__sub_I_SystemMode+0x70>)

void petWatchdog() {
  digitalWrite(donePin,HIGH);
  digitalWrite(donePin,LOW);
  watchDogFlag = false;
}
 80810ca:	b570      	push	{r4, r5, r6, lr}
 80810cc:	2400      	movs	r4, #0
 80810ce:	601c      	str	r4, [r3, #0]
 80810d0:	4b1a      	ldr	r3, [pc, #104]	; (808113c <_GLOBAL__sub_I_SystemMode+0x74>)
 80810d2:	2501      	movs	r5, #1
 80810d4:	701d      	strb	r5, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 80810d6:	f000 fb95 	bl	8081804 <HAL_Pin_Map>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80810da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80810de:	4b18      	ldr	r3, [pc, #96]	; (8081140 <_GLOBAL__sub_I_SystemMode+0x78>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 80810e0:	4e18      	ldr	r6, [pc, #96]	; (8081144 <_GLOBAL__sub_I_SystemMode+0x7c>)
 80810e2:	6018      	str	r0, [r3, #0]
 80810e4:	4b18      	ldr	r3, [pc, #96]	; (8081148 <_GLOBAL__sub_I_SystemMode+0x80>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80810e6:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 80810e8:	701c      	strb	r4, [r3, #0]
 80810ea:	805c      	strh	r4, [r3, #2]
 80810ec:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 80810ee:	f000 fcc9 	bl	8081a84 <set_system_mode>
#define SEALEVELPRESSURE_HPA (1013.25)              // Universal variables
#define MEMORYMAPVERSION 1                          // Lets us know if we need to reinitialize the memory map

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
 80810f2:	4621      	mov	r1, r4
 80810f4:	4628      	mov	r0, r5
 80810f6:	f000 fcdd 	bl	8081ab4 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 80810fa:	4629      	mov	r1, r5
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 80810fc:	4d13      	ldr	r5, [pc, #76]	; (808114c <_GLOBAL__sub_I_SystemMode+0x84>)
 80810fe:	2004      	movs	r0, #4
 8081100:	f000 fb18 	bl	8081734 <HAL_Feature_Set>
 8081104:	4621      	mov	r1, r4
 8081106:	4628      	mov	r0, r5
 8081108:	f001 fa1e 	bl	8082548 <_ZN9FuelGaugeC1Eb>
 808110c:	4628      	mov	r0, r5
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 808110e:	4d10      	ldr	r5, [pc, #64]	; (8081150 <_GLOBAL__sub_I_SystemMode+0x88>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 8081110:	4632      	mov	r2, r6
 8081112:	4910      	ldr	r1, [pc, #64]	; (8081154 <_GLOBAL__sub_I_SystemMode+0x8c>)
 8081114:	f002 fabe 	bl	8083694 <__aeabi_atexit>
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 8081118:	4621      	mov	r1, r4
 808111a:	4628      	mov	r0, r5
 808111c:	f001 fbeb 	bl	80828f6 <_ZN4PMICC1Eb>
 8081120:	4632      	mov	r2, r6
 8081122:	490d      	ldr	r1, [pc, #52]	; (8081158 <_GLOBAL__sub_I_SystemMode+0x90>)
 8081124:	4628      	mov	r0, r5
 8081126:	f002 fab5 	bl	8083694 <__aeabi_atexit>
const int onewirePin =    D3;                     // One wire temp probe
const int echoPin  =      B4;                     // HC-SR04 Sensor pins
const int triggerPin =    B2;

// Initialize modules here
DS18 sensor(D3);                                  // Initialize sensor object
 808112a:	4622      	mov	r2, r4

void petWatchdog() {
  digitalWrite(donePin,HIGH);
  digitalWrite(donePin,LOW);
  watchDogFlag = false;
}
 808112c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
const int onewirePin =    D3;                     // One wire temp probe
const int echoPin  =      B4;                     // HC-SR04 Sensor pins
const int triggerPin =    B2;

// Initialize modules here
DS18 sensor(D3);                                  // Initialize sensor object
 8081130:	2103      	movs	r1, #3
 8081132:	480a      	ldr	r0, [pc, #40]	; (808115c <_GLOBAL__sub_I_SystemMode+0x94>)
 8081134:	f000 b825 	b.w	8081182 <_ZN4DS18C1Etb>
 8081138:	200005e4 	.word	0x200005e4
 808113c:	20000570 	.word	0x20000570
 8081140:	20000600 	.word	0x20000600
 8081144:	20000550 	.word	0x20000550
 8081148:	200005f8 	.word	0x200005f8
 808114c:	20000578 	.word	0x20000578
 8081150:	20000589 	.word	0x20000589
 8081154:	08082567 	.word	0x08082567
 8081158:	08082915 	.word	0x08082915
 808115c:	2000061c 	.word	0x2000061c

08081160 <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
 8081160:	2300      	movs	r3, #0
  _celsius = 0;
 8081162:	2200      	movs	r2, #0
{
  init();
}

void DS18::init() {
  _raw = 0;
 8081164:	8303      	strh	r3, [r0, #24]
  _celsius = 0;
 8081166:	61c2      	str	r2, [r0, #28]
  memset(_addr, 0, sizeof(_addr));
 8081168:	6203      	str	r3, [r0, #32]
 808116a:	6243      	str	r3, [r0, #36]	; 0x24
  memset(_data, 0, sizeof(_data));
 808116c:	6283      	str	r3, [r0, #40]	; 0x28
 808116e:	62c3      	str	r3, [r0, #44]	; 0x2c
 8081170:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  _type = WIRE_UNKNOWN;
 8081174:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
  _searchDone = false;
 8081178:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  _crcError = false;
 808117c:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 8081180:	4770      	bx	lr

08081182 <_ZN4DS18C1Etb>:
#include "DS18.h"
#include <string.h>

DS18::DS18(uint16_t pin, bool parasitic)
 8081182:	b538      	push	{r3, r4, r5, lr}
 8081184:	4604      	mov	r4, r0
 8081186:	4615      	mov	r5, r2
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
 8081188:	f000 f928 	bl	80813dc <_ZN7OneWireC1Et>
 808118c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
  init();
 8081190:	4620      	mov	r0, r4
DS18::DS18(uint16_t pin, bool parasitic)
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
 8081192:	7525      	strb	r5, [r4, #20]
 8081194:	82e3      	strh	r3, [r4, #22]
{
  init();
 8081196:	f7ff ffe3 	bl	8081160 <_ZN4DS184initEv>
}
 808119a:	4620      	mov	r0, r4
 808119c:	bd38      	pop	{r3, r4, r5, pc}
	...

080811a0 <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
 80811a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
 80811a4:	680b      	ldr	r3, [r1, #0]
 80811a6:	f100 0520 	add.w	r5, r0, #32
 80811aa:	6203      	str	r3, [r0, #32]
 80811ac:	684b      	ldr	r3, [r1, #4]

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
 80811ae:	4604      	mov	r4, r0
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
 80811b0:	606b      	str	r3, [r5, #4]

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
 80811b2:	780b      	ldrb	r3, [r1, #0]
 80811b4:	2b22      	cmp	r3, #34	; 0x22
 80811b6:	d00a      	beq.n	80811ce <_ZN4DS184readEPh+0x2e>
 80811b8:	d803      	bhi.n	80811c2 <_ZN4DS184readEPh+0x22>
 80811ba:	2b10      	cmp	r3, #16
 80811bc:	d142      	bne.n	8081244 <_ZN4DS184readEPh+0xa4>
    case 0x10: _type = WIRE_DS1820; break;
 80811be:	2301      	movs	r3, #1
 80811c0:	e008      	b.n	80811d4 <_ZN4DS184readEPh+0x34>

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
 80811c2:	2b26      	cmp	r3, #38	; 0x26
 80811c4:	d005      	beq.n	80811d2 <_ZN4DS184readEPh+0x32>
 80811c6:	2b28      	cmp	r3, #40	; 0x28
 80811c8:	d13c      	bne.n	8081244 <_ZN4DS184readEPh+0xa4>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
 80811ca:	2302      	movs	r3, #2
 80811cc:	e002      	b.n	80811d4 <_ZN4DS184readEPh+0x34>
    case 0x22: _type = WIRE_DS1822; break;
 80811ce:	2303      	movs	r3, #3
 80811d0:	e000      	b.n	80811d4 <_ZN4DS184readEPh+0x34>
    case 0x26: _type = WIRE_DS2438; break;
 80811d2:	2304      	movs	r3, #4
 80811d4:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    default:   _type = WIRE_UNKNOWN; return false;
  }

  // Read the actual temperature!!!

  _wire.reset();               // first clear the 1-wire bus
 80811d8:	4620      	mov	r0, r4
 80811da:	f000 f90c 	bl	80813f6 <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
 80811de:	4629      	mov	r1, r5
 80811e0:	4620      	mov	r0, r4
 80811e2:	f000 f9cf 	bl	8081584 <_ZN7OneWire6selectEPKh>
  int power = _parasitic ? 1 : 0; // whether to leave parasite power on at the end of the conversion
  _wire.write(0x44, power);    // tell it to start a conversion
 80811e6:	7d22      	ldrb	r2, [r4, #20]
 80811e8:	2144      	movs	r1, #68	; 0x44
 80811ea:	4620      	mov	r0, r4
 80811ec:	f000 f992 	bl	8081514 <_ZN7OneWire5writeEhh>
  // just wait a second while the conversion takes place
  // different chips have different conversion times, check the specs, 1 sec is worse case + 250ms
  // you could also communicate with other devices if you like but you would need
  // to already know their address to select them.

  delay(_conversionTime); // wait for conversion to finish
 80811f0:	8ae0      	ldrh	r0, [r4, #22]
 80811f2:	f000 fd83 	bl	8081cfc <delay>

  // we might do a _wire.depower() (parasite) here, but the reset will take care of it.

  // first make sure current values are in the scratch pad

  _wire.reset();
 80811f6:	4620      	mov	r0, r4
 80811f8:	f000 f8fd 	bl	80813f6 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
 80811fc:	4629      	mov	r1, r5
 80811fe:	4620      	mov	r0, r4
 8081200:	f000 f9c0 	bl	8081584 <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
 8081204:	2200      	movs	r2, #0
 8081206:	21b8      	movs	r1, #184	; 0xb8
 8081208:	4620      	mov	r0, r4
 808120a:	f000 f983 	bl	8081514 <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
 808120e:	2200      	movs	r2, #0
 8081210:	4611      	mov	r1, r2
 8081212:	4620      	mov	r0, r4
 8081214:	f000 f97e 	bl	8081514 <_ZN7OneWire5writeEhh>

  // now read the scratch pad

  _wire.reset();
 8081218:	4620      	mov	r0, r4
 808121a:	f000 f8ec 	bl	80813f6 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
 808121e:	4629      	mov	r1, r5
 8081220:	4620      	mov	r0, r4
 8081222:	f000 f9af 	bl	8081584 <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
 8081226:	2200      	movs	r2, #0
 8081228:	21be      	movs	r1, #190	; 0xbe
 808122a:	4620      	mov	r0, r4
 808122c:	f000 f972 	bl	8081514 <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
 8081230:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8081234:	2b04      	cmp	r3, #4
 8081236:	d10a      	bne.n	808124e <_ZN4DS184readEPh+0xae>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
 8081238:	2200      	movs	r2, #0
 808123a:	4611      	mov	r1, r2
 808123c:	4620      	mov	r0, r4
 808123e:	f000 f969 	bl	8081514 <_ZN7OneWire5writeEhh>
 8081242:	e004      	b.n	808124e <_ZN4DS184readEPh+0xae>
  switch (addr[0]) {
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
 8081244:	2000      	movs	r0, #0
 8081246:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
 808124a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808124e:	f104 0527 	add.w	r5, r4, #39	; 0x27
 8081252:	f104 0630 	add.w	r6, r4, #48	; 0x30
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
    _data[i] = _wire.read();
 8081256:	4620      	mov	r0, r4
 8081258:	f000 f984 	bl	8081564 <_ZN7OneWire4readEv>
 808125c:	f805 0f01 	strb.w	r0, [r5, #1]!
  if (_type == WIRE_DS2438) {
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
 8081260:	42ae      	cmp	r6, r5
 8081262:	d1f8      	bne.n	8081256 <_ZN4DS184readEPh+0xb6>
    _data[i] = _wire.read();
  }

  // Check if the CRC matches
  if (OneWire::crc8(_data, 8) != _data[8]) {
 8081264:	2108      	movs	r1, #8
 8081266:	f104 0028 	add.w	r0, r4, #40	; 0x28
 808126a:	f000 fa24 	bl	80816b6 <_ZN7OneWire4crc8EPhh>
 808126e:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 8081272:	4283      	cmp	r3, r0
 8081274:	d005      	beq.n	8081282 <_ZN4DS184readEPh+0xe2>
    _crcError = true;
 8081276:	2301      	movs	r3, #1
 8081278:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return false;
 808127c:	2000      	movs	r0, #0
 808127e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
 8081282:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
 8081286:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  if (_type == WIRE_DS2438) {
 808128a:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
 808128e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (_type == WIRE_DS2438) {
 8081292:	2a04      	cmp	r2, #4

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
 8081294:	8323      	strh	r3, [r4, #24]
  if (_type == WIRE_DS2438) {
 8081296:	d120      	bne.n	80812da <_ZN4DS184readEPh+0x13a>
    _raw = (_data[2] << 8) | _data[1];
 8081298:	f894 602a 	ldrb.w	r6, [r4, #42]	; 0x2a
 808129c:	ea45 2306 	orr.w	r3, r5, r6, lsl #8
 80812a0:	8323      	strh	r3, [r4, #24]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
 80812a2:	08ed      	lsrs	r5, r5, #3
      if (_data[2] > 127) {
 80812a4:	0633      	lsls	r3, r6, #24
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
 80812a6:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
      if (_data[2] > 127) {
 80812aa:	d547      	bpl.n	808133c <_ZN4DS184readEPh+0x19c>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
 80812ac:	4630      	mov	r0, r6
 80812ae:	f003 f811 	bl	80842d4 <__aeabi_ui2f>
 80812b2:	f002 fca3 	bl	8083bfc <__aeabi_f2d>
 80812b6:	4606      	mov	r6, r0
 80812b8:	4628      	mov	r0, r5
 80812ba:	460f      	mov	r7, r1
 80812bc:	f003 f80a 	bl	80842d4 <__aeabi_ui2f>
 80812c0:	f002 fc9c 	bl	8083bfc <__aeabi_f2d>
 80812c4:	2200      	movs	r2, #0
 80812c6:	4b2b      	ldr	r3, [pc, #172]	; (8081374 <_ZN4DS184readEPh+0x1d4>)
 80812c8:	f002 fcec 	bl	8083ca4 <__aeabi_dmul>
 80812cc:	4602      	mov	r2, r0
 80812ce:	460b      	mov	r3, r1
 80812d0:	4630      	mov	r0, r6
 80812d2:	4639      	mov	r1, r7
 80812d4:	f002 fb32 	bl	808393c <__aeabi_dsub>
 80812d8:	e046      	b.n	8081368 <_ZN4DS184readEPh+0x1c8>
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
 80812da:	2a01      	cmp	r2, #1
 80812dc:	d003      	beq.n	80812e6 <_ZN4DS184readEPh+0x146>
 80812de:	d346      	bcc.n	808136e <_ZN4DS184readEPh+0x1ce>
 80812e0:	2a03      	cmp	r2, #3
 80812e2:	d910      	bls.n	8081306 <_ZN4DS184readEPh+0x166>
 80812e4:	e043      	b.n	808136e <_ZN4DS184readEPh+0x1ce>
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
 80812e6:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
      if (_data[7] == 0x10) {
 80812ea:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
 80812ee:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
 80812f0:	2a10      	cmp	r2, #16
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
 80812f2:	8323      	strh	r3, [r4, #24]
      if (_data[7] == 0x10) {
 80812f4:	d119      	bne.n	808132a <_ZN4DS184readEPh+0x18a>
        // "count remain" gives full 12 bit resolution
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
 80812f6:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 80812fa:	f023 030f 	bic.w	r3, r3, #15
 80812fe:	f1c2 020c 	rsb	r2, r2, #12
 8081302:	4413      	add	r3, r2
 8081304:	e010      	b.n	8081328 <_ZN4DS184readEPh+0x188>
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);
 8081306:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
      _celsius = (float)_raw * 0.0625;
      break;
    case WIRE_DS18B20:
    case WIRE_DS1822:
      // at lower res, the low bits are undefined, so let's zero them
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
 808130a:	f012 0260 	ands.w	r2, r2, #96	; 0x60
 808130e:	d102      	bne.n	8081316 <_ZN4DS184readEPh+0x176>
 8081310:	f023 0307 	bic.w	r3, r3, #7
 8081314:	e008      	b.n	8081328 <_ZN4DS184readEPh+0x188>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
 8081316:	2a20      	cmp	r2, #32
 8081318:	d102      	bne.n	8081320 <_ZN4DS184readEPh+0x180>
 808131a:	f023 0303 	bic.w	r3, r3, #3
 808131e:	e003      	b.n	8081328 <_ZN4DS184readEPh+0x188>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
 8081320:	2a40      	cmp	r2, #64	; 0x40
 8081322:	d102      	bne.n	808132a <_ZN4DS184readEPh+0x18a>
 8081324:	f023 0301 	bic.w	r3, r3, #1
 8081328:	8323      	strh	r3, [r4, #24]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
 808132a:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 808132e:	f002 ffd5 	bl	80842dc <__aeabi_i2f>
 8081332:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8081336:	f003 f825 	bl	8084384 <__aeabi_fmul>
 808133a:	e017      	b.n	808136c <_ZN4DS184readEPh+0x1cc>
    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
      if (_data[2] > 127) {
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
      } else {
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
 808133c:	4628      	mov	r0, r5
 808133e:	f002 ffc9 	bl	80842d4 <__aeabi_ui2f>
 8081342:	f002 fc5b 	bl	8083bfc <__aeabi_f2d>
 8081346:	2200      	movs	r2, #0
 8081348:	4b0a      	ldr	r3, [pc, #40]	; (8081374 <_ZN4DS184readEPh+0x1d4>)
 808134a:	f002 fcab 	bl	8083ca4 <__aeabi_dmul>
 808134e:	4680      	mov	r8, r0
 8081350:	4630      	mov	r0, r6
 8081352:	4689      	mov	r9, r1
 8081354:	f002 ffbe 	bl	80842d4 <__aeabi_ui2f>
 8081358:	f002 fc50 	bl	8083bfc <__aeabi_f2d>
 808135c:	4602      	mov	r2, r0
 808135e:	460b      	mov	r3, r1
 8081360:	4640      	mov	r0, r8
 8081362:	4649      	mov	r1, r9
 8081364:	f002 faec 	bl	8083940 <__adddf3>
 8081368:	f002 feae 	bl	80840c8 <__aeabi_d2f>
 808136c:	61e0      	str	r0, [r4, #28]
      }
  }

  // Got a good reading!
  return true;
 808136e:	2001      	movs	r0, #1
}
 8081370:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8081374:	3fa00000 	.word	0x3fa00000

08081378 <_ZN4DS184readEv>:
  _type = WIRE_UNKNOWN;
  _searchDone = false;
  _crcError = false;
}

bool DS18::read() {
 8081378:	b538      	push	{r3, r4, r5, lr}
 808137a:	4604      	mov	r4, r0
  init();
 808137c:	f7ff fef0 	bl	8081160 <_ZN4DS184initEv>

  // Search for the next chip on the 1-Wire bus
  if (!_wire.search(_addr)) {
 8081380:	f100 0520 	add.w	r5, r0, #32
 8081384:	4629      	mov	r1, r5
 8081386:	f000 f91b 	bl	80815c0 <_ZN7OneWire6searchEPh>
 808138a:	b930      	cbnz	r0, 808139a <_ZN4DS184readEv+0x22>
    _searchDone = true;
 808138c:	2301      	movs	r3, #1
 808138e:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    _wire.reset_search();
 8081392:	4620      	mov	r0, r4
 8081394:	f000 f908 	bl	80815a8 <_ZN7OneWire12reset_searchEv>
    return false;
 8081398:	e011      	b.n	80813be <_ZN4DS184readEv+0x46>
  }

  // Check the CRC
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
 808139a:	2107      	movs	r1, #7
 808139c:	4628      	mov	r0, r5
 808139e:	f000 f98a 	bl	80816b6 <_ZN7OneWire4crc8EPhh>
 80813a2:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80813a6:	4283      	cmp	r3, r0
 80813a8:	d003      	beq.n	80813b2 <_ZN4DS184readEv+0x3a>
    _crcError = true;
 80813aa:	2301      	movs	r3, #1
 80813ac:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return false;
 80813b0:	e005      	b.n	80813be <_ZN4DS184readEv+0x46>
  }

  // Read the temperature from that chip
  return read(_addr);
 80813b2:	4629      	mov	r1, r5
 80813b4:	4620      	mov	r0, r4
}
 80813b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _crcError = true;
    return false;
  }

  // Read the temperature from that chip
  return read(_addr);
 80813ba:	f7ff bef1 	b.w	80811a0 <_ZN4DS184readEPh>
}
 80813be:	2000      	movs	r0, #0
 80813c0:	bd38      	pop	{r3, r4, r5, pc}

080813c2 <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
 80813c2:	69c0      	ldr	r0, [r0, #28]
 80813c4:	4770      	bx	lr

080813c6 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
 80813c6:	f000 ba1d 	b.w	8081804 <HAL_Pin_Map>

080813ca <_ZN7OneWire19digitalWriteFastLowEv>:
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed

    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80813ca:	8802      	ldrh	r2, [r0, #0]
 80813cc:	231c      	movs	r3, #28
 80813ce:	4353      	muls	r3, r2
 80813d0:	6842      	ldr	r2, [r0, #4]
 80813d2:	18d1      	adds	r1, r2, r3
 80813d4:	58d3      	ldr	r3, [r2, r3]
 80813d6:	888a      	ldrh	r2, [r1, #4]
 80813d8:	835a      	strh	r2, [r3, #26]
 80813da:	4770      	bx	lr

080813dc <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80813dc:	b538      	push	{r3, r4, r5, lr}
 80813de:	4604      	mov	r4, r0
 80813e0:	460d      	mov	r5, r1
    }

  // Assume all other platforms are STM32F2xx until proven otherwise
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed
 80813e2:	f000 fa0f 	bl	8081804 <HAL_Pin_Map>
{
    pinMode(pin, INPUT);
 80813e6:	2100      	movs	r1, #0
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80813e8:	6060      	str	r0, [r4, #4]
{
    pinMode(pin, INPUT);
 80813ea:	4628      	mov	r0, r5
 80813ec:	f002 f878 	bl	80834e0 <pinMode>
    _pin = pin;
 80813f0:	8025      	strh	r5, [r4, #0]
}
 80813f2:	4620      	mov	r0, r4
 80813f4:	bd38      	pop	{r3, r4, r5, pc}

080813f6 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
 80813f6:	b538      	push	{r3, r4, r5, lr}
 80813f8:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
 80813fa:	f001 f9a7 	bl	808274c <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80813fe:	2100      	movs	r1, #0
 8081400:	8828      	ldrh	r0, [r5, #0]
 8081402:	f000 fa07 	bl	8081814 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
 8081406:	f001 f9a3 	bl	8082750 <_Z10interruptsv>
 808140a:	247d      	movs	r4, #125	; 0x7d
 808140c:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
 808140e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8081412:	d02d      	beq.n	8081470 <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8081414:	2002      	movs	r0, #2
 8081416:	f000 f9ad 	bl	8081774 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 808141a:	8828      	ldrh	r0, [r5, #0]
 808141c:	f000 fa12 	bl	8081844 <HAL_GPIO_Read>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
 8081420:	f010 0fff 	tst.w	r0, #255	; 0xff
 8081424:	d0f2      	beq.n	808140c <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
 8081426:	f001 f991 	bl	808274c <_Z12noInterruptsv>

    digitalWriteFastLow();
 808142a:	4628      	mov	r0, r5
 808142c:	f7ff ffcd 	bl	80813ca <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 8081430:	2101      	movs	r1, #1
 8081432:	8828      	ldrh	r0, [r5, #0]
 8081434:	f000 f9ee 	bl	8081814 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
 8081438:	f001 f98a 	bl	8082750 <_Z10interruptsv>
 808143c:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 8081440:	f000 f998 	bl	8081774 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
 8081444:	f001 f982 	bl	808274c <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 8081448:	2100      	movs	r1, #0
 808144a:	8828      	ldrh	r0, [r5, #0]
 808144c:	f000 f9e2 	bl	8081814 <HAL_Pin_Mode>
 8081450:	2046      	movs	r0, #70	; 0x46
 8081452:	f000 f98f 	bl	8081774 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 8081456:	8828      	ldrh	r0, [r5, #0]
 8081458:	f000 f9f4 	bl	8081844 <HAL_GPIO_Read>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 808145c:	b2c0      	uxtb	r0, r0
 808145e:	fab0 f480 	clz	r4, r0

    interrupts();
 8081462:	f001 f975 	bl	8082750 <_Z10interruptsv>
 8081466:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 808146a:	0964      	lsrs	r4, r4, #5
 808146c:	f000 f982 	bl	8081774 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
 8081470:	4620      	mov	r0, r4
 8081472:	bd38      	pop	{r3, r4, r5, pc}

08081474 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
 8081474:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
 8081476:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
 808147a:	4604      	mov	r4, r0
    if (v & 1) {
 808147c:	d013      	beq.n	80814a6 <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
 808147e:	f001 f965 	bl	808274c <_Z12noInterruptsv>

        digitalWriteFastLow();
 8081482:	4620      	mov	r0, r4
 8081484:	f7ff ffa1 	bl	80813ca <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 8081488:	2101      	movs	r1, #1
 808148a:	8820      	ldrh	r0, [r4, #0]
 808148c:	f000 f9c2 	bl	8081814 <HAL_Pin_Mode>
 8081490:	200a      	movs	r0, #10
 8081492:	f000 f96f 	bl	8081774 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 8081496:	8820      	ldrh	r0, [r4, #0]
 8081498:	2100      	movs	r1, #0
 808149a:	f000 f9bb 	bl	8081814 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
 808149e:	f001 f957 	bl	8082750 <_Z10interruptsv>
 80814a2:	2037      	movs	r0, #55	; 0x37
 80814a4:	e012      	b.n	80814cc <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
 80814a6:	f001 f951 	bl	808274c <_Z12noInterruptsv>

        digitalWriteFastLow();
 80814aa:	4620      	mov	r0, r4
 80814ac:	f7ff ff8d 	bl	80813ca <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80814b0:	2101      	movs	r1, #1
 80814b2:	8820      	ldrh	r0, [r4, #0]
 80814b4:	f000 f9ae 	bl	8081814 <HAL_Pin_Mode>
 80814b8:	2041      	movs	r0, #65	; 0x41
 80814ba:	f000 f95b 	bl	8081774 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80814be:	8820      	ldrh	r0, [r4, #0]
 80814c0:	4629      	mov	r1, r5
 80814c2:	f000 f9a7 	bl	8081814 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
 80814c6:	f001 f943 	bl	8082750 <_Z10interruptsv>
 80814ca:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
 80814cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80814d0:	f000 b950 	b.w	8081774 <HAL_Delay_Microseconds>

080814d4 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
 80814d4:	b510      	push	{r4, lr}
 80814d6:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
 80814d8:	f001 f938 	bl	808274c <_Z12noInterruptsv>

    digitalWriteFastLow();
 80814dc:	4620      	mov	r0, r4
 80814de:	f7ff ff74 	bl	80813ca <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80814e2:	2101      	movs	r1, #1
 80814e4:	8820      	ldrh	r0, [r4, #0]
 80814e6:	f000 f995 	bl	8081814 <HAL_Pin_Mode>
 80814ea:	2003      	movs	r0, #3
 80814ec:	f000 f942 	bl	8081774 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80814f0:	2100      	movs	r1, #0
 80814f2:	8820      	ldrh	r0, [r4, #0]
 80814f4:	f000 f98e 	bl	8081814 <HAL_Pin_Mode>
 80814f8:	200a      	movs	r0, #10
 80814fa:	f000 f93b 	bl	8081774 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 80814fe:	8820      	ldrh	r0, [r4, #0]
 8081500:	f000 f9a0 	bl	8081844 <HAL_GPIO_Read>
 8081504:	4604      	mov	r4, r0

    delayMicroseconds(10);

    r = digitalReadFast();

    interrupts();
 8081506:	f001 f923 	bl	8082750 <_Z10interruptsv>
 808150a:	2035      	movs	r0, #53	; 0x35
 808150c:	f000 f932 	bl	8081774 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
 8081510:	b2e0      	uxtb	r0, r4
 8081512:	bd10      	pop	{r4, pc}

08081514 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
 8081514:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081518:	4605      	mov	r5, r0
 808151a:	4688      	mov	r8, r1
 808151c:	4617      	mov	r7, r2
 808151e:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 8081520:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
 8081522:	ea18 0f04 	tst.w	r8, r4
 8081526:	bf14      	ite	ne
 8081528:	2101      	movne	r1, #1
 808152a:	2100      	moveq	r1, #0
 808152c:	4628      	mov	r0, r5
 808152e:	f7ff ffa1 	bl	8081474 <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 8081532:	0064      	lsls	r4, r4, #1
 8081534:	3e01      	subs	r6, #1
 8081536:	b2e4      	uxtb	r4, r4
 8081538:	d1f3      	bne.n	8081522 <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
 808153a:	b18f      	cbz	r7, 8081560 <_ZN7OneWire5writeEhh+0x4c>
        noInterrupts();
 808153c:	f001 f906 	bl	808274c <_Z12noInterruptsv>
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 8081540:	882a      	ldrh	r2, [r5, #0]
 8081542:	231c      	movs	r3, #28
 8081544:	4353      	muls	r3, r2
 8081546:	686a      	ldr	r2, [r5, #4]
 8081548:	18d1      	adds	r1, r2, r3
 808154a:	58d3      	ldr	r3, [r2, r3]
 808154c:	888a      	ldrh	r2, [r1, #4]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 808154e:	2101      	movs	r1, #1
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 8081550:	831a      	strh	r2, [r3, #24]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 8081552:	8828      	ldrh	r0, [r5, #0]
 8081554:	f000 f95e 	bl	8081814 <HAL_Pin_Mode>
        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
 8081558:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
 808155c:	f001 b8f8 	b.w	8082750 <_Z10interruptsv>
 8081560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081564 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
 8081564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081566:	4607      	mov	r7, r0
 8081568:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
 808156a:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 808156c:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
 808156e:	4638      	mov	r0, r7
 8081570:	f7ff ffb0 	bl	80814d4 <_ZN7OneWire8read_bitEv>
 8081574:	b100      	cbz	r0, 8081578 <_ZN7OneWire4readEv+0x14>
 8081576:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 8081578:	0064      	lsls	r4, r4, #1
 808157a:	3e01      	subs	r6, #1
 808157c:	b2e4      	uxtb	r4, r4
 808157e:	d1f6      	bne.n	808156e <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
 8081580:	4628      	mov	r0, r5
 8081582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081584 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 8081584:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
 8081586:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 8081588:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
 808158a:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 808158c:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
 808158e:	f7ff ffc1 	bl	8081514 <_ZN7OneWire5writeEhh>
 8081592:	1e65      	subs	r5, r4, #1
 8081594:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
 8081596:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 808159a:	2200      	movs	r2, #0
 808159c:	4630      	mov	r0, r6
 808159e:	f7ff ffb9 	bl	8081514 <_ZN7OneWire5writeEhh>
 80815a2:	42a5      	cmp	r5, r4
 80815a4:	d1f7      	bne.n	8081596 <_ZN7OneWire6selectEPKh+0x12>
}
 80815a6:	bd70      	pop	{r4, r5, r6, pc}

080815a8 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
 80815a8:	2300      	movs	r3, #0
 80815aa:	7403      	strb	r3, [r0, #16]
    LastDeviceFlag = FALSE;
 80815ac:	7483      	strb	r3, [r0, #18]
    LastFamilyDiscrepancy = 0;
 80815ae:	7443      	strb	r3, [r0, #17]
 80815b0:	f100 0210 	add.w	r2, r0, #16
 80815b4:	3008      	adds	r0, #8

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
 80815b6:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
 80815ba:	4282      	cmp	r2, r0
 80815bc:	d1fb      	bne.n	80815b6 <_ZN7OneWire12reset_searchEv+0xe>
    }
}
 80815be:	4770      	bx	lr

080815c0 <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80815c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80815c4:	7c85      	ldrb	r5, [r0, #18]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80815c6:	4604      	mov	r4, r0
 80815c8:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80815ca:	2d00      	cmp	r5, #0
 80815cc:	d15e      	bne.n	808168c <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
 80815ce:	f7ff ff12 	bl	80813f6 <_ZN7OneWire5resetEv>
 80815d2:	b920      	cbnz	r0, 80815de <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
 80815d4:	7420      	strb	r0, [r4, #16]
            LastDeviceFlag = FALSE;
 80815d6:	74a0      	strb	r0, [r4, #18]
            LastFamilyDiscrepancy = 0;
 80815d8:	7460      	strb	r0, [r4, #17]

            return FALSE;
 80815da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
 80815de:	462a      	mov	r2, r5
 80815e0:	21f0      	movs	r1, #240	; 0xf0
 80815e2:	4620      	mov	r0, r4

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
 80815e4:	2601      	movs	r6, #1

            return FALSE;
        }

        // issue the search command
        write(0xF0);
 80815e6:	f7ff ff95 	bl	8081514 <_ZN7OneWire5writeEhh>

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
 80815ea:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80815ec:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
 80815ee:	4620      	mov	r0, r4
 80815f0:	f7ff ff70 	bl	80814d4 <_ZN7OneWire8read_bitEv>
 80815f4:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
 80815f6:	4620      	mov	r0, r4
 80815f8:	f7ff ff6c 	bl	80814d4 <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
 80815fc:	f1b9 0f01 	cmp.w	r9, #1
 8081600:	d102      	bne.n	8081608 <_ZN7OneWire6searchEPh+0x48>
 8081602:	2801      	cmp	r0, #1
 8081604:	d11b      	bne.n	808163e <_ZN7OneWire6searchEPh+0x7e>
 8081606:	e037      	b.n	8081678 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
 8081608:	4581      	cmp	r9, r0
 808160a:	eb04 0305 	add.w	r3, r4, r5
 808160e:	d11e      	bne.n	808164e <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
 8081610:	7c22      	ldrb	r2, [r4, #16]
 8081612:	4297      	cmp	r7, r2
 8081614:	d207      	bcs.n	8081626 <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8081616:	7a1a      	ldrb	r2, [r3, #8]
 8081618:	4216      	tst	r6, r2
 808161a:	bf14      	ite	ne
 808161c:	f04f 0901 	movne.w	r9, #1
 8081620:	f04f 0900 	moveq.w	r9, #0
 8081624:	e004      	b.n	8081630 <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
 8081626:	bf0c      	ite	eq
 8081628:	f04f 0901 	moveq.w	r9, #1
 808162c:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
 8081630:	f1b9 0f00 	cmp.w	r9, #0
 8081634:	d103      	bne.n	808163e <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
 8081636:	2f08      	cmp	r7, #8
 8081638:	d808      	bhi.n	808164c <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
 808163a:	7467      	strb	r7, [r4, #17]
 808163c:	e006      	b.n	808164c <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
 808163e:	1962      	adds	r2, r4, r5
 8081640:	7a13      	ldrb	r3, [r2, #8]
 8081642:	f04f 0901 	mov.w	r9, #1
 8081646:	4333      	orrs	r3, r6
 8081648:	7213      	strb	r3, [r2, #8]
 808164a:	e004      	b.n	8081656 <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 808164c:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 808164e:	7a1a      	ldrb	r2, [r3, #8]
 8081650:	ea22 0206 	bic.w	r2, r2, r6
 8081654:	721a      	strb	r2, [r3, #8]

                // serial number search direction write bit
                write_bit(search_direction);
 8081656:	4649      	mov	r1, r9
 8081658:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
 808165a:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
 808165c:	f7ff ff0a 	bl	8081474 <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
 8081660:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
 8081664:	bf04      	itt	eq
 8081666:	3501      	addeq	r5, #1
 8081668:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 808166a:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
 808166e:	bf08      	it	eq
 8081670:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8081672:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 8081674:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8081676:	d9ba      	bls.n	80815ee <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
 8081678:	2f40      	cmp	r7, #64	; 0x40
 808167a:	d907      	bls.n	808168c <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
 808167c:	f884 a010 	strb.w	sl, [r4, #16]

            // check for last device
            if (LastDiscrepancy == 0)
 8081680:	f1ba 0f00 	cmp.w	sl, #0
 8081684:	d112      	bne.n	80816ac <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
 8081686:	2301      	movs	r3, #1
 8081688:	74a3      	strb	r3, [r4, #18]
 808168a:	e00f      	b.n	80816ac <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
 808168c:	2000      	movs	r0, #0
 808168e:	7420      	strb	r0, [r4, #16]
        LastDeviceFlag = FALSE;
 8081690:	74a0      	strb	r0, [r4, #18]
        LastFamilyDiscrepancy = 0;
 8081692:	7460      	strb	r0, [r4, #17]
 8081694:	1de3      	adds	r3, r4, #7
 8081696:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 808169a:	340f      	adds	r4, #15
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
 808169c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80816a0:	42a3      	cmp	r3, r4
 80816a2:	f808 2f01 	strb.w	r2, [r8, #1]!
 80816a6:	d1f9      	bne.n	808169c <_ZN7OneWire6searchEPh+0xdc>
 80816a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
 80816ac:	7a23      	ldrb	r3, [r4, #8]
 80816ae:	2b00      	cmp	r3, #0
 80816b0:	d0ec      	beq.n	808168c <_ZN7OneWire6searchEPh+0xcc>
 80816b2:	2001      	movs	r0, #1
 80816b4:	e7ee      	b.n	8081694 <_ZN7OneWire6searchEPh+0xd4>

080816b6 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
 80816b6:	b530      	push	{r4, r5, lr}
 80816b8:	4605      	mov	r5, r0
    uint8_t crc = 0;
 80816ba:	2000      	movs	r0, #0

    while (len--) {
 80816bc:	3901      	subs	r1, #1
 80816be:	b2c9      	uxtb	r1, r1
 80816c0:	29ff      	cmp	r1, #255	; 0xff
 80816c2:	d013      	beq.n	80816ec <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
 80816c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80816c8:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
 80816ca:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
 80816ce:	f013 0f01 	tst.w	r3, #1
 80816d2:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80816d6:	bf1c      	itt	ne
 80816d8:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
 80816dc:	b2d8      	uxtbne	r0, r3
 80816de:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80816e0:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
 80816e4:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80816e8:	d1ef      	bne.n	80816ca <_ZN7OneWire4crc8EPhh+0x14>
 80816ea:	e7e7      	b.n	80816bc <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
 80816ec:	bd30      	pop	{r4, r5, pc}

080816ee <_GLOBAL__sub_I__ZN7OneWireC2Et>:
 80816ee:	f000 b889 	b.w	8081804 <HAL_Pin_Map>
	...

080816f4 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 80816f4:	b508      	push	{r3, lr}
 80816f6:	4b02      	ldr	r3, [pc, #8]	; (8081700 <inet_gethostbyname+0xc>)
 80816f8:	681b      	ldr	r3, [r3, #0]
 80816fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80816fc:	9301      	str	r3, [sp, #4]
 80816fe:	bd08      	pop	{r3, pc}
 8081700:	08060020 	.word	0x08060020

08081704 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8081704:	b508      	push	{r3, lr}
 8081706:	4b02      	ldr	r3, [pc, #8]	; (8081710 <cellular_signal+0xc>)
 8081708:	681b      	ldr	r3, [r3, #0]
 808170a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 808170c:	9301      	str	r3, [sp, #4]
 808170e:	bd08      	pop	{r3, pc}
 8081710:	08060020 	.word	0x08060020

08081714 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081714:	b508      	push	{r3, lr}
 8081716:	4b02      	ldr	r3, [pc, #8]	; (8081720 <cellular_command+0xc>)
 8081718:	681b      	ldr	r3, [r3, #0]
 808171a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808171c:	9301      	str	r3, [sp, #4]
 808171e:	bd08      	pop	{r3, pc}
 8081720:	08060020 	.word	0x08060020

08081724 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8081724:	b508      	push	{r3, lr}
 8081726:	4b02      	ldr	r3, [pc, #8]	; (8081730 <os_mutex_create+0xc>)
 8081728:	681b      	ldr	r3, [r3, #0]
 808172a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808172c:	9301      	str	r3, [sp, #4]
 808172e:	bd08      	pop	{r3, pc}
 8081730:	080401d0 	.word	0x080401d0

08081734 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 8081734:	b508      	push	{r3, lr}
 8081736:	4b02      	ldr	r3, [pc, #8]	; (8081740 <HAL_Feature_Set+0xc>)
 8081738:	681b      	ldr	r3, [r3, #0]
 808173a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 808173c:	9301      	str	r3, [sp, #4]
 808173e:	bd08      	pop	{r3, pc}
 8081740:	080401b8 	.word	0x080401b8

08081744 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 8081744:	b508      	push	{r3, lr}
 8081746:	4b02      	ldr	r3, [pc, #8]	; (8081750 <HAL_Core_System_Reset_Ex+0xc>)
 8081748:	681b      	ldr	r3, [r3, #0]
 808174a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 808174c:	9301      	str	r3, [sp, #4]
 808174e:	bd08      	pop	{r3, pc}
 8081750:	080401b8 	.word	0x080401b8

08081754 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8081754:	b508      	push	{r3, lr}
 8081756:	4b02      	ldr	r3, [pc, #8]	; (8081760 <HAL_Core_Get_Last_Reset_Info+0xc>)
 8081758:	681b      	ldr	r3, [r3, #0]
 808175a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 808175c:	9301      	str	r3, [sp, #4]
 808175e:	bd08      	pop	{r3, pc}
 8081760:	080401b8 	.word	0x080401b8

08081764 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081764:	b508      	push	{r3, lr}
 8081766:	4b02      	ldr	r3, [pc, #8]	; (8081770 <HAL_RNG_GetRandomNumber+0xc>)
 8081768:	681b      	ldr	r3, [r3, #0]
 808176a:	685b      	ldr	r3, [r3, #4]
 808176c:	9301      	str	r3, [sp, #4]
 808176e:	bd08      	pop	{r3, pc}
 8081770:	0804019c 	.word	0x0804019c

08081774 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8081774:	b508      	push	{r3, lr}
 8081776:	4b02      	ldr	r3, [pc, #8]	; (8081780 <HAL_Delay_Microseconds+0xc>)
 8081778:	681b      	ldr	r3, [r3, #0]
 808177a:	68db      	ldr	r3, [r3, #12]
 808177c:	9301      	str	r3, [sp, #4]
 808177e:	bd08      	pop	{r3, pc}
 8081780:	0804019c 	.word	0x0804019c

08081784 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081784:	b508      	push	{r3, lr}
 8081786:	4b02      	ldr	r3, [pc, #8]	; (8081790 <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081788:	681b      	ldr	r3, [r3, #0]
 808178a:	695b      	ldr	r3, [r3, #20]
 808178c:	9301      	str	r3, [sp, #4]
 808178e:	bd08      	pop	{r3, pc}
 8081790:	0804019c 	.word	0x0804019c

08081794 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 8081794:	b508      	push	{r3, lr}
 8081796:	4b02      	ldr	r3, [pc, #8]	; (80817a0 <HAL_RTC_Get_UnixTime+0xc>)
 8081798:	681b      	ldr	r3, [r3, #0]
 808179a:	69db      	ldr	r3, [r3, #28]
 808179c:	9301      	str	r3, [sp, #4]
 808179e:	bd08      	pop	{r3, pc}
 80817a0:	0804019c 	.word	0x0804019c

080817a4 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80817a4:	b508      	push	{r3, lr}
 80817a6:	4b02      	ldr	r3, [pc, #8]	; (80817b0 <HAL_EEPROM_Init+0xc>)
 80817a8:	681b      	ldr	r3, [r3, #0]
 80817aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80817ac:	9301      	str	r3, [sp, #4]
 80817ae:	bd08      	pop	{r3, pc}
 80817b0:	0804019c 	.word	0x0804019c

080817b4 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
 80817b4:	b508      	push	{r3, lr}
 80817b6:	4b02      	ldr	r3, [pc, #8]	; (80817c0 <HAL_EEPROM_Read+0xc>)
 80817b8:	681b      	ldr	r3, [r3, #0]
 80817ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80817bc:	9301      	str	r3, [sp, #4]
 80817be:	bd08      	pop	{r3, pc}
 80817c0:	0804019c 	.word	0x0804019c

080817c4 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
 80817c4:	b508      	push	{r3, lr}
 80817c6:	4b02      	ldr	r3, [pc, #8]	; (80817d0 <HAL_EEPROM_Write+0xc>)
 80817c8:	681b      	ldr	r3, [r3, #0]
 80817ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80817cc:	9301      	str	r3, [sp, #4]
 80817ce:	bd08      	pop	{r3, pc}
 80817d0:	0804019c 	.word	0x0804019c

080817d4 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80817d4:	b508      	push	{r3, lr}
 80817d6:	4b02      	ldr	r3, [pc, #8]	; (80817e0 <HAL_EEPROM_Put+0xc>)
 80817d8:	681b      	ldr	r3, [r3, #0]
 80817da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80817dc:	9301      	str	r3, [sp, #4]
 80817de:	bd08      	pop	{r3, pc}
 80817e0:	0804019c 	.word	0x0804019c

080817e4 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80817e4:	b508      	push	{r3, lr}
 80817e6:	4b02      	ldr	r3, [pc, #8]	; (80817f0 <HAL_RTC_Time_Is_Valid+0xc>)
 80817e8:	681b      	ldr	r3, [r3, #0]
 80817ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80817ec:	9301      	str	r3, [sp, #4]
 80817ee:	bd08      	pop	{r3, pc}
 80817f0:	0804019c 	.word	0x0804019c

080817f4 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 80817f4:	b508      	push	{r3, lr}
 80817f6:	4b02      	ldr	r3, [pc, #8]	; (8081800 <hal_timer_millis+0xc>)
 80817f8:	681b      	ldr	r3, [r3, #0]
 80817fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80817fc:	9301      	str	r3, [sp, #4]
 80817fe:	bd08      	pop	{r3, pc}
 8081800:	0804019c 	.word	0x0804019c

08081804 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8081804:	b508      	push	{r3, lr}
 8081806:	4b02      	ldr	r3, [pc, #8]	; (8081810 <HAL_Pin_Map+0xc>)
 8081808:	681b      	ldr	r3, [r3, #0]
 808180a:	681b      	ldr	r3, [r3, #0]
 808180c:	9301      	str	r3, [sp, #4]
 808180e:	bd08      	pop	{r3, pc}
 8081810:	080401b0 	.word	0x080401b0

08081814 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081814:	b508      	push	{r3, lr}
 8081816:	4b02      	ldr	r3, [pc, #8]	; (8081820 <HAL_Pin_Mode+0xc>)
 8081818:	681b      	ldr	r3, [r3, #0]
 808181a:	689b      	ldr	r3, [r3, #8]
 808181c:	9301      	str	r3, [sp, #4]
 808181e:	bd08      	pop	{r3, pc}
 8081820:	080401b0 	.word	0x080401b0

08081824 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081824:	b508      	push	{r3, lr}
 8081826:	4b02      	ldr	r3, [pc, #8]	; (8081830 <HAL_Get_Pin_Mode+0xc>)
 8081828:	681b      	ldr	r3, [r3, #0]
 808182a:	68db      	ldr	r3, [r3, #12]
 808182c:	9301      	str	r3, [sp, #4]
 808182e:	bd08      	pop	{r3, pc}
 8081830:	080401b0 	.word	0x080401b0

08081834 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081834:	b508      	push	{r3, lr}
 8081836:	4b02      	ldr	r3, [pc, #8]	; (8081840 <HAL_GPIO_Write+0xc>)
 8081838:	681b      	ldr	r3, [r3, #0]
 808183a:	691b      	ldr	r3, [r3, #16]
 808183c:	9301      	str	r3, [sp, #4]
 808183e:	bd08      	pop	{r3, pc}
 8081840:	080401b0 	.word	0x080401b0

08081844 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8081844:	b508      	push	{r3, lr}
 8081846:	4b02      	ldr	r3, [pc, #8]	; (8081850 <HAL_GPIO_Read+0xc>)
 8081848:	681b      	ldr	r3, [r3, #0]
 808184a:	695b      	ldr	r3, [r3, #20]
 808184c:	9301      	str	r3, [sp, #4]
 808184e:	bd08      	pop	{r3, pc}
 8081850:	080401b0 	.word	0x080401b0

08081854 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8081854:	b508      	push	{r3, lr}
 8081856:	4b02      	ldr	r3, [pc, #8]	; (8081860 <HAL_Interrupts_Attach+0xc>)
 8081858:	681b      	ldr	r3, [r3, #0]
 808185a:	699b      	ldr	r3, [r3, #24]
 808185c:	9301      	str	r3, [sp, #4]
 808185e:	bd08      	pop	{r3, pc}
 8081860:	080401b0 	.word	0x080401b0

08081864 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 8081864:	b508      	push	{r3, lr}
 8081866:	4b02      	ldr	r3, [pc, #8]	; (8081870 <HAL_Interrupts_Detach+0xc>)
 8081868:	681b      	ldr	r3, [r3, #0]
 808186a:	69db      	ldr	r3, [r3, #28]
 808186c:	9301      	str	r3, [sp, #4]
 808186e:	bd08      	pop	{r3, pc}
 8081870:	080401b0 	.word	0x080401b0

08081874 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 8081874:	b508      	push	{r3, lr}
 8081876:	4b02      	ldr	r3, [pc, #8]	; (8081880 <HAL_Interrupts_Enable_All+0xc>)
 8081878:	681b      	ldr	r3, [r3, #0]
 808187a:	6a1b      	ldr	r3, [r3, #32]
 808187c:	9301      	str	r3, [sp, #4]
 808187e:	bd08      	pop	{r3, pc}
 8081880:	080401b0 	.word	0x080401b0

08081884 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 8081884:	b508      	push	{r3, lr}
 8081886:	4b02      	ldr	r3, [pc, #8]	; (8081890 <HAL_Interrupts_Disable_All+0xc>)
 8081888:	681b      	ldr	r3, [r3, #0]
 808188a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 808188c:	9301      	str	r3, [sp, #4]
 808188e:	bd08      	pop	{r3, pc}
 8081890:	080401b0 	.word	0x080401b0

08081894 <HAL_Pulse_In>:

DYNALIB_FN(16, hal_gpio, HAL_Set_System_Interrupt_Handler, uint8_t(hal_irq_t, const HAL_InterruptCallback*, HAL_InterruptCallback*, void*))
DYNALIB_FN(17, hal_gpio, HAL_Get_System_Interrupt_Handler, uint8_t(hal_irq_t, HAL_InterruptCallback*, void*))
DYNALIB_FN(18, hal_gpio, HAL_System_Interrupt_Trigger, void(hal_irq_t, void*))

DYNALIB_FN(19, hal_gpio, HAL_Pulse_In, uint32_t(pin_t, uint16_t))
 8081894:	b508      	push	{r3, lr}
 8081896:	4b02      	ldr	r3, [pc, #8]	; (80818a0 <HAL_Pulse_In+0xc>)
 8081898:	681b      	ldr	r3, [r3, #0]
 808189a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808189c:	9301      	str	r3, [sp, #4]
 808189e:	bd08      	pop	{r3, pc}
 80818a0:	080401b0 	.word	0x080401b0

080818a4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80818a4:	b508      	push	{r3, lr}
 80818a6:	4b02      	ldr	r3, [pc, #8]	; (80818b0 <HAL_I2C_Begin+0xc>)
 80818a8:	681b      	ldr	r3, [r3, #0]
 80818aa:	68db      	ldr	r3, [r3, #12]
 80818ac:	9301      	str	r3, [sp, #4]
 80818ae:	bd08      	pop	{r3, pc}
 80818b0:	080401ac 	.word	0x080401ac

080818b4 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80818b4:	b508      	push	{r3, lr}
 80818b6:	4b02      	ldr	r3, [pc, #8]	; (80818c0 <HAL_I2C_Request_Data+0xc>)
 80818b8:	681b      	ldr	r3, [r3, #0]
 80818ba:	695b      	ldr	r3, [r3, #20]
 80818bc:	9301      	str	r3, [sp, #4]
 80818be:	bd08      	pop	{r3, pc}
 80818c0:	080401ac 	.word	0x080401ac

080818c4 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80818c4:	b508      	push	{r3, lr}
 80818c6:	4b02      	ldr	r3, [pc, #8]	; (80818d0 <HAL_I2C_Begin_Transmission+0xc>)
 80818c8:	681b      	ldr	r3, [r3, #0]
 80818ca:	699b      	ldr	r3, [r3, #24]
 80818cc:	9301      	str	r3, [sp, #4]
 80818ce:	bd08      	pop	{r3, pc}
 80818d0:	080401ac 	.word	0x080401ac

080818d4 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80818d4:	b508      	push	{r3, lr}
 80818d6:	4b02      	ldr	r3, [pc, #8]	; (80818e0 <HAL_I2C_End_Transmission+0xc>)
 80818d8:	681b      	ldr	r3, [r3, #0]
 80818da:	69db      	ldr	r3, [r3, #28]
 80818dc:	9301      	str	r3, [sp, #4]
 80818de:	bd08      	pop	{r3, pc}
 80818e0:	080401ac 	.word	0x080401ac

080818e4 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80818e4:	b508      	push	{r3, lr}
 80818e6:	4b02      	ldr	r3, [pc, #8]	; (80818f0 <HAL_I2C_Write_Data+0xc>)
 80818e8:	681b      	ldr	r3, [r3, #0]
 80818ea:	6a1b      	ldr	r3, [r3, #32]
 80818ec:	9301      	str	r3, [sp, #4]
 80818ee:	bd08      	pop	{r3, pc}
 80818f0:	080401ac 	.word	0x080401ac

080818f4 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80818f4:	b508      	push	{r3, lr}
 80818f6:	4b02      	ldr	r3, [pc, #8]	; (8081900 <HAL_I2C_Available_Data+0xc>)
 80818f8:	681b      	ldr	r3, [r3, #0]
 80818fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80818fc:	9301      	str	r3, [sp, #4]
 80818fe:	bd08      	pop	{r3, pc}
 8081900:	080401ac 	.word	0x080401ac

08081904 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8081904:	b508      	push	{r3, lr}
 8081906:	4b02      	ldr	r3, [pc, #8]	; (8081910 <HAL_I2C_Read_Data+0xc>)
 8081908:	681b      	ldr	r3, [r3, #0]
 808190a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 808190c:	9301      	str	r3, [sp, #4]
 808190e:	bd08      	pop	{r3, pc}
 8081910:	080401ac 	.word	0x080401ac

08081914 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8081914:	b508      	push	{r3, lr}
 8081916:	4b02      	ldr	r3, [pc, #8]	; (8081920 <HAL_I2C_Peek_Data+0xc>)
 8081918:	681b      	ldr	r3, [r3, #0]
 808191a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 808191c:	9301      	str	r3, [sp, #4]
 808191e:	bd08      	pop	{r3, pc}
 8081920:	080401ac 	.word	0x080401ac

08081924 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8081924:	b508      	push	{r3, lr}
 8081926:	4b02      	ldr	r3, [pc, #8]	; (8081930 <HAL_I2C_Flush_Data+0xc>)
 8081928:	681b      	ldr	r3, [r3, #0]
 808192a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 808192c:	9301      	str	r3, [sp, #4]
 808192e:	bd08      	pop	{r3, pc}
 8081930:	080401ac 	.word	0x080401ac

08081934 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8081934:	b508      	push	{r3, lr}
 8081936:	4b02      	ldr	r3, [pc, #8]	; (8081940 <HAL_I2C_Is_Enabled+0xc>)
 8081938:	681b      	ldr	r3, [r3, #0]
 808193a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 808193c:	9301      	str	r3, [sp, #4]
 808193e:	bd08      	pop	{r3, pc}
 8081940:	080401ac 	.word	0x080401ac

08081944 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8081944:	b508      	push	{r3, lr}
 8081946:	4b02      	ldr	r3, [pc, #8]	; (8081950 <HAL_I2C_Init+0xc>)
 8081948:	681b      	ldr	r3, [r3, #0]
 808194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 808194c:	9301      	str	r3, [sp, #4]
 808194e:	bd08      	pop	{r3, pc}
 8081950:	080401ac 	.word	0x080401ac

08081954 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8081954:	b508      	push	{r3, lr}
 8081956:	4b02      	ldr	r3, [pc, #8]	; (8081960 <HAL_I2C_Acquire+0xc>)
 8081958:	681b      	ldr	r3, [r3, #0]
 808195a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 808195c:	9301      	str	r3, [sp, #4]
 808195e:	bd08      	pop	{r3, pc}
 8081960:	080401ac 	.word	0x080401ac

08081964 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8081964:	b508      	push	{r3, lr}
 8081966:	4b02      	ldr	r3, [pc, #8]	; (8081970 <HAL_I2C_Release+0xc>)
 8081968:	681b      	ldr	r3, [r3, #0]
 808196a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 808196c:	9301      	str	r3, [sp, #4]
 808196e:	bd08      	pop	{r3, pc}
 8081970:	080401ac 	.word	0x080401ac

08081974 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8081974:	b508      	push	{r3, lr}
 8081976:	4b02      	ldr	r3, [pc, #8]	; (8081980 <HAL_SPI_Init+0xc>)
 8081978:	681b      	ldr	r3, [r3, #0]
 808197a:	69db      	ldr	r3, [r3, #28]
 808197c:	9301      	str	r3, [sp, #4]
 808197e:	bd08      	pop	{r3, pc}
 8081980:	080401b4 	.word	0x080401b4

08081984 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8081984:	b508      	push	{r3, lr}
 8081986:	4b02      	ldr	r3, [pc, #8]	; (8081990 <HAL_SPI_Is_Enabled+0xc>)
 8081988:	681b      	ldr	r3, [r3, #0]
 808198a:	6a1b      	ldr	r3, [r3, #32]
 808198c:	9301      	str	r3, [sp, #4]
 808198e:	bd08      	pop	{r3, pc}
 8081990:	080401b4 	.word	0x080401b4

08081994 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8081994:	b508      	push	{r3, lr}
 8081996:	4b02      	ldr	r3, [pc, #8]	; (80819a0 <HAL_USART_Init+0xc>)
 8081998:	681b      	ldr	r3, [r3, #0]
 808199a:	699b      	ldr	r3, [r3, #24]
 808199c:	9301      	str	r3, [sp, #4]
 808199e:	bd08      	pop	{r3, pc}
 80819a0:	080401c4 	.word	0x080401c4

080819a4 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80819a4:	b508      	push	{r3, lr}
 80819a6:	4b02      	ldr	r3, [pc, #8]	; (80819b0 <HAL_USART_Write_Data+0xc>)
 80819a8:	681b      	ldr	r3, [r3, #0]
 80819aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80819ac:	9301      	str	r3, [sp, #4]
 80819ae:	bd08      	pop	{r3, pc}
 80819b0:	080401c4 	.word	0x080401c4

080819b4 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80819b4:	b508      	push	{r3, lr}
 80819b6:	4b02      	ldr	r3, [pc, #8]	; (80819c0 <HAL_USART_Available_Data+0xc>)
 80819b8:	681b      	ldr	r3, [r3, #0]
 80819ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80819bc:	9301      	str	r3, [sp, #4]
 80819be:	bd08      	pop	{r3, pc}
 80819c0:	080401c4 	.word	0x080401c4

080819c4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80819c4:	b508      	push	{r3, lr}
 80819c6:	4b02      	ldr	r3, [pc, #8]	; (80819d0 <HAL_USART_Read_Data+0xc>)
 80819c8:	681b      	ldr	r3, [r3, #0]
 80819ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80819cc:	9301      	str	r3, [sp, #4]
 80819ce:	bd08      	pop	{r3, pc}
 80819d0:	080401c4 	.word	0x080401c4

080819d4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80819d4:	b508      	push	{r3, lr}
 80819d6:	4b02      	ldr	r3, [pc, #8]	; (80819e0 <HAL_USART_Peek_Data+0xc>)
 80819d8:	681b      	ldr	r3, [r3, #0]
 80819da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80819dc:	9301      	str	r3, [sp, #4]
 80819de:	bd08      	pop	{r3, pc}
 80819e0:	080401c4 	.word	0x080401c4

080819e4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80819e4:	b508      	push	{r3, lr}
 80819e6:	4b02      	ldr	r3, [pc, #8]	; (80819f0 <HAL_USART_Flush_Data+0xc>)
 80819e8:	681b      	ldr	r3, [r3, #0]
 80819ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80819ec:	9301      	str	r3, [sp, #4]
 80819ee:	bd08      	pop	{r3, pc}
 80819f0:	080401c4 	.word	0x080401c4

080819f4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80819f4:	b508      	push	{r3, lr}
 80819f6:	4b02      	ldr	r3, [pc, #8]	; (8081a00 <HAL_USART_Is_Enabled+0xc>)
 80819f8:	681b      	ldr	r3, [r3, #0]
 80819fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80819fc:	9301      	str	r3, [sp, #4]
 80819fe:	bd08      	pop	{r3, pc}
 8081a00:	080401c4 	.word	0x080401c4

08081a04 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8081a04:	b508      	push	{r3, lr}
 8081a06:	4b02      	ldr	r3, [pc, #8]	; (8081a10 <HAL_USART_Available_Data_For_Write+0xc>)
 8081a08:	681b      	ldr	r3, [r3, #0]
 8081a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081a0c:	9301      	str	r3, [sp, #4]
 8081a0e:	bd08      	pop	{r3, pc}
 8081a10:	080401c4 	.word	0x080401c4

08081a14 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081a14:	b508      	push	{r3, lr}
 8081a16:	4b02      	ldr	r3, [pc, #8]	; (8081a20 <HAL_USB_USART_Init+0xc>)
 8081a18:	681b      	ldr	r3, [r3, #0]
 8081a1a:	681b      	ldr	r3, [r3, #0]
 8081a1c:	9301      	str	r3, [sp, #4]
 8081a1e:	bd08      	pop	{r3, pc}
 8081a20:	0806001c 	.word	0x0806001c

08081a24 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081a24:	b508      	push	{r3, lr}
 8081a26:	4b02      	ldr	r3, [pc, #8]	; (8081a30 <HAL_USB_USART_Available_Data+0xc>)
 8081a28:	681b      	ldr	r3, [r3, #0]
 8081a2a:	691b      	ldr	r3, [r3, #16]
 8081a2c:	9301      	str	r3, [sp, #4]
 8081a2e:	bd08      	pop	{r3, pc}
 8081a30:	0806001c 	.word	0x0806001c

08081a34 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081a34:	b508      	push	{r3, lr}
 8081a36:	4b02      	ldr	r3, [pc, #8]	; (8081a40 <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081a38:	681b      	ldr	r3, [r3, #0]
 8081a3a:	695b      	ldr	r3, [r3, #20]
 8081a3c:	9301      	str	r3, [sp, #4]
 8081a3e:	bd08      	pop	{r3, pc}
 8081a40:	0806001c 	.word	0x0806001c

08081a44 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081a44:	b508      	push	{r3, lr}
 8081a46:	4b02      	ldr	r3, [pc, #8]	; (8081a50 <HAL_USB_USART_Receive_Data+0xc>)
 8081a48:	681b      	ldr	r3, [r3, #0]
 8081a4a:	699b      	ldr	r3, [r3, #24]
 8081a4c:	9301      	str	r3, [sp, #4]
 8081a4e:	bd08      	pop	{r3, pc}
 8081a50:	0806001c 	.word	0x0806001c

08081a54 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081a54:	b508      	push	{r3, lr}
 8081a56:	4b02      	ldr	r3, [pc, #8]	; (8081a60 <HAL_USB_USART_Send_Data+0xc>)
 8081a58:	681b      	ldr	r3, [r3, #0]
 8081a5a:	69db      	ldr	r3, [r3, #28]
 8081a5c:	9301      	str	r3, [sp, #4]
 8081a5e:	bd08      	pop	{r3, pc}
 8081a60:	0806001c 	.word	0x0806001c

08081a64 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081a64:	b508      	push	{r3, lr}
 8081a66:	4b02      	ldr	r3, [pc, #8]	; (8081a70 <HAL_USB_USART_Flush_Data+0xc>)
 8081a68:	681b      	ldr	r3, [r3, #0]
 8081a6a:	6a1b      	ldr	r3, [r3, #32]
 8081a6c:	9301      	str	r3, [sp, #4]
 8081a6e:	bd08      	pop	{r3, pc}
 8081a70:	0806001c 	.word	0x0806001c

08081a74 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8081a74:	b508      	push	{r3, lr}
 8081a76:	4b02      	ldr	r3, [pc, #8]	; (8081a80 <system_mode+0xc>)
 8081a78:	681b      	ldr	r3, [r3, #0]
 8081a7a:	681b      	ldr	r3, [r3, #0]
 8081a7c:	9301      	str	r3, [sp, #4]
 8081a7e:	bd08      	pop	{r3, pc}
 8081a80:	080401a4 	.word	0x080401a4

08081a84 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081a84:	b508      	push	{r3, lr}
 8081a86:	4b02      	ldr	r3, [pc, #8]	; (8081a90 <set_system_mode+0xc>)
 8081a88:	681b      	ldr	r3, [r3, #0]
 8081a8a:	685b      	ldr	r3, [r3, #4]
 8081a8c:	9301      	str	r3, [sp, #4]
 8081a8e:	bd08      	pop	{r3, pc}
 8081a90:	080401a4 	.word	0x080401a4

08081a94 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081a94:	b508      	push	{r3, lr}
 8081a96:	4b02      	ldr	r3, [pc, #8]	; (8081aa0 <system_delay_ms+0xc>)
 8081a98:	681b      	ldr	r3, [r3, #0]
 8081a9a:	695b      	ldr	r3, [r3, #20]
 8081a9c:	9301      	str	r3, [sp, #4]
 8081a9e:	bd08      	pop	{r3, pc}
 8081aa0:	080401a4 	.word	0x080401a4

08081aa4 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 8081aa4:	b508      	push	{r3, lr}
 8081aa6:	4b02      	ldr	r3, [pc, #8]	; (8081ab0 <system_sleep+0xc>)
 8081aa8:	681b      	ldr	r3, [r3, #0]
 8081aaa:	699b      	ldr	r3, [r3, #24]
 8081aac:	9301      	str	r3, [sp, #4]
 8081aae:	bd08      	pop	{r3, pc}
 8081ab0:	080401a4 	.word	0x080401a4

08081ab4 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 8081ab4:	b508      	push	{r3, lr}
 8081ab6:	4b02      	ldr	r3, [pc, #8]	; (8081ac0 <system_thread_set_state+0xc>)
 8081ab8:	681b      	ldr	r3, [r3, #0]
 8081aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081abc:	9301      	str	r3, [sp, #4]
 8081abe:	bd08      	pop	{r3, pc}
 8081ac0:	080401a4 	.word	0x080401a4

08081ac4 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 8081ac4:	b508      	push	{r3, lr}
 8081ac6:	4b02      	ldr	r3, [pc, #8]	; (8081ad0 <application_thread_current+0xc>)
 8081ac8:	681b      	ldr	r3, [r3, #0]
 8081aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081acc:	9301      	str	r3, [sp, #4]
 8081ace:	bd08      	pop	{r3, pc}
 8081ad0:	080401a4 	.word	0x080401a4

08081ad4 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 8081ad4:	b508      	push	{r3, lr}
 8081ad6:	4b02      	ldr	r3, [pc, #8]	; (8081ae0 <application_thread_invoke+0xc>)
 8081ad8:	681b      	ldr	r3, [r3, #0]
 8081ada:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8081adc:	9301      	str	r3, [sp, #4]
 8081ade:	bd08      	pop	{r3, pc}
 8081ae0:	080401a4 	.word	0x080401a4

08081ae4 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 8081ae4:	b508      	push	{r3, lr}
 8081ae6:	4b02      	ldr	r3, [pc, #8]	; (8081af0 <system_thread_get_state+0xc>)
 8081ae8:	681b      	ldr	r3, [r3, #0]
 8081aea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8081aec:	9301      	str	r3, [sp, #4]
 8081aee:	bd08      	pop	{r3, pc}
 8081af0:	080401a4 	.word	0x080401a4

08081af4 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 8081af4:	b508      	push	{r3, lr}
 8081af6:	4b03      	ldr	r3, [pc, #12]	; (8081b04 <system_ctrl_set_app_request_handler+0x10>)
 8081af8:	681b      	ldr	r3, [r3, #0]
 8081afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8081afe:	9301      	str	r3, [sp, #4]
 8081b00:	bd08      	pop	{r3, pc}
 8081b02:	0000      	.short	0x0000
 8081b04:	080401a4 	.word	0x080401a4

08081b08 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081b08:	b508      	push	{r3, lr}
 8081b0a:	4b03      	ldr	r3, [pc, #12]	; (8081b18 <system_ctrl_set_result+0x10>)
 8081b0c:	681b      	ldr	r3, [r3, #0]
 8081b0e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081b12:	9301      	str	r3, [sp, #4]
 8081b14:	bd08      	pop	{r3, pc}
 8081b16:	0000      	.short	0x0000
 8081b18:	080401a4 	.word	0x080401a4

08081b1c <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8081b1c:	b508      	push	{r3, lr}
 8081b1e:	4b02      	ldr	r3, [pc, #8]	; (8081b28 <spark_variable+0xc>)
 8081b20:	681b      	ldr	r3, [r3, #0]
 8081b22:	681b      	ldr	r3, [r3, #0]
 8081b24:	9301      	str	r3, [sp, #4]
 8081b26:	bd08      	pop	{r3, pc}
 8081b28:	080401cc 	.word	0x080401cc

08081b2c <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8081b2c:	b508      	push	{r3, lr}
 8081b2e:	4b02      	ldr	r3, [pc, #8]	; (8081b38 <spark_function+0xc>)
 8081b30:	681b      	ldr	r3, [r3, #0]
 8081b32:	685b      	ldr	r3, [r3, #4]
 8081b34:	9301      	str	r3, [sp, #4]
 8081b36:	bd08      	pop	{r3, pc}
 8081b38:	080401cc 	.word	0x080401cc

08081b3c <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8081b3c:	b508      	push	{r3, lr}
 8081b3e:	4b02      	ldr	r3, [pc, #8]	; (8081b48 <spark_process+0xc>)
 8081b40:	681b      	ldr	r3, [r3, #0]
 8081b42:	689b      	ldr	r3, [r3, #8]
 8081b44:	9301      	str	r3, [sp, #4]
 8081b46:	bd08      	pop	{r3, pc}
 8081b48:	080401cc 	.word	0x080401cc

08081b4c <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8081b4c:	b508      	push	{r3, lr}
 8081b4e:	4b02      	ldr	r3, [pc, #8]	; (8081b58 <spark_cloud_flag_connect+0xc>)
 8081b50:	681b      	ldr	r3, [r3, #0]
 8081b52:	68db      	ldr	r3, [r3, #12]
 8081b54:	9301      	str	r3, [sp, #4]
 8081b56:	bd08      	pop	{r3, pc}
 8081b58:	080401cc 	.word	0x080401cc

08081b5c <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 8081b5c:	b508      	push	{r3, lr}
 8081b5e:	4b02      	ldr	r3, [pc, #8]	; (8081b68 <spark_cloud_flag_disconnect+0xc>)
 8081b60:	681b      	ldr	r3, [r3, #0]
 8081b62:	691b      	ldr	r3, [r3, #16]
 8081b64:	9301      	str	r3, [sp, #4]
 8081b66:	bd08      	pop	{r3, pc}
 8081b68:	080401cc 	.word	0x080401cc

08081b6c <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8081b6c:	b508      	push	{r3, lr}
 8081b6e:	4b02      	ldr	r3, [pc, #8]	; (8081b78 <spark_cloud_flag_connected+0xc>)
 8081b70:	681b      	ldr	r3, [r3, #0]
 8081b72:	695b      	ldr	r3, [r3, #20]
 8081b74:	9301      	str	r3, [sp, #4]
 8081b76:	bd08      	pop	{r3, pc}
 8081b78:	080401cc 	.word	0x080401cc

08081b7c <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8081b7c:	b508      	push	{r3, lr}
 8081b7e:	4b02      	ldr	r3, [pc, #8]	; (8081b88 <spark_deviceID+0xc>)
 8081b80:	681b      	ldr	r3, [r3, #0]
 8081b82:	69db      	ldr	r3, [r3, #28]
 8081b84:	9301      	str	r3, [sp, #4]
 8081b86:	bd08      	pop	{r3, pc}
 8081b88:	080401cc 	.word	0x080401cc

08081b8c <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8081b8c:	b508      	push	{r3, lr}
 8081b8e:	4b02      	ldr	r3, [pc, #8]	; (8081b98 <spark_send_event+0xc>)
 8081b90:	681b      	ldr	r3, [r3, #0]
 8081b92:	6a1b      	ldr	r3, [r3, #32]
 8081b94:	9301      	str	r3, [sp, #4]
 8081b96:	bd08      	pop	{r3, pc}
 8081b98:	080401cc 	.word	0x080401cc

08081b9c <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8081b9c:	b508      	push	{r3, lr}
 8081b9e:	4b02      	ldr	r3, [pc, #8]	; (8081ba8 <spark_subscribe+0xc>)
 8081ba0:	681b      	ldr	r3, [r3, #0]
 8081ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081ba4:	9301      	str	r3, [sp, #4]
 8081ba6:	bd08      	pop	{r3, pc}
 8081ba8:	080401cc 	.word	0x080401cc

08081bac <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 8081bac:	b508      	push	{r3, lr}
 8081bae:	4b02      	ldr	r3, [pc, #8]	; (8081bb8 <spark_sync_time+0xc>)
 8081bb0:	681b      	ldr	r3, [r3, #0]
 8081bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081bb4:	9301      	str	r3, [sp, #4]
 8081bb6:	bd08      	pop	{r3, pc}
 8081bb8:	080401cc 	.word	0x080401cc

08081bbc <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8081bbc:	b508      	push	{r3, lr}
 8081bbe:	4b02      	ldr	r3, [pc, #8]	; (8081bc8 <spark_sync_time_pending+0xc>)
 8081bc0:	681b      	ldr	r3, [r3, #0]
 8081bc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081bc4:	9301      	str	r3, [sp, #4]
 8081bc6:	bd08      	pop	{r3, pc}
 8081bc8:	080401cc 	.word	0x080401cc

08081bcc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081bcc:	b508      	push	{r3, lr}
 8081bce:	4b02      	ldr	r3, [pc, #8]	; (8081bd8 <spark_set_random_seed_from_cloud_handler+0xc>)
 8081bd0:	681b      	ldr	r3, [r3, #0]
 8081bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081bd4:	9301      	str	r3, [sp, #4]
 8081bd6:	bd08      	pop	{r3, pc}
 8081bd8:	080401cc 	.word	0x080401cc

08081bdc <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8081bdc:	b508      	push	{r3, lr}
 8081bde:	4b02      	ldr	r3, [pc, #8]	; (8081be8 <network_connect+0xc>)
 8081be0:	681b      	ldr	r3, [r3, #0]
 8081be2:	685b      	ldr	r3, [r3, #4]
 8081be4:	9301      	str	r3, [sp, #4]
 8081be6:	bd08      	pop	{r3, pc}
 8081be8:	080401c8 	.word	0x080401c8

08081bec <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8081bec:	b508      	push	{r3, lr}
 8081bee:	4b02      	ldr	r3, [pc, #8]	; (8081bf8 <network_connecting+0xc>)
 8081bf0:	681b      	ldr	r3, [r3, #0]
 8081bf2:	689b      	ldr	r3, [r3, #8]
 8081bf4:	9301      	str	r3, [sp, #4]
 8081bf6:	bd08      	pop	{r3, pc}
 8081bf8:	080401c8 	.word	0x080401c8

08081bfc <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8081bfc:	b508      	push	{r3, lr}
 8081bfe:	4b02      	ldr	r3, [pc, #8]	; (8081c08 <network_disconnect+0xc>)
 8081c00:	681b      	ldr	r3, [r3, #0]
 8081c02:	68db      	ldr	r3, [r3, #12]
 8081c04:	9301      	str	r3, [sp, #4]
 8081c06:	bd08      	pop	{r3, pc}
 8081c08:	080401c8 	.word	0x080401c8

08081c0c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8081c0c:	b508      	push	{r3, lr}
 8081c0e:	4b02      	ldr	r3, [pc, #8]	; (8081c18 <network_ready+0xc>)
 8081c10:	681b      	ldr	r3, [r3, #0]
 8081c12:	691b      	ldr	r3, [r3, #16]
 8081c14:	9301      	str	r3, [sp, #4]
 8081c16:	bd08      	pop	{r3, pc}
 8081c18:	080401c8 	.word	0x080401c8

08081c1c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8081c1c:	b508      	push	{r3, lr}
 8081c1e:	4b02      	ldr	r3, [pc, #8]	; (8081c28 <network_on+0xc>)
 8081c20:	681b      	ldr	r3, [r3, #0]
 8081c22:	695b      	ldr	r3, [r3, #20]
 8081c24:	9301      	str	r3, [sp, #4]
 8081c26:	bd08      	pop	{r3, pc}
 8081c28:	080401c8 	.word	0x080401c8

08081c2c <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8081c2c:	b508      	push	{r3, lr}
 8081c2e:	4b02      	ldr	r3, [pc, #8]	; (8081c38 <network_off+0xc>)
 8081c30:	681b      	ldr	r3, [r3, #0]
 8081c32:	699b      	ldr	r3, [r3, #24]
 8081c34:	9301      	str	r3, [sp, #4]
 8081c36:	bd08      	pop	{r3, pc}
 8081c38:	080401c8 	.word	0x080401c8

08081c3c <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8081c3c:	b508      	push	{r3, lr}
 8081c3e:	4b02      	ldr	r3, [pc, #8]	; (8081c48 <network_listen+0xc>)
 8081c40:	681b      	ldr	r3, [r3, #0]
 8081c42:	69db      	ldr	r3, [r3, #28]
 8081c44:	9301      	str	r3, [sp, #4]
 8081c46:	bd08      	pop	{r3, pc}
 8081c48:	080401c8 	.word	0x080401c8

08081c4c <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8081c4c:	b508      	push	{r3, lr}
 8081c4e:	4b02      	ldr	r3, [pc, #8]	; (8081c58 <network_listening+0xc>)
 8081c50:	681b      	ldr	r3, [r3, #0]
 8081c52:	6a1b      	ldr	r3, [r3, #32]
 8081c54:	9301      	str	r3, [sp, #4]
 8081c56:	bd08      	pop	{r3, pc}
 8081c58:	080401c8 	.word	0x080401c8

08081c5c <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8081c5c:	b508      	push	{r3, lr}
 8081c5e:	4b02      	ldr	r3, [pc, #8]	; (8081c68 <network_set_listen_timeout+0xc>)
 8081c60:	681b      	ldr	r3, [r3, #0]
 8081c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081c64:	9301      	str	r3, [sp, #4]
 8081c66:	bd08      	pop	{r3, pc}
 8081c68:	080401c8 	.word	0x080401c8

08081c6c <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8081c6c:	b508      	push	{r3, lr}
 8081c6e:	4b02      	ldr	r3, [pc, #8]	; (8081c78 <network_get_listen_timeout+0xc>)
 8081c70:	681b      	ldr	r3, [r3, #0]
 8081c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081c74:	9301      	str	r3, [sp, #4]
 8081c76:	bd08      	pop	{r3, pc}
 8081c78:	080401c8 	.word	0x080401c8

08081c7c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8081c7c:	b508      	push	{r3, lr}
 8081c7e:	4b02      	ldr	r3, [pc, #8]	; (8081c88 <malloc+0xc>)
 8081c80:	681b      	ldr	r3, [r3, #0]
 8081c82:	681b      	ldr	r3, [r3, #0]
 8081c84:	9301      	str	r3, [sp, #4]
 8081c86:	bd08      	pop	{r3, pc}
 8081c88:	080401a0 	.word	0x080401a0

08081c8c <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081c8c:	b508      	push	{r3, lr}
 8081c8e:	4b02      	ldr	r3, [pc, #8]	; (8081c98 <free+0xc>)
 8081c90:	681b      	ldr	r3, [r3, #0]
 8081c92:	685b      	ldr	r3, [r3, #4]
 8081c94:	9301      	str	r3, [sp, #4]
 8081c96:	bd08      	pop	{r3, pc}
 8081c98:	080401a0 	.word	0x080401a0

08081c9c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8081c9c:	b508      	push	{r3, lr}
 8081c9e:	4b02      	ldr	r3, [pc, #8]	; (8081ca8 <realloc+0xc>)
 8081ca0:	681b      	ldr	r3, [r3, #0]
 8081ca2:	689b      	ldr	r3, [r3, #8]
 8081ca4:	9301      	str	r3, [sp, #4]
 8081ca6:	bd08      	pop	{r3, pc}
 8081ca8:	080401a0 	.word	0x080401a0

08081cac <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8081cac:	b508      	push	{r3, lr}
 8081cae:	4b02      	ldr	r3, [pc, #8]	; (8081cb8 <siprintf+0xc>)
 8081cb0:	681b      	ldr	r3, [r3, #0]
 8081cb2:	691b      	ldr	r3, [r3, #16]
 8081cb4:	9301      	str	r3, [sp, #4]
 8081cb6:	bd08      	pop	{r3, pc}
 8081cb8:	080401a0 	.word	0x080401a0

08081cbc <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8081cbc:	b508      	push	{r3, lr}
 8081cbe:	4b02      	ldr	r3, [pc, #8]	; (8081cc8 <siscanf+0xc>)
 8081cc0:	681b      	ldr	r3, [r3, #0]
 8081cc2:	699b      	ldr	r3, [r3, #24]
 8081cc4:	9301      	str	r3, [sp, #4]
 8081cc6:	bd08      	pop	{r3, pc}
 8081cc8:	080401a0 	.word	0x080401a0

08081ccc <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8081ccc:	b508      	push	{r3, lr}
 8081cce:	4b02      	ldr	r3, [pc, #8]	; (8081cd8 <snprintf+0xc>)
 8081cd0:	681b      	ldr	r3, [r3, #0]
 8081cd2:	69db      	ldr	r3, [r3, #28]
 8081cd4:	9301      	str	r3, [sp, #4]
 8081cd6:	bd08      	pop	{r3, pc}
 8081cd8:	080401a0 	.word	0x080401a0

08081cdc <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8081cdc:	b508      	push	{r3, lr}
 8081cde:	4b02      	ldr	r3, [pc, #8]	; (8081ce8 <abort+0xc>)
 8081ce0:	681b      	ldr	r3, [r3, #0]
 8081ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081ce4:	9301      	str	r3, [sp, #4]
 8081ce6:	bd08      	pop	{r3, pc}
 8081ce8:	080401a0 	.word	0x080401a0

08081cec <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8081cec:	b508      	push	{r3, lr}
 8081cee:	4b02      	ldr	r3, [pc, #8]	; (8081cf8 <_malloc_r+0xc>)
 8081cf0:	681b      	ldr	r3, [r3, #0]
 8081cf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081cf4:	9301      	str	r3, [sp, #4]
 8081cf6:	bd08      	pop	{r3, pc}
 8081cf8:	080401a0 	.word	0x080401a0

08081cfc <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081cfc:	2100      	movs	r1, #0
 8081cfe:	f7ff bec9 	b.w	8081a94 <system_delay_ms>

08081d02 <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8081d02:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081d04:	6883      	ldr	r3, [r0, #8]
 8081d06:	4604      	mov	r4, r0
 8081d08:	b90b      	cbnz	r3, 8081d0e <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8081d0a:	f001 fcc8 	bl	808369e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081d0e:	68c3      	ldr	r3, [r0, #12]
 8081d10:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8081d12:	68a3      	ldr	r3, [r4, #8]
 8081d14:	b11b      	cbz	r3, 8081d1e <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081d16:	2203      	movs	r2, #3
 8081d18:	4621      	mov	r1, r4
 8081d1a:	4620      	mov	r0, r4
 8081d1c:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081d1e:	4620      	mov	r0, r4
}
 8081d20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081d24:	f7fe b9bb 	b.w	808009e <_ZdlPv>

08081d28 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8081d28:	2200      	movs	r2, #0
 8081d2a:	4611      	mov	r1, r2
 8081d2c:	6840      	ldr	r0, [r0, #4]
 8081d2e:	f7ff bf6d 	b.w	8081c0c <network_ready>

08081d32 <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081d32:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8081d36:	2600      	movs	r6, #0
 8081d38:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081d3a:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081d3c:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081d3e:	4688      	mov	r8, r1
 8081d40:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8081d42:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081d46:	f002 feb8 	bl	8084aba <strlen>
 8081d4a:	9600      	str	r6, [sp, #0]
 8081d4c:	b281      	uxth	r1, r0
 8081d4e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8081d52:	4622      	mov	r2, r4
 8081d54:	4638      	mov	r0, r7
 8081d56:	f7ff fccd 	bl	80816f4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081d5a:	b120      	cbz	r0, 8081d66 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8081d5c:	4631      	mov	r1, r6
 8081d5e:	4628      	mov	r0, r5
 8081d60:	f000 fd28 	bl	80827b4 <_ZN9IPAddressC1Em>
 8081d64:	e003      	b.n	8081d6e <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8081d66:	4621      	mov	r1, r4
 8081d68:	4628      	mov	r0, r5
 8081d6a:	f000 fd1b 	bl	80827a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8081d6e:	4628      	mov	r0, r5
 8081d70:	b004      	add	sp, #16
 8081d72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081d76 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8081d76:	2200      	movs	r2, #0
 8081d78:	4611      	mov	r1, r2
 8081d7a:	6840      	ldr	r0, [r0, #4]
 8081d7c:	f7ff bf66 	b.w	8081c4c <network_listening>

08081d80 <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8081d80:	2200      	movs	r2, #0
 8081d82:	4611      	mov	r1, r2
 8081d84:	6840      	ldr	r0, [r0, #4]
 8081d86:	f7ff bf71 	b.w	8081c6c <network_get_listen_timeout>

08081d8a <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8081d8a:	2200      	movs	r2, #0
 8081d8c:	6840      	ldr	r0, [r0, #4]
 8081d8e:	f7ff bf65 	b.w	8081c5c <network_set_listen_timeout>

08081d92 <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8081d92:	2200      	movs	r2, #0
 8081d94:	f081 0101 	eor.w	r1, r1, #1
 8081d98:	6840      	ldr	r0, [r0, #4]
 8081d9a:	f7ff bf4f 	b.w	8081c3c <network_listen>

08081d9e <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8081d9e:	2300      	movs	r3, #0
 8081da0:	461a      	mov	r2, r3
 8081da2:	4619      	mov	r1, r3
 8081da4:	6840      	ldr	r0, [r0, #4]
 8081da6:	f7ff bf41 	b.w	8081c2c <network_off>

08081daa <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8081daa:	2300      	movs	r3, #0
 8081dac:	461a      	mov	r2, r3
 8081dae:	4619      	mov	r1, r3
 8081db0:	6840      	ldr	r0, [r0, #4]
 8081db2:	f7ff bf33 	b.w	8081c1c <network_on>

08081db6 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8081db6:	2200      	movs	r2, #0
 8081db8:	4611      	mov	r1, r2
 8081dba:	6840      	ldr	r0, [r0, #4]
 8081dbc:	f7ff bf16 	b.w	8081bec <network_connecting>

08081dc0 <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8081dc0:	2200      	movs	r2, #0
 8081dc2:	2102      	movs	r1, #2
 8081dc4:	6840      	ldr	r0, [r0, #4]
 8081dc6:	f7ff bf19 	b.w	8081bfc <network_disconnect>

08081dca <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8081dca:	2300      	movs	r3, #0
 8081dcc:	461a      	mov	r2, r3
 8081dce:	6840      	ldr	r0, [r0, #4]
 8081dd0:	f7ff bf04 	b.w	8081bdc <network_connect>

08081dd4 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8081dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081dd6:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 8081dd8:	4b1a      	ldr	r3, [pc, #104]	; (8081e44 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8081dda:	2500      	movs	r5, #0
 8081ddc:	6003      	str	r3, [r0, #0]
 8081dde:	2618      	movs	r6, #24
 8081de0:	3328      	adds	r3, #40	; 0x28
 8081de2:	b089      	sub	sp, #36	; 0x24
 8081de4:	6043      	str	r3, [r0, #4]
 8081de6:	6085      	str	r5, [r0, #8]
 8081de8:	60c5      	str	r5, [r0, #12]
 8081dea:	4632      	mov	r2, r6
 8081dec:	4629      	mov	r1, r5
 8081dee:	4604      	mov	r4, r0
 8081df0:	3010      	adds	r0, #16
 8081df2:	f002 fe04 	bl	80849fe <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8081df6:	462a      	mov	r2, r5
 8081df8:	4629      	mov	r1, r5
 8081dfa:	6878      	ldr	r0, [r7, #4]
 8081dfc:	f7ff ff06 	bl	8081c0c <network_ready>
 8081e00:	b908      	cbnz	r0, 8081e06 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 8081e02:	60a0      	str	r0, [r4, #8]
            return sig;
 8081e04:	e01b      	b.n	8081e3e <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 8081e06:	4629      	mov	r1, r5
 8081e08:	4632      	mov	r2, r6
 8081e0a:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 8081e0c:	9500      	str	r5, [sp, #0]
 8081e0e:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 8081e10:	f002 fdf5 	bl	80849fe <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8081e14:	a902      	add	r1, sp, #8
 8081e16:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 8081e18:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8081e1c:	f7ff fc72 	bl	8081704 <cellular_signal>
 8081e20:	b110      	cbz	r0, 8081e28 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 8081e22:	2301      	movs	r3, #1
 8081e24:	60a3      	str	r3, [r4, #8]
            return sig;
 8081e26:	e00a      	b.n	8081e3e <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 8081e28:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 8081e2a:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 8081e2c:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 8081e2e:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 8081e30:	b90b      	cbnz	r3, 8081e36 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 8081e32:	2302      	movs	r3, #2
 8081e34:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 8081e36:	a902      	add	r1, sp, #8
 8081e38:	4620      	mov	r0, r4
 8081e3a:	f000 f89d 	bl	8081f78 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 8081e3e:	4620      	mov	r0, r4
 8081e40:	b009      	add	sp, #36	; 0x24
 8081e42:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081e44:	080856f4 	.word	0x080856f4

08081e48 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8081e48:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8081e4a:	4c0c      	ldr	r4, [pc, #48]	; (8081e7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8081e4c:	2528      	movs	r5, #40	; 0x28
 8081e4e:	462a      	mov	r2, r5
 8081e50:	2100      	movs	r1, #0
 8081e52:	4620      	mov	r0, r4
 8081e54:	f002 fdd3 	bl	80849fe <memset>
        cid = -1;
 8081e58:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8081e5c:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 8081e5e:	8025      	strh	r5, [r4, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8081e60:	4c07      	ldr	r4, [pc, #28]	; (8081e80 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8081e62:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8081e64:	4620      	mov	r0, r4
 8081e66:	6063      	str	r3, [r4, #4]
 8081e68:	4b06      	ldr	r3, [pc, #24]	; (8081e84 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 8081e6a:	252c      	movs	r5, #44	; 0x2c
 8081e6c:	f840 3b08 	str.w	r3, [r0], #8
 8081e70:	462a      	mov	r2, r5
 8081e72:	2100      	movs	r1, #0
 8081e74:	f002 fdc3 	bl	80849fe <memset>
        size = sizeof(*this);
 8081e78:	8125      	strh	r5, [r4, #8]
 8081e7a:	bd38      	pop	{r3, r4, r5, pc}
 8081e7c:	2000069c 	.word	0x2000069c
 8081e80:	20000668 	.word	0x20000668
 8081e84:	080856c0 	.word	0x080856c0

08081e88 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8081e88:	4770      	bx	lr

08081e8a <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8081e8a:	7d00      	ldrb	r0, [r0, #20]
 8081e8c:	4770      	bx	lr
	...

08081e90 <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 8081e90:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8081e92:	7d03      	ldrb	r3, [r0, #20]
 8081e94:	b11b      	cbz	r3, 8081e9e <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 8081e96:	6980      	ldr	r0, [r0, #24]
 8081e98:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081e9c:	d101      	bne.n	8081ea2 <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 8081e9e:	2000      	movs	r0, #0
 8081ea0:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 8081ea2:	f002 fa1b 	bl	80842dc <__aeabi_i2f>
 8081ea6:	4902      	ldr	r1, [pc, #8]	; (8081eb0 <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8081ea8:	f002 fb20 	bl	80844ec <__aeabi_fdiv>
    }

    return 0.0f;
}
 8081eac:	bd08      	pop	{r3, pc}
 8081eae:	bf00      	nop
 8081eb0:	42c80000 	.word	0x42c80000

08081eb4 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8081eb4:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8081eb6:	7d03      	ldrb	r3, [r0, #20]
 8081eb8:	b11b      	cbz	r3, 8081ec2 <_ZNK14CellularSignal15getQualityValueEv+0xe>
 8081eba:	6a00      	ldr	r0, [r0, #32]
 8081ebc:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081ec0:	d101      	bne.n	8081ec6 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 8081ec2:	2000      	movs	r0, #0
 8081ec4:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 8081ec6:	f002 fa09 	bl	80842dc <__aeabi_i2f>
 8081eca:	4902      	ldr	r1, [pc, #8]	; (8081ed4 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8081ecc:	f002 fb0e 	bl	80844ec <__aeabi_fdiv>
    }

    return 0.0f;
}
 8081ed0:	bd08      	pop	{r3, pc}
 8081ed2:	bf00      	nop
 8081ed4:	42c80000 	.word	0x42c80000

08081ed8 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
 8081ed8:	b570      	push	{r4, r5, r6, lr}
 8081eda:	460d      	mov	r5, r1
 8081edc:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8081ede:	220a      	movs	r2, #10
 8081ee0:	6881      	ldr	r1, [r0, #8]
 8081ee2:	4628      	mov	r0, r5
 8081ee4:	f000 ff41 	bl	8082d6a <_ZN5Print5printEii>
    n += p.print(',');
 8081ee8:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8081eea:	4604      	mov	r4, r0
    n += p.print(',');
 8081eec:	4628      	mov	r0, r5
 8081eee:	f000 fed5 	bl	8082c9c <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 8081ef2:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8081ef4:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 8081ef6:	68f1      	ldr	r1, [r6, #12]
 8081ef8:	4628      	mov	r0, r5
 8081efa:	f000 ff36 	bl	8082d6a <_ZN5Print5printEii>
    return n;
}
 8081efe:	4420      	add	r0, r4
 8081f00:	bd70      	pop	{r4, r5, r6, pc}

08081f02 <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8081f02:	f1a0 0004 	sub.w	r0, r0, #4
 8081f06:	f7ff bfe7 	b.w	8081ed8 <_ZNK14CellularSignal7printToER5Print>

08081f0a <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8081f0a:	b510      	push	{r4, lr}
 8081f0c:	4604      	mov	r4, r0
 8081f0e:	f7fe f8c6 	bl	808009e <_ZdlPv>
 8081f12:	4620      	mov	r0, r4
 8081f14:	bd10      	pop	{r4, pc}
	...

08081f18 <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 8081f18:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 8081f1a:	7d03      	ldrb	r3, [r0, #20]
 8081f1c:	b15b      	cbz	r3, 8081f36 <_ZNK14CellularSignal10getQualityEv+0x1e>
 8081f1e:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8081f20:	2800      	cmp	r0, #0
 8081f22:	db08      	blt.n	8081f36 <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8081f24:	f002 f9da 	bl	80842dc <__aeabi_i2f>
 8081f28:	4904      	ldr	r1, [pc, #16]	; (8081f3c <_ZNK14CellularSignal10getQualityEv+0x24>)
 8081f2a:	f002 fadf 	bl	80844ec <__aeabi_fdiv>
 8081f2e:	4904      	ldr	r1, [pc, #16]	; (8081f40 <_ZNK14CellularSignal10getQualityEv+0x28>)
 8081f30:	f002 fa28 	bl	8084384 <__aeabi_fmul>
 8081f34:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8081f36:	4803      	ldr	r0, [pc, #12]	; (8081f44 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 8081f38:	bd08      	pop	{r3, pc}
 8081f3a:	bf00      	nop
 8081f3c:	477fff00 	.word	0x477fff00
 8081f40:	42c80000 	.word	0x42c80000
 8081f44:	bf800000 	.word	0xbf800000

08081f48 <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 8081f48:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 8081f4a:	7d03      	ldrb	r3, [r0, #20]
 8081f4c:	b15b      	cbz	r3, 8081f66 <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8081f4e:	69c0      	ldr	r0, [r0, #28]
 8081f50:	2800      	cmp	r0, #0
 8081f52:	db08      	blt.n	8081f66 <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8081f54:	f002 f9c2 	bl	80842dc <__aeabi_i2f>
 8081f58:	4904      	ldr	r1, [pc, #16]	; (8081f6c <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8081f5a:	f002 fac7 	bl	80844ec <__aeabi_fdiv>
 8081f5e:	4904      	ldr	r1, [pc, #16]	; (8081f70 <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8081f60:	f002 fa10 	bl	8084384 <__aeabi_fmul>
 8081f64:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8081f66:	4803      	ldr	r0, [pc, #12]	; (8081f74 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 8081f68:	bd08      	pop	{r3, pc}
 8081f6a:	bf00      	nop
 8081f6c:	477fff00 	.word	0x477fff00
 8081f70:	42c80000 	.word	0x42c80000
 8081f74:	bf800000 	.word	0xbf800000

08081f78 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 8081f78:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8081f7a:	460d      	mov	r5, r1
 8081f7c:	f100 0410 	add.w	r4, r0, #16
 8081f80:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081f82:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081f84:	e895 0003 	ldmia.w	r5, {r0, r1}
 8081f88:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8081f8c:	2001      	movs	r0, #1
 8081f8e:	bd30      	pop	{r4, r5, pc}

08081f90 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081f90:	4770      	bx	lr

08081f92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8081f92:	2000      	movs	r0, #0
 8081f94:	4770      	bx	lr

08081f96 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081f96:	b510      	push	{r4, lr}
 8081f98:	4604      	mov	r4, r0
 8081f9a:	f7fe f880 	bl	808009e <_ZdlPv>
 8081f9e:	4620      	mov	r0, r4
 8081fa0:	bd10      	pop	{r4, pc}

08081fa2 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8081fa2:	b508      	push	{r3, lr}
      { delete this; }
 8081fa4:	b108      	cbz	r0, 8081faa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8081fa6:	f7ff fff6 	bl	8081f96 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8081faa:	bd08      	pop	{r3, pc}

08081fac <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081fac:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8081fae:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081fb0:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8081fb2:	b113      	cbz	r3, 8081fba <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081fb4:	2203      	movs	r2, #3
 8081fb6:	4601      	mov	r1, r0
 8081fb8:	4798      	blx	r3
    }
 8081fba:	4620      	mov	r0, r4
 8081fbc:	bd10      	pop	{r4, pc}

08081fbe <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8081fbe:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8081fc0:	68c4      	ldr	r4, [r0, #12]
 8081fc2:	b1d4      	cbz	r4, 8081ffa <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8081fc4:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8081fc6:	2b02      	cmp	r3, #2
 8081fc8:	d102      	bne.n	8081fd0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081fca:	68e0      	ldr	r0, [r4, #12]
 8081fcc:	f7ff fe5e 	bl	8081c8c <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8081fd0:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8081fd2:	b12d      	cbz	r5, 8081fe0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081fd4:	4628      	mov	r0, r5
 8081fd6:	f7ff ffe9 	bl	8081fac <_ZNSt14_Function_baseD1Ev>
 8081fda:	4628      	mov	r0, r5
 8081fdc:	f7fe f85f 	bl	808009e <_ZdlPv>
 8081fe0:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8081fe2:	b12d      	cbz	r5, 8081ff0 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 8081fe4:	4628      	mov	r0, r5
 8081fe6:	f7ff ffe1 	bl	8081fac <_ZNSt14_Function_baseD1Ev>
 8081fea:	4628      	mov	r0, r5
 8081fec:	f7fe f857 	bl	808009e <_ZdlPv>
 8081ff0:	4620      	mov	r0, r4
 8081ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081ff6:	f7fe b852 	b.w	808009e <_ZdlPv>
 8081ffa:	bd38      	pop	{r3, r4, r5, pc}

08081ffc <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8081ffc:	b510      	push	{r4, lr}
 8081ffe:	b088      	sub	sp, #32
 8082000:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8082002:	4668      	mov	r0, sp
 8082004:	f000 ff2e 	bl	8082e64 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8082008:	4669      	mov	r1, sp
 808200a:	a804      	add	r0, sp, #16
 808200c:	f000 ff4c 	bl	8082ea8 <_ZN6StringC1ERKS_>
 8082010:	a804      	add	r0, sp, #16
 8082012:	47a0      	blx	r4
 8082014:	4604      	mov	r4, r0
 8082016:	a804      	add	r0, sp, #16
 8082018:	f000 fedd 	bl	8082dd6 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 808201c:	4668      	mov	r0, sp
 808201e:	f000 feda 	bl	8082dd6 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8082022:	4620      	mov	r0, r4
 8082024:	b008      	add	sp, #32
 8082026:	bd10      	pop	{r4, pc}

08082028 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8082028:	b5f0      	push	{r4, r5, r6, r7, lr}
 808202a:	4607      	mov	r7, r0
 808202c:	460e      	mov	r6, r1
 808202e:	4615      	mov	r5, r2
 8082030:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 8082032:	2410      	movs	r4, #16
 8082034:	4622      	mov	r2, r4
 8082036:	2100      	movs	r1, #0
 8082038:	4668      	mov	r0, sp
 808203a:	f002 fce0 	bl	80849fe <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808203e:	2200      	movs	r2, #0
 8082040:	4669      	mov	r1, sp
 8082042:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 8082044:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 8082048:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 808204a:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 808204c:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 808204e:	f7ff fd6d 	bl	8081b2c <spark_function>
}
 8082052:	b005      	add	sp, #20
 8082054:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082056 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8082056:	b513      	push	{r0, r1, r4, lr}
 8082058:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 808205a:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 808205e:	2300      	movs	r3, #0
 8082060:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8082062:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8082064:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8082066:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082068:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 808206a:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 808206c:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808206e:	f7fe fa1b 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082072:	4620      	mov	r0, r4
 8082074:	b002      	add	sp, #8
 8082076:	bd10      	pop	{r4, pc}

08082078 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8082078:	680b      	ldr	r3, [r1, #0]
 808207a:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 808207c:	b113      	cbz	r3, 8082084 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 808207e:	685a      	ldr	r2, [r3, #4]
 8082080:	3201      	adds	r2, #1
 8082082:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8082084:	4770      	bx	lr

08082086 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8082086:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082088:	460c      	mov	r4, r1
 808208a:	4606      	mov	r6, r0
 808208c:	460f      	mov	r7, r1
 808208e:	f854 3b04 	ldr.w	r3, [r4], #4
 8082092:	ad02      	add	r5, sp, #8
 8082094:	f845 3d08 	str.w	r3, [r5, #-8]!
 8082098:	4621      	mov	r1, r4
 808209a:	a801      	add	r0, sp, #4
 808209c:	f7ff ffec 	bl	8082078 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 80820a0:	4629      	mov	r1, r5
 80820a2:	4630      	mov	r0, r6
 80820a4:	f7ff ffd7 	bl	8082056 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 80820a8:	a801      	add	r0, sp, #4
 80820aa:	f7fe f9fd 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80820ae:	4620      	mov	r0, r4
 80820b0:	f7fe f9fa 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 80820b4:	4638      	mov	r0, r7
 80820b6:	f7fd fff2 	bl	808009e <_ZdlPv>
        return p;
    }
 80820ba:	4630      	mov	r0, r6
 80820bc:	b003      	add	sp, #12
 80820be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080820c0 <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 80820c0:	b513      	push	{r0, r1, r4, lr}
 80820c2:	460b      	mov	r3, r1
 80820c4:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80820c6:	c803      	ldmia	r0, {r0, r1}
 80820c8:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 80820cc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80820d0:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 80820d4:	e89d 0003 	ldmia.w	sp, {r0, r1}
 80820d8:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 80820dc:	b002      	add	sp, #8
 80820de:	bd10      	pop	{r4, pc}

080820e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80820e0:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 80820e2:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80820e4:	b90a      	cbnz	r2, 80820ea <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 80820e6:	f001 fada 	bl	808369e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80820ea:	68c3      	ldr	r3, [r0, #12]
    }
 80820ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80820f0:	4718      	bx	r3

080820f2 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 80820f2:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80820f4:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 80820f6:	f100 0110 	add.w	r1, r0, #16
 80820fa:	f7ff fff1 	bl	80820e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80820fe:	bd08      	pop	{r3, pc}

08082100 <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082100:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8082102:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082104:	b90a      	cbnz	r2, 808210a <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8082106:	f001 faca 	bl	808369e <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808210a:	68c3      	ldr	r3, [r0, #12]
    }
 808210c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082110:	4718      	bx	r3

08082112 <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8082112:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082114:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8082116:	f100 0110 	add.w	r1, r0, #16
 808211a:	f7ff fff1 	bl	8082100 <_ZNKSt8functionIFvRKbEEclES1_>
 808211e:	bd08      	pop	{r3, pc}

08082120 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082120:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082122:	2300      	movs	r3, #0
 8082124:	6083      	str	r3, [r0, #8]
 8082126:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082128:	4604      	mov	r4, r0
 808212a:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 808212c:	b12b      	cbz	r3, 808213a <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808212e:	2202      	movs	r2, #2
 8082130:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 8082132:	68eb      	ldr	r3, [r5, #12]
 8082134:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082136:	68ab      	ldr	r3, [r5, #8]
 8082138:	60a3      	str	r3, [r4, #8]
	}
    }
 808213a:	4620      	mov	r0, r4
 808213c:	bd38      	pop	{r3, r4, r5, pc}
	...

08082140 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 8082140:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 8082144:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8082148:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 808214a:	f04f 0002 	mov.w	r0, #2
 808214e:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082150:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8082154:	808b      	strh	r3, [r1, #4]
 8082156:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082158:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 808215a:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 808215e:	600b      	str	r3, [r1, #0]
 8082160:	e8d4 1f4f 	ldrexb	r1, [r4]
 8082164:	4299      	cmp	r1, r3
 8082166:	d103      	bne.n	8082170 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 8082168:	e8c4 0f45 	strexb	r5, r0, [r4]
 808216c:	2d00      	cmp	r5, #0
 808216e:	d1f7      	bne.n	8082160 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 8082170:	d002      	beq.n	8082178 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 8082172:	f88d 1000 	strb.w	r1, [sp]
 8082176:	e06b      	b.n	8082250 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8082178:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808217c:	bf1c      	itt	ne
 808217e:	60e7      	strne	r7, [r4, #12]
 8082180:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8082182:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 8082186:	bf18      	it	ne
 8082188:	461f      	movne	r7, r3
 808218a:	2301      	movs	r3, #1
 808218c:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808218e:	f3bf 8f5f 	dmb	sy
 8082192:	f104 0308 	add.w	r3, r4, #8
 8082196:	2000      	movs	r0, #0
 8082198:	e853 6f00 	ldrex	r6, [r3]
 808219c:	e843 0200 	strex	r2, r0, [r3]
 80821a0:	2a00      	cmp	r2, #0
 80821a2:	d1f9      	bne.n	8082198 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80821a4:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80821a8:	2e00      	cmp	r6, #0
 80821aa:	d051      	beq.n	8082250 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80821ac:	f7ff fc8a 	bl	8081ac4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80821b0:	b120      	cbz	r0, 80821bc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80821b2:	4629      	mov	r1, r5
 80821b4:	4630      	mov	r0, r6
 80821b6:	f7ff ff93 	bl	80820e0 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80821ba:	e043      	b.n	8082244 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80821bc:	4631      	mov	r1, r6
 80821be:	4668      	mov	r0, sp
 80821c0:	f7ff ffae 	bl	8082120 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80821c4:	68e0      	ldr	r0, [r4, #12]
 80821c6:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80821ca:	b108      	cbz	r0, 80821d0 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80821cc:	f002 fc5a 	bl	8084a84 <strdup>
 80821d0:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80821d2:	2010      	movs	r0, #16
 80821d4:	f8ad 5014 	strh.w	r5, [sp, #20]
 80821d8:	f7fd ff5f 	bl	808009a <_Znwj>
 80821dc:	4605      	mov	r5, r0
 80821de:	b330      	cbz	r0, 808222e <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80821e0:	f04f 0800 	mov.w	r8, #0
 80821e4:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80821e8:	2018      	movs	r0, #24
 80821ea:	f7fd ff56 	bl	808009a <_Znwj>
 80821ee:	4604      	mov	r4, r0
 80821f0:	b1c0      	cbz	r0, 8082224 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80821f2:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80821f6:	4601      	mov	r1, r0
 80821f8:	4668      	mov	r0, sp
 80821fa:	f7ff ff61 	bl	80820c0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80821fe:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 8082200:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 8082202:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082204:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8082206:	9202      	str	r2, [sp, #8]
 8082208:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 808220a:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808220c:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8082210:	9203      	str	r2, [sp, #12]
 8082212:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8082214:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8082218:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808221c:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 808221e:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082222:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082224:	4b0d      	ldr	r3, [pc, #52]	; (808225c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082226:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082228:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 808222a:	4b0d      	ldr	r3, [pc, #52]	; (8082260 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 808222c:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808222e:	9804      	ldr	r0, [sp, #16]
 8082230:	f7ff fd2c 	bl	8081c8c <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082234:	4668      	mov	r0, sp
 8082236:	f7ff feb9 	bl	8081fac <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808223a:	2200      	movs	r2, #0
 808223c:	4629      	mov	r1, r5
 808223e:	4809      	ldr	r0, [pc, #36]	; (8082264 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 8082240:	f7ff fc48 	bl	8081ad4 <application_thread_invoke>
 8082244:	4630      	mov	r0, r6
 8082246:	f7ff feb1 	bl	8081fac <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808224a:	4630      	mov	r0, r6
 808224c:	f7fd ff27 	bl	808009e <_ZdlPv>
 8082250:	4638      	mov	r0, r7
 8082252:	f7ff fd1b 	bl	8081c8c <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 8082256:	b006      	add	sp, #24
 8082258:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 808225c:	080820f3 	.word	0x080820f3
 8082260:	08082351 	.word	0x08082351
 8082264:	08081d03 	.word	0x08081d03

08082268 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 808226c:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808226e:	ad07      	add	r5, sp, #28
 8082270:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082274:	4606      	mov	r6, r0
 8082276:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8082278:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808227a:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 808227c:	460f      	mov	r7, r1
 808227e:	4690      	mov	r8, r2
 8082280:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8082284:	f8c5 b004 	str.w	fp, [r5, #4]
 8082288:	f8c5 b008 	str.w	fp, [r5, #8]
 808228c:	9307      	str	r3, [sp, #28]
 808228e:	f7fd ff04 	bl	808009a <_Znwj>
 8082292:	4604      	mov	r4, r0
 8082294:	b138      	cbz	r0, 80822a6 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8082296:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 808229a:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808229e:	f8c0 b004 	str.w	fp, [r0, #4]
 80822a2:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80822a6:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80822a8:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80822aa:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80822ac:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80822ae:	f7fd fef4 	bl	808009a <_Znwj>
 80822b2:	b128      	cbz	r0, 80822c0 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80822b4:	2301      	movs	r3, #1
 80822b6:	6043      	str	r3, [r0, #4]
 80822b8:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80822ba:	4b23      	ldr	r3, [pc, #140]	; (8082348 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80822bc:	60c4      	str	r4, [r0, #12]
 80822be:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80822c0:	4b22      	ldr	r3, [pc, #136]	; (808234c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80822c2:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80822c4:	2008      	movs	r0, #8
 80822c6:	9308      	str	r3, [sp, #32]
 80822c8:	f7fd fee7 	bl	808009a <_Znwj>
 80822cc:	4604      	mov	r4, r0
 80822ce:	b128      	cbz	r0, 80822dc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80822d0:	9b03      	ldr	r3, [sp, #12]
 80822d2:	a904      	add	r1, sp, #16
 80822d4:	f840 3b04 	str.w	r3, [r0], #4
 80822d8:	f7ff fece 	bl	8082078 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80822dc:	9500      	str	r5, [sp, #0]
 80822de:	fa5f f38a 	uxtb.w	r3, sl
 80822e2:	464a      	mov	r2, r9
 80822e4:	4641      	mov	r1, r8
 80822e6:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80822e8:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80822ea:	f7ff fc4f 	bl	8081b8c <spark_send_event>
 80822ee:	b9b8      	cbnz	r0, 8082320 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80822f0:	9b03      	ldr	r3, [sp, #12]
 80822f2:	785b      	ldrb	r3, [r3, #1]
 80822f4:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80822f8:	b993      	cbnz	r3, 8082320 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80822fa:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80822fe:	a905      	add	r1, sp, #20
 8082300:	a803      	add	r0, sp, #12
 8082302:	9205      	str	r2, [sp, #20]
 8082304:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082308:	f7ff ff1a 	bl	8082140 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808230c:	9805      	ldr	r0, [sp, #20]
 808230e:	f7ff fcbd 	bl	8081c8c <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 8082312:	a805      	add	r0, sp, #20
 8082314:	9909      	ldr	r1, [sp, #36]	; 0x24
 8082316:	f7ff feb6 	bl	8082086 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 808231a:	a806      	add	r0, sp, #24
 808231c:	f7fe f8c4 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8082320:	9b03      	ldr	r3, [sp, #12]
 8082322:	a904      	add	r1, sp, #16
 8082324:	a806      	add	r0, sp, #24
 8082326:	9305      	str	r3, [sp, #20]
 8082328:	f7ff fea6 	bl	8082078 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 808232c:	a905      	add	r1, sp, #20
 808232e:	4630      	mov	r0, r6
 8082330:	f7ff fe91 	bl	8082056 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082334:	a806      	add	r0, sp, #24
 8082336:	f7fe f8b7 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808233a:	a804      	add	r0, sp, #16
 808233c:	f7fe f8b4 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 8082340:	4630      	mov	r0, r6
 8082342:	b00b      	add	sp, #44	; 0x2c
 8082344:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082348:	08085728 	.word	0x08085728
 808234c:	080824b9 	.word	0x080824b9

08082350 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 8082350:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8082352:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082354:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8082356:	d006      	beq.n	8082366 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8082358:	2a03      	cmp	r2, #3
 808235a:	d017      	beq.n	808238c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 808235c:	2a01      	cmp	r2, #1
 808235e:	d120      	bne.n	80823a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082360:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8082362:	6003      	str	r3, [r0, #0]
	      break;
 8082364:	e01d      	b.n	80823a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082366:	2018      	movs	r0, #24
 8082368:	680e      	ldr	r6, [r1, #0]
 808236a:	f7fd fe96 	bl	808009a <_Znwj>
 808236e:	4605      	mov	r5, r0
 8082370:	b150      	cbz	r0, 8082388 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 8082372:	4631      	mov	r1, r6
 8082374:	f7ff fed4 	bl	8082120 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8082378:	6930      	ldr	r0, [r6, #16]
 808237a:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808237e:	b108      	cbz	r0, 8082384 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 8082380:	f002 fb80 	bl	8084a84 <strdup>
 8082384:	6128      	str	r0, [r5, #16]
 8082386:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082388:	6025      	str	r5, [r4, #0]
 808238a:	e00a      	b.n	80823a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808238c:	6804      	ldr	r4, [r0, #0]
 808238e:	b144      	cbz	r4, 80823a2 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8082390:	6920      	ldr	r0, [r4, #16]
 8082392:	f7ff fc7b 	bl	8081c8c <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082396:	4620      	mov	r0, r4
 8082398:	f7ff fe08 	bl	8081fac <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 808239c:	4620      	mov	r0, r4
 808239e:	f7fd fe7e 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 80823a2:	2000      	movs	r0, #0
 80823a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080823a6 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80823a6:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80823a8:	2300      	movs	r3, #0
 80823aa:	6083      	str	r3, [r0, #8]
 80823ac:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80823ae:	4604      	mov	r4, r0
 80823b0:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80823b2:	b12b      	cbz	r3, 80823c0 <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80823b4:	2202      	movs	r2, #2
 80823b6:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80823b8:	68eb      	ldr	r3, [r5, #12]
 80823ba:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80823bc:	68ab      	ldr	r3, [r5, #8]
 80823be:	60a3      	str	r3, [r4, #8]
	}
    }
 80823c0:	4620      	mov	r0, r4
 80823c2:	bd38      	pop	{r3, r4, r5, pc}

080823c4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80823c4:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80823c6:	b570      	push	{r4, r5, r6, lr}
 80823c8:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80823ca:	d006      	beq.n	80823da <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80823cc:	2a03      	cmp	r2, #3
 80823ce:	d011      	beq.n	80823f4 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80823d0:	2a01      	cmp	r2, #1
 80823d2:	d117      	bne.n	8082404 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80823d4:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80823d6:	6003      	str	r3, [r0, #0]
	      break;
 80823d8:	e014      	b.n	8082404 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80823da:	2014      	movs	r0, #20
 80823dc:	680e      	ldr	r6, [r1, #0]
 80823de:	f7fd fe5c 	bl	808009a <_Znwj>
 80823e2:	4605      	mov	r5, r0
 80823e4:	b120      	cbz	r0, 80823f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80823e6:	4631      	mov	r1, r6
 80823e8:	f7ff ffdd 	bl	80823a6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80823ec:	7c33      	ldrb	r3, [r6, #16]
 80823ee:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80823f0:	6025      	str	r5, [r4, #0]
 80823f2:	e007      	b.n	8082404 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80823f4:	6804      	ldr	r4, [r0, #0]
 80823f6:	b12c      	cbz	r4, 8082404 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80823f8:	4620      	mov	r0, r4
 80823fa:	f7ff fdd7 	bl	8081fac <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80823fe:	4620      	mov	r0, r4
 8082400:	f7fd fe4d 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082404:	2000      	movs	r0, #0
 8082406:	bd70      	pop	{r4, r5, r6, pc}

08082408 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8082408:	b5f0      	push	{r4, r5, r6, r7, lr}
 808240a:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808240c:	f3bf 8f5f 	dmb	sy
 8082410:	b087      	sub	sp, #28
 8082412:	2300      	movs	r3, #0
 8082414:	e850 6f00 	ldrex	r6, [r0]
 8082418:	e840 3200 	strex	r2, r3, [r0]
 808241c:	2a00      	cmp	r2, #0
 808241e:	d1f9      	bne.n	8082414 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 8082420:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082424:	2e00      	cmp	r6, #0
 8082426:	d03e      	beq.n	80824a6 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8082428:	4618      	mov	r0, r3
 808242a:	f7ff fb4b 	bl	8081ac4 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808242e:	4607      	mov	r7, r0
 8082430:	b120      	cbz	r0, 808243c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 8082432:	4621      	mov	r1, r4
 8082434:	4630      	mov	r0, r6
 8082436:	f7ff fe63 	bl	8082100 <_ZNKSt8functionIFvRKbEEclES1_>
 808243a:	e02e      	b.n	808249a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 808243c:	4631      	mov	r1, r6
 808243e:	a801      	add	r0, sp, #4
 8082440:	f7ff ffb1 	bl	80823a6 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082444:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082446:	2010      	movs	r0, #16
 8082448:	f88d 3014 	strb.w	r3, [sp, #20]
 808244c:	f7fd fe25 	bl	808009a <_Znwj>
 8082450:	4605      	mov	r5, r0
 8082452:	b1d0      	cbz	r0, 808248a <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082454:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082456:	2014      	movs	r0, #20
 8082458:	f7fd fe1f 	bl	808009a <_Znwj>
 808245c:	4604      	mov	r4, r0
 808245e:	b178      	cbz	r0, 8082480 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082460:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 8082462:	4601      	mov	r1, r0
 8082464:	a801      	add	r0, sp, #4
 8082466:	f7ff fe2b 	bl	80820c0 <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808246a:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 808246c:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808246e:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082470:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 8082472:	9203      	str	r2, [sp, #12]
 8082474:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082476:	60e3      	str	r3, [r4, #12]
 8082478:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808247c:	9204      	str	r2, [sp, #16]
 808247e:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082480:	4b0a      	ldr	r3, [pc, #40]	; (80824ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082482:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082484:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082486:	4b0a      	ldr	r3, [pc, #40]	; (80824b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8082488:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 808248a:	a801      	add	r0, sp, #4
 808248c:	f7ff fd8e 	bl	8081fac <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082490:	2200      	movs	r2, #0
 8082492:	4629      	mov	r1, r5
 8082494:	4807      	ldr	r0, [pc, #28]	; (80824b4 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8082496:	f7ff fb1d 	bl	8081ad4 <application_thread_invoke>
 808249a:	4630      	mov	r0, r6
 808249c:	f7ff fd86 	bl	8081fac <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 80824a0:	4630      	mov	r0, r6
 80824a2:	f7fd fdfc 	bl	808009e <_ZdlPv>
        }
    }
 80824a6:	b007      	add	sp, #28
 80824a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80824aa:	bf00      	nop
 80824ac:	08082113 	.word	0x08082113
 80824b0:	080823c5 	.word	0x080823c5
 80824b4:	08081d03 	.word	0x08081d03

080824b8 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80824b8:	b530      	push	{r4, r5, lr}
 80824ba:	4604      	mov	r4, r0
 80824bc:	b085      	sub	sp, #20
 80824be:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80824c0:	4668      	mov	r0, sp
 80824c2:	4611      	mov	r1, r2
 80824c4:	f7ff fddf 	bl	8082086 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80824c8:	b17c      	cbz	r4, 80824ea <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80824ca:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80824cc:	4628      	mov	r0, r5
 80824ce:	b10d      	cbz	r5, 80824d4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80824d0:	f002 fad8 	bl	8084a84 <strdup>
 80824d4:	9002      	str	r0, [sp, #8]
 80824d6:	a902      	add	r1, sp, #8
 80824d8:	4668      	mov	r0, sp
 80824da:	f8ad 400c 	strh.w	r4, [sp, #12]
 80824de:	f7ff fe2f 	bl	8082140 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80824e2:	9802      	ldr	r0, [sp, #8]
 80824e4:	f7ff fbd2 	bl	8081c8c <free>
 80824e8:	e01d      	b.n	8082526 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80824ea:	f04f 0201 	mov.w	r2, #1
 80824ee:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80824f0:	f88d 4008 	strb.w	r4, [sp, #8]
 80824f4:	e8d0 3f4f 	ldrexb	r3, [r0]
 80824f8:	42a3      	cmp	r3, r4
 80824fa:	d103      	bne.n	8082504 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80824fc:	e8c0 2f41 	strexb	r1, r2, [r0]
 8082500:	2900      	cmp	r1, #0
 8082502:	d1f7      	bne.n	80824f4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8082504:	d002      	beq.n	808250c <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8082506:	f88d 3008 	strb.w	r3, [sp, #8]
 808250a:	e00c      	b.n	8082526 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 808250c:	f110 010c 	adds.w	r1, r0, #12
 8082510:	f04f 0301 	mov.w	r3, #1
 8082514:	bf18      	it	ne
 8082516:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8082518:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 808251c:	3004      	adds	r0, #4
 808251e:	f800 3c03 	strb.w	r3, [r0, #-3]
 8082522:	f7ff ff71 	bl	8082408 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8082526:	a801      	add	r0, sp, #4
 8082528:	f7fd ffbe 	bl	80804a8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 808252c:	b005      	add	sp, #20
 808252e:	bd30      	pop	{r4, r5, pc}

08082530 <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 8082530:	6800      	ldr	r0, [r0, #0]
 8082532:	f000 b8ce 	b.w	80826d2 <_ZN7TwoWire4lockEv>

08082536 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8082536:	b510      	push	{r4, lr}
 8082538:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 808253a:	6001      	str	r1, [r0, #0]
 808253c:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 808253e:	b10a      	cbz	r2, 8082544 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 8082540:	f7ff fff6 	bl	8082530 <_ZN9FuelGauge4lockEv>
    }
}
 8082544:	4620      	mov	r0, r4
 8082546:	bd10      	pop	{r4, pc}

08082548 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8082548:	b538      	push	{r3, r4, r5, lr}
 808254a:	4604      	mov	r4, r0
 808254c:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808254e:	f001 f83b 	bl	80835c8 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 8082552:	462a      	mov	r2, r5
 8082554:	4601      	mov	r1, r0
 8082556:	4620      	mov	r0, r4
 8082558:	f7ff ffed 	bl	8082536 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 808255c:	4620      	mov	r0, r4
 808255e:	bd38      	pop	{r3, r4, r5, pc}

08082560 <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 8082560:	6800      	ldr	r0, [r0, #0]
 8082562:	f000 b8bf 	b.w	80826e4 <_ZN7TwoWire6unlockEv>

08082566 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8082566:	b510      	push	{r4, lr}
{
    if (lock_) {
 8082568:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 808256a:	4604      	mov	r4, r0
{
    if (lock_) {
 808256c:	b10b      	cbz	r3, 8082572 <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808256e:	f7ff fff7 	bl	8082560 <_ZN9FuelGauge6unlockEv>
    }
}
 8082572:	4620      	mov	r0, r4
 8082574:	bd10      	pop	{r4, pc}

08082576 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8082576:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082578:	4604      	mov	r4, r0
 808257a:	460f      	mov	r7, r1
 808257c:	4616      	mov	r6, r2
 808257e:	461d      	mov	r5, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 8082580:	f7ff ffd6 	bl	8082530 <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8082584:	6820      	ldr	r0, [r4, #0]
 8082586:	2136      	movs	r1, #54	; 0x36
 8082588:	f000 f898 	bl	80826bc <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 808258c:	6820      	ldr	r0, [r4, #0]
 808258e:	4639      	mov	r1, r7
 8082590:	6803      	ldr	r3, [r0, #0]
 8082592:	689b      	ldr	r3, [r3, #8]
 8082594:	4798      	blx	r3
    i2c_.endTransmission(true);
 8082596:	2101      	movs	r1, #1
 8082598:	6820      	ldr	r0, [r4, #0]
 808259a:	f000 f892 	bl	80826c2 <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 808259e:	2202      	movs	r2, #2
 80825a0:	2136      	movs	r1, #54	; 0x36
 80825a2:	2301      	movs	r3, #1
 80825a4:	6820      	ldr	r0, [r4, #0]
 80825a6:	f000 f880 	bl	80826aa <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 80825aa:	6820      	ldr	r0, [r4, #0]
 80825ac:	6803      	ldr	r3, [r0, #0]
 80825ae:	695b      	ldr	r3, [r3, #20]
 80825b0:	4798      	blx	r3
 80825b2:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 80825b4:	6820      	ldr	r0, [r4, #0]
 80825b6:	6803      	ldr	r3, [r0, #0]
 80825b8:	695b      	ldr	r3, [r3, #20]
 80825ba:	4798      	blx	r3
 80825bc:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 80825be:	4620      	mov	r0, r4
}
 80825c0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80825c4:	f7ff bfcc 	b.w	8082560 <_ZN9FuelGauge6unlockEv>

080825c8 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 80825c8:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 80825ca:	2200      	movs	r2, #0
	byte LSB = 0;
 80825cc:	ab02      	add	r3, sp, #8
 80825ce:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 80825d2:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 80825d6:	2104      	movs	r1, #4
 80825d8:	f10d 0206 	add.w	r2, sp, #6
 80825dc:	f7ff ffcb 	bl	8082576 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 80825e0:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80825e4:	f001 faf8 	bl	8083bd8 <__aeabi_i2d>
 80825e8:	2200      	movs	r2, #0
 80825ea:	4b08      	ldr	r3, [pc, #32]	; (808260c <_ZN9FuelGauge6getSoCEv+0x44>)
 80825ec:	f001 fb5a 	bl	8083ca4 <__aeabi_dmul>
 80825f0:	f001 fd6a 	bl	80840c8 <__aeabi_d2f>
 80825f4:	4604      	mov	r4, r0
 80825f6:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80825fa:	f001 fe6f 	bl	80842dc <__aeabi_i2f>
 80825fe:	4601      	mov	r1, r0
 8082600:	4620      	mov	r0, r4
 8082602:	f001 fdb7 	bl	8084174 <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8082606:	b002      	add	sp, #8
 8082608:	bd10      	pop	{r4, pc}
 808260a:	bf00      	nop
 808260c:	3f700000 	.word	0x3f700000

08082610 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 8082610:	4770      	bx	lr

08082612 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 8082612:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082614:	4606      	mov	r6, r0
 8082616:	4615      	mov	r5, r2
 8082618:	460c      	mov	r4, r1
 808261a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808261c:	42bc      	cmp	r4, r7
 808261e:	d006      	beq.n	808262e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 8082620:	6833      	ldr	r3, [r6, #0]
 8082622:	f814 1b01 	ldrb.w	r1, [r4], #1
 8082626:	689b      	ldr	r3, [r3, #8]
 8082628:	4630      	mov	r0, r6
 808262a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 808262c:	e7f6      	b.n	808261c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808262e:	4628      	mov	r0, r5
 8082630:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082632 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 8082632:	2200      	movs	r2, #0
 8082634:	7c00      	ldrb	r0, [r0, #16]
 8082636:	f7ff b955 	b.w	80818e4 <HAL_I2C_Write_Data>

0808263a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 808263a:	2100      	movs	r1, #0
 808263c:	7c00      	ldrb	r0, [r0, #16]
 808263e:	f7ff b959 	b.w	80818f4 <HAL_I2C_Available_Data>

08082642 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 8082642:	2100      	movs	r1, #0
 8082644:	7c00      	ldrb	r0, [r0, #16]
 8082646:	f7ff b95d 	b.w	8081904 <HAL_I2C_Read_Data>

0808264a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 808264a:	2100      	movs	r1, #0
 808264c:	7c00      	ldrb	r0, [r0, #16]
 808264e:	f7ff b961 	b.w	8081914 <HAL_I2C_Peek_Data>

08082652 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 8082652:	2100      	movs	r1, #0
 8082654:	7c00      	ldrb	r0, [r0, #16]
 8082656:	f7ff b965 	b.w	8081924 <HAL_I2C_Flush_Data>

0808265a <_ZN7TwoWireD0Ev>:
 808265a:	b510      	push	{r4, lr}
 808265c:	4604      	mov	r4, r0
 808265e:	f7fd fd1e 	bl	808009e <_ZdlPv>
 8082662:	4620      	mov	r0, r4
 8082664:	bd10      	pop	{r4, pc}
	...

08082668 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8082668:	b510      	push	{r4, lr}
 808266a:	4604      	mov	r4, r0
 808266c:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808266e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8082672:	60a3      	str	r3, [r4, #8]
 8082674:	4b04      	ldr	r3, [pc, #16]	; (8082688 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082676:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8082678:	7420      	strb	r0, [r4, #16]
 808267a:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 808267c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808267e:	f7ff f961 	bl	8081944 <HAL_I2C_Init>

}
 8082682:	4620      	mov	r0, r4
 8082684:	bd10      	pop	{r4, pc}
 8082686:	bf00      	nop
 8082688:	08085744 	.word	0x08085744

0808268c <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 808268c:	2300      	movs	r3, #0
 808268e:	461a      	mov	r2, r3
 8082690:	4619      	mov	r1, r3
 8082692:	7c00      	ldrb	r0, [r0, #16]
 8082694:	f7ff b906 	b.w	80818a4 <HAL_I2C_Begin>

08082698 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8082698:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 808269a:	2400      	movs	r4, #0
 808269c:	7c00      	ldrb	r0, [r0, #16]
 808269e:	9400      	str	r4, [sp, #0]
 80826a0:	f7ff f908 	bl	80818b4 <HAL_I2C_Request_Data>
  return result;
}
 80826a4:	b2c0      	uxtb	r0, r0
 80826a6:	b002      	add	sp, #8
 80826a8:	bd10      	pop	{r4, pc}

080826aa <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 80826aa:	b2db      	uxtb	r3, r3
 80826ac:	b2d2      	uxtb	r2, r2
 80826ae:	b2c9      	uxtb	r1, r1
 80826b0:	f7ff bff2 	b.w	8082698 <_ZN7TwoWire11requestFromEhhh>

080826b4 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80826b4:	2200      	movs	r2, #0
 80826b6:	7c00      	ldrb	r0, [r0, #16]
 80826b8:	f7ff b904 	b.w	80818c4 <HAL_I2C_Begin_Transmission>

080826bc <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80826bc:	b2c9      	uxtb	r1, r1
 80826be:	f7ff bff9 	b.w	80826b4 <_ZN7TwoWire17beginTransmissionEh>

080826c2 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80826c2:	2200      	movs	r2, #0
 80826c4:	7c00      	ldrb	r0, [r0, #16]
 80826c6:	f7ff b905 	b.w	80818d4 <HAL_I2C_End_Transmission>

080826ca <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80826ca:	2100      	movs	r1, #0
 80826cc:	7c00      	ldrb	r0, [r0, #16]
 80826ce:	f7ff b931 	b.w	8081934 <HAL_I2C_Is_Enabled>

080826d2 <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80826d2:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 80826d4:	2100      	movs	r1, #0
 80826d6:	7c00      	ldrb	r0, [r0, #16]
 80826d8:	f7ff f93c 	bl	8081954 <HAL_I2C_Acquire>
}
 80826dc:	fab0 f080 	clz	r0, r0
 80826e0:	0940      	lsrs	r0, r0, #5
 80826e2:	bd08      	pop	{r3, pc}

080826e4 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80826e4:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 80826e6:	2100      	movs	r1, #0
 80826e8:	7c00      	ldrb	r0, [r0, #16]
 80826ea:	f7ff f93b 	bl	8081964 <HAL_I2C_Release>
}
 80826ee:	fab0 f080 	clz	r0, r0
 80826f2:	0940      	lsrs	r0, r0, #5
 80826f4:	bd08      	pop	{r3, pc}

080826f6 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80826f6:	4700      	bx	r0

080826f8 <_Z15attachInterrupttPFvvE13InterruptModeah>:
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 80826f8:	2807      	cmp	r0, #7
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80826fa:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80826fe:	4605      	mov	r5, r0
 8082700:	460f      	mov	r7, r1
 8082702:	4690      	mov	r8, r2
 8082704:	461e      	mov	r6, r3
 8082706:	f04f 0400 	mov.w	r4, #0
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 808270a:	d019      	beq.n	8082740 <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>
#endif
    HAL_Interrupts_Detach(pin);
 808270c:	f7ff f8aa 	bl	8081864 <HAL_Interrupts_Detach>
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 8082710:	42a6      	cmp	r6, r4
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082712:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 8082716:	9403      	str	r4, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082718:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 808271c:	bfa2      	ittt	ge
 808271e:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    return &extra;
 8082722:	ac03      	addge	r4, sp, #12
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8082724:	f88d 300e 	strbge.w	r3, [sp, #14]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 8082728:	4628      	mov	r0, r5
 808272a:	9400      	str	r4, [sp, #0]
 808272c:	4643      	mov	r3, r8
 808272e:	463a      	mov	r2, r7
 8082730:	4905      	ldr	r1, [pc, #20]	; (8082748 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 8082732:	bfa8      	it	ge
 8082734:	f88d 600d 	strbge.w	r6, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 8082738:	f7ff f88c 	bl	8081854 <HAL_Interrupts_Attach>
    return true;
 808273c:	2001      	movs	r0, #1
 808273e:	e000      	b.n	8082742 <_Z15attachInterrupttPFvvE13InterruptModeah+0x4a>
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 8082740:	4620      	mov	r0, r4
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
    return true;
}
 8082742:	b004      	add	sp, #16
 8082744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082748:	080826f7 	.word	0x080826f7

0808274c <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 808274c:	f7ff b89a 	b.w	8081884 <HAL_Interrupts_Disable_All>

08082750 <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 8082750:	f7ff b890 	b.w	8081874 <HAL_Interrupts_Enable_All>

08082754 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082754:	4770      	bx	lr

08082756 <_ZN9IPAddressD0Ev>:
 8082756:	b510      	push	{r4, lr}
 8082758:	4604      	mov	r4, r0
 808275a:	f7fd fca0 	bl	808009e <_ZdlPv>
 808275e:	4620      	mov	r0, r4
 8082760:	bd10      	pop	{r4, pc}

08082762 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 8082762:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082764:	460f      	mov	r7, r1
 8082766:	f100 0608 	add.w	r6, r0, #8
 808276a:	1d05      	adds	r5, r0, #4
 808276c:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808276e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8082772:	220a      	movs	r2, #10
 8082774:	4638      	mov	r0, r7
 8082776:	f000 fad4 	bl	8082d22 <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808277a:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808277c:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808277e:	d007      	beq.n	8082790 <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 8082780:	2c00      	cmp	r4, #0
 8082782:	d0f4      	beq.n	808276e <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082784:	212e      	movs	r1, #46	; 0x2e
 8082786:	4638      	mov	r0, r7
 8082788:	f000 fa88 	bl	8082c9c <_ZN5Print5printEc>
 808278c:	4404      	add	r4, r0
 808278e:	e7ee      	b.n	808276e <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 8082790:	4620      	mov	r0, r4
 8082792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082794 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8082794:	4a02      	ldr	r2, [pc, #8]	; (80827a0 <_ZN9IPAddressC1Ev+0xc>)
 8082796:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082798:	2200      	movs	r2, #0
 808279a:	6042      	str	r2, [r0, #4]
{
    clear();
}
 808279c:	4770      	bx	lr
 808279e:	bf00      	nop
 80827a0:	0808576c 	.word	0x0808576c

080827a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80827a4:	4a02      	ldr	r2, [pc, #8]	; (80827b0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80827a6:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 80827a8:	680a      	ldr	r2, [r1, #0]
 80827aa:	6042      	str	r2, [r0, #4]
}
 80827ac:	4770      	bx	lr
 80827ae:	bf00      	nop
 80827b0:	0808576c 	.word	0x0808576c

080827b4 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80827b4:	4a01      	ldr	r2, [pc, #4]	; (80827bc <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80827b6:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80827b8:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 80827ba:	4770      	bx	lr
 80827bc:	0808576c 	.word	0x0808576c

080827c0 <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80827c0:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80827c2:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80827c6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80827ca:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80827ce:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80827d2:	6041      	str	r1, [r0, #4]
 80827d4:	bd10      	pop	{r4, pc}
	...

080827d8 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80827d8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80827da:	4d04      	ldr	r5, [pc, #16]	; (80827ec <_ZN9IPAddressC1Ehhhh+0x14>)
 80827dc:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80827de:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80827e2:	9500      	str	r5, [sp, #0]
 80827e4:	f7ff ffec 	bl	80827c0 <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80827e8:	b003      	add	sp, #12
 80827ea:	bd30      	pop	{r4, r5, pc}
 80827ec:	0808576c 	.word	0x0808576c

080827f0 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80827f0:	4a01      	ldr	r2, [pc, #4]	; (80827f8 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80827f2:	4b02      	ldr	r3, [pc, #8]	; (80827fc <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80827f4:	601a      	str	r2, [r3, #0]
 80827f6:	4770      	bx	lr
 80827f8:	0808582d 	.word	0x0808582d
 80827fc:	200006c4 	.word	0x200006c4

08082800 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 8082800:	2300      	movs	r3, #0
 8082802:	461a      	mov	r2, r3
 8082804:	6840      	ldr	r0, [r0, #4]
 8082806:	f7ff b9e9 	b.w	8081bdc <network_connect>

0808280a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 808280a:	2200      	movs	r2, #0
 808280c:	2102      	movs	r1, #2
 808280e:	6840      	ldr	r0, [r0, #4]
 8082810:	f7ff b9f4 	b.w	8081bfc <network_disconnect>

08082814 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8082814:	2200      	movs	r2, #0
 8082816:	4611      	mov	r1, r2
 8082818:	6840      	ldr	r0, [r0, #4]
 808281a:	f7ff b9e7 	b.w	8081bec <network_connecting>

0808281e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808281e:	2200      	movs	r2, #0
 8082820:	4611      	mov	r1, r2
 8082822:	6840      	ldr	r0, [r0, #4]
 8082824:	f7ff b9f2 	b.w	8081c0c <network_ready>

08082828 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8082828:	2300      	movs	r3, #0
 808282a:	461a      	mov	r2, r3
 808282c:	4619      	mov	r1, r3
 808282e:	6840      	ldr	r0, [r0, #4]
 8082830:	f7ff b9f4 	b.w	8081c1c <network_on>

08082834 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8082834:	2300      	movs	r3, #0
 8082836:	461a      	mov	r2, r3
 8082838:	4619      	mov	r1, r3
 808283a:	6840      	ldr	r0, [r0, #4]
 808283c:	f7ff b9f6 	b.w	8081c2c <network_off>

08082840 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 8082840:	2200      	movs	r2, #0
 8082842:	f081 0101 	eor.w	r1, r1, #1
 8082846:	6840      	ldr	r0, [r0, #4]
 8082848:	f7ff b9f8 	b.w	8081c3c <network_listen>

0808284c <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 808284c:	2200      	movs	r2, #0
 808284e:	6840      	ldr	r0, [r0, #4]
 8082850:	f7ff ba04 	b.w	8081c5c <network_set_listen_timeout>

08082854 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082854:	2200      	movs	r2, #0
 8082856:	4611      	mov	r1, r2
 8082858:	6840      	ldr	r0, [r0, #4]
 808285a:	f7ff ba07 	b.w	8081c6c <network_get_listen_timeout>

0808285e <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808285e:	2200      	movs	r2, #0
 8082860:	4611      	mov	r1, r2
 8082862:	6840      	ldr	r0, [r0, #4]
 8082864:	f7ff b9f2 	b.w	8081c4c <network_listening>

08082868 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8082868:	b5f0      	push	{r4, r5, r6, r7, lr}
 808286a:	4617      	mov	r7, r2
 808286c:	b087      	sub	sp, #28
 808286e:	4605      	mov	r5, r0
    IPAddress addr;
 8082870:	a804      	add	r0, sp, #16
 8082872:	f7ff ff8f 	bl	8082794 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082876:	2600      	movs	r6, #0
 8082878:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808287a:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 808287c:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082880:	f002 f91b 	bl	8084aba <strlen>
 8082884:	4b0a      	ldr	r3, [pc, #40]	; (80828b0 <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8082886:	9600      	str	r6, [sp, #0]
 8082888:	b281      	uxth	r1, r0
 808288a:	685b      	ldr	r3, [r3, #4]
 808288c:	4622      	mov	r2, r4
 808288e:	4638      	mov	r0, r7
 8082890:	f7fe ff30 	bl	80816f4 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082894:	b120      	cbz	r0, 80828a0 <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8082896:	4631      	mov	r1, r6
 8082898:	4628      	mov	r0, r5
 808289a:	f7ff ff8b 	bl	80827b4 <_ZN9IPAddressC1Em>
 808289e:	e003      	b.n	80828a8 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 80828a0:	4621      	mov	r1, r4
 80828a2:	4628      	mov	r0, r5
 80828a4:	f7ff ff7e 	bl	80827a4 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80828a8:	4628      	mov	r0, r5
 80828aa:	b007      	add	sp, #28
 80828ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80828ae:	bf00      	nop
 80828b0:	20000668 	.word	0x20000668

080828b4 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80828b4:	4b02      	ldr	r3, [pc, #8]	; (80828c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80828b6:	4a03      	ldr	r2, [pc, #12]	; (80828c4 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80828b8:	601a      	str	r2, [r3, #0]
 80828ba:	2200      	movs	r2, #0
 80828bc:	605a      	str	r2, [r3, #4]
 80828be:	4770      	bx	lr
 80828c0:	200006c8 	.word	0x200006c8
 80828c4:	08085860 	.word	0x08085860

080828c8 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 80828c8:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80828ca:	f000 fe7d 	bl	80835c8 <_Z20__fetch_global_Wire3v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
 80828ce:	f7ff fefc 	bl	80826ca <_ZN7TwoWire9isEnabledEv>
 80828d2:	b918      	cbnz	r0, 80828dc <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80828d4:	f000 fe78 	bl	80835c8 <_Z20__fetch_global_Wire3v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
 80828d8:	f7ff fed8 	bl	808268c <_ZN7TwoWire5beginEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80828dc:	f000 fe74 	bl	80835c8 <_Z20__fetch_global_Wire3v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
 80828e0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
 80828e4:	f7ff bef1 	b.w	80826ca <_ZN7TwoWire9isEnabledEv>

080828e8 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 80828e8:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80828ea:	f000 fe6d 	bl	80835c8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 80828ee:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 80828f2:	f7ff beee 	b.w	80826d2 <_ZN7TwoWire4lockEv>

080828f6 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 80828f6:	b510      	push	{r4, lr}
 80828f8:	4604      	mov	r4, r0
    lock_(_lock)
 80828fa:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 80828fc:	b109      	cbz	r1, 8082902 <_ZN4PMICC1Eb+0xc>
        lock();
 80828fe:	f7ff fff3 	bl	80828e8 <_ZN4PMIC4lockEv>
    }
}
 8082902:	4620      	mov	r0, r4
 8082904:	bd10      	pop	{r4, pc}

08082906 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 8082906:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082908:	f000 fe5e 	bl	80835c8 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 808290c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 8082910:	f7ff bee8 	b.w	80826e4 <_ZN7TwoWire6unlockEv>

08082914 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8082914:	b510      	push	{r4, lr}
{
    if (lock_) {
 8082916:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8082918:	4604      	mov	r4, r0
{
    if (lock_) {
 808291a:	b10b      	cbz	r3, 8082920 <_ZN4PMICD1Ev+0xc>
        unlock();
 808291c:	f7ff fff3 	bl	8082906 <_ZN4PMIC6unlockEv>
    }
}
 8082920:	4620      	mov	r0, r4
 8082922:	bd10      	pop	{r4, pc}

08082924 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8082924:	b510      	push	{r4, lr}
 8082926:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8082928:	6800      	ldr	r0, [r0, #0]
 808292a:	f7ff ffec 	bl	8082906 <_ZN4PMIC6unlockEv>
 808292e:	4620      	mov	r0, r4
 8082930:	bd10      	pop	{r4, pc}

08082932 <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 8082932:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082934:	ac02      	add	r4, sp, #8
 8082936:	460d      	mov	r5, r1
 8082938:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808293c:	f7ff ffd4 	bl	80828e8 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082940:	f000 fe42 	bl	80835c8 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8082944:	216b      	movs	r1, #107	; 0x6b
 8082946:	f7ff feb9 	bl	80826bc <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808294a:	f000 fe3d 	bl	80835c8 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 808294e:	6803      	ldr	r3, [r0, #0]
 8082950:	4629      	mov	r1, r5
 8082952:	689b      	ldr	r3, [r3, #8]
 8082954:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082956:	f000 fe37 	bl	80835c8 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 808295a:	2101      	movs	r1, #1
 808295c:	f7ff feb1 	bl	80826c2 <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082960:	f000 fe32 	bl	80835c8 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 8082964:	2301      	movs	r3, #1
 8082966:	461a      	mov	r2, r3
 8082968:	216b      	movs	r1, #107	; 0x6b
 808296a:	f7ff fe9e 	bl	80826aa <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808296e:	f000 fe2b 	bl	80835c8 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 8082972:	6803      	ldr	r3, [r0, #0]
 8082974:	695b      	ldr	r3, [r3, #20]
 8082976:	4798      	blx	r3
 8082978:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 808297a:	4620      	mov	r0, r4
 808297c:	f7ff ffd2 	bl	8082924 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 8082980:	b2e8      	uxtb	r0, r5
 8082982:	b003      	add	sp, #12
 8082984:	bd30      	pop	{r4, r5, pc}

08082986 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 8082986:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082988:	ac02      	add	r4, sp, #8
 808298a:	4615      	mov	r5, r2
 808298c:	460e      	mov	r6, r1
 808298e:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8082992:	f7ff ffa9 	bl	80828e8 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082996:	f000 fe17 	bl	80835c8 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 808299a:	216b      	movs	r1, #107	; 0x6b
 808299c:	f7ff fe8e 	bl	80826bc <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80829a0:	f000 fe12 	bl	80835c8 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 80829a4:	6803      	ldr	r3, [r0, #0]
 80829a6:	4631      	mov	r1, r6
 80829a8:	689b      	ldr	r3, [r3, #8]
 80829aa:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80829ac:	f000 fe0c 	bl	80835c8 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 80829b0:	6803      	ldr	r3, [r0, #0]
 80829b2:	4629      	mov	r1, r5
 80829b4:	689b      	ldr	r3, [r3, #8]
 80829b6:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80829b8:	f000 fe06 	bl	80835c8 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 80829bc:	2101      	movs	r1, #1
 80829be:	f7ff fe80 	bl	80826c2 <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 80829c2:	4620      	mov	r0, r4
 80829c4:	f7ff ffae 	bl	8082924 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 80829c8:	b002      	add	sp, #8
 80829ca:	bd70      	pop	{r4, r5, r6, pc}

080829cc <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
 80829cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80829ce:	4604      	mov	r4, r0
 80829d0:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80829d2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80829d4:	f7ff ff88 	bl	80828e8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 80829d8:	2100      	movs	r1, #0
 80829da:	4620      	mov	r0, r4
 80829dc:	f7ff ffa9 	bl	8082932 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 80829e0:	f241 1358 	movw	r3, #4440	; 0x1158
 80829e4:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
 80829e6:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
 80829ea:	d05b      	beq.n	8082aa4 <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
 80829ec:	d820      	bhi.n	8082a30 <_ZN4PMIC20setInputVoltageLimitEt+0x64>
 80829ee:	f241 0318 	movw	r3, #4120	; 0x1018
 80829f2:	429d      	cmp	r5, r3
 80829f4:	d04d      	beq.n	8082a92 <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
 80829f6:	d80c      	bhi.n	8082a12 <_ZN4PMIC20setInputVoltageLimitEt+0x46>
 80829f8:	f640 7378 	movw	r3, #3960	; 0xf78
 80829fc:	429d      	cmp	r5, r3
 80829fe:	d042      	beq.n	8082a86 <_ZN4PMIC20setInputVoltageLimitEt+0xba>
 8082a00:	f640 73c8 	movw	r3, #4040	; 0xfc8
 8082a04:	429d      	cmp	r5, r3
 8082a06:	d041      	beq.n	8082a8c <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
 8082a08:	f640 7328 	movw	r3, #3880	; 0xf28
 8082a0c:	429d      	cmp	r5, r3
 8082a0e:	d160      	bne.n	8082ad2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
 8082a10:	e059      	b.n	8082ac6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
 8082a12:	f241 03b8 	movw	r3, #4280	; 0x10b8
 8082a16:	429d      	cmp	r5, r3
 8082a18:	d03e      	beq.n	8082a98 <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
 8082a1a:	f241 1308 	movw	r3, #4360	; 0x1108
 8082a1e:	429d      	cmp	r5, r3
 8082a20:	d03d      	beq.n	8082a9e <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
 8082a22:	f241 0368 	movw	r3, #4200	; 0x1068
 8082a26:	429d      	cmp	r5, r3
 8082a28:	d153      	bne.n	8082ad2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
 8082a2a:	f042 0220 	orr.w	r2, r2, #32
 8082a2e:	e04a      	b.n	8082ac6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8082a30:	f241 2398 	movw	r3, #4760	; 0x1298
 8082a34:	429d      	cmp	r5, r3
 8082a36:	d03e      	beq.n	8082ab6 <_ZN4PMIC20setInputVoltageLimitEt+0xea>
 8082a38:	d80e      	bhi.n	8082a58 <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
 8082a3a:	f241 13f8 	movw	r3, #4600	; 0x11f8
 8082a3e:	429d      	cmp	r5, r3
 8082a40:	d033      	beq.n	8082aaa <_ZN4PMIC20setInputVoltageLimitEt+0xde>
 8082a42:	f241 2348 	movw	r3, #4680	; 0x1248
 8082a46:	429d      	cmp	r5, r3
 8082a48:	d032      	beq.n	8082ab0 <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
 8082a4a:	f241 13a8 	movw	r3, #4520	; 0x11a8
 8082a4e:	429d      	cmp	r5, r3
 8082a50:	d13f      	bne.n	8082ad2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
 8082a52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8082a56:	e036      	b.n	8082ac6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8082a58:	f241 3338 	movw	r3, #4920	; 0x1338
 8082a5c:	429d      	cmp	r5, r3
 8082a5e:	d02d      	beq.n	8082abc <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
 8082a60:	d806      	bhi.n	8082a70 <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
 8082a62:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8082a66:	429d      	cmp	r5, r3
 8082a68:	d133      	bne.n	8082ad2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
 8082a6a:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8082a6e:	e02a      	b.n	8082ac6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8082a70:	f241 3388 	movw	r3, #5000	; 0x1388
 8082a74:	429d      	cmp	r5, r3
 8082a76:	d024      	beq.n	8082ac2 <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
 8082a78:	f241 33d8 	movw	r3, #5080	; 0x13d8
 8082a7c:	429d      	cmp	r5, r3
 8082a7e:	d128      	bne.n	8082ad2 <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
 8082a80:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8082a84:	e01f      	b.n	8082ac6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
 8082a86:	f042 0208 	orr.w	r2, r2, #8
 8082a8a:	e01c      	b.n	8082ac6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
 8082a8c:	f042 0210 	orr.w	r2, r2, #16
 8082a90:	e019      	b.n	8082ac6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
 8082a92:	f042 0218 	orr.w	r2, r2, #24
 8082a96:	e016      	b.n	8082ac6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
 8082a98:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8082a9c:	e013      	b.n	8082ac6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
 8082a9e:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 8082aa2:	e010      	b.n	8082ac6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
 8082aa4:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 8082aa8:	e00d      	b.n	8082ac6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
 8082aaa:	f042 0248 	orr.w	r2, r2, #72	; 0x48
 8082aae:	e00a      	b.n	8082ac6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
 8082ab0:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8082ab4:	e007      	b.n	8082ac6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
 8082ab6:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 8082aba:	e004      	b.n	8082ac6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
 8082abc:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 8082ac0:	e001      	b.n	8082ac6 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
 8082ac2:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8082ac6:	4620      	mov	r0, r4
 8082ac8:	2100      	movs	r1, #0
 8082aca:	f7ff ff5c 	bl	8082986 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8082ace:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
 8082ad0:	e000      	b.n	8082ad4 <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
 8082ad2:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8082ad4:	a801      	add	r0, sp, #4
 8082ad6:	f7ff ff25 	bl	8082924 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8082ada:	4620      	mov	r0, r4
 8082adc:	b003      	add	sp, #12
 8082ade:	bd30      	pop	{r4, r5, pc}

08082ae0 <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 8082ae0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082ae2:	4604      	mov	r4, r0
 8082ae4:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082ae6:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8082ae8:	f7ff fefe 	bl	80828e8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 8082aec:	2100      	movs	r1, #0
 8082aee:	4620      	mov	r0, r4
 8082af0:	f7ff ff1f 	bl	8082932 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 8082af4:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 8082af8:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 8082afc:	d023      	beq.n	8082b46 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 8082afe:	d807      	bhi.n	8082b10 <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 8082b00:	2d96      	cmp	r5, #150	; 0x96
 8082b02:	d01a      	beq.n	8082b3a <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 8082b04:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8082b08:	d01a      	beq.n	8082b40 <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 8082b0a:	2d64      	cmp	r5, #100	; 0x64
 8082b0c:	d129      	bne.n	8082b62 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 8082b0e:	e022      	b.n	8082b56 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 8082b10:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8082b14:	429d      	cmp	r5, r3
 8082b16:	d019      	beq.n	8082b4c <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 8082b18:	d805      	bhi.n	8082b26 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 8082b1a:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8082b1e:	d120      	bne.n	8082b62 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 8082b20:	f042 0204 	orr.w	r2, r2, #4
 8082b24:	e017      	b.n	8082b56 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 8082b26:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8082b2a:	d012      	beq.n	8082b52 <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 8082b2c:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8082b30:	429d      	cmp	r5, r3
 8082b32:	d116      	bne.n	8082b62 <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 8082b34:	f042 0207 	orr.w	r2, r2, #7
 8082b38:	e00d      	b.n	8082b56 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 8082b3a:	f042 0201 	orr.w	r2, r2, #1
 8082b3e:	e00a      	b.n	8082b56 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 8082b40:	f042 0202 	orr.w	r2, r2, #2
 8082b44:	e007      	b.n	8082b56 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 8082b46:	f042 0203 	orr.w	r2, r2, #3
 8082b4a:	e004      	b.n	8082b56 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 8082b4c:	f042 0205 	orr.w	r2, r2, #5
 8082b50:	e001      	b.n	8082b56 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 8082b52:	f042 0206 	orr.w	r2, r2, #6
 8082b56:	4620      	mov	r0, r4
 8082b58:	2100      	movs	r1, #0
 8082b5a:	f7ff ff14 	bl	8082986 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8082b5e:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 8082b60:	e000      	b.n	8082b64 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 8082b62:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 8082b64:	a801      	add	r0, sp, #4
 8082b66:	f7ff fedd 	bl	8082924 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8082b6a:	4620      	mov	r0, r4
 8082b6c:	b003      	add	sp, #12
 8082b6e:	bd30      	pop	{r4, r5, pc}

08082b70 <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 8082b70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8082b72:	460c      	mov	r4, r1
 8082b74:	4617      	mov	r7, r2
 8082b76:	4605      	mov	r5, r0
 8082b78:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082b7a:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8082b7c:	f7ff feb4 	bl	80828e8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 8082b80:	2c00      	cmp	r4, #0
 8082b82:	bf0c      	ite	eq
 8082b84:	2400      	moveq	r4, #0
 8082b86:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8082b88:	b117      	cbz	r7, 8082b90 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 8082b8a:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8082b8e:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 8082b90:	b10e      	cbz	r6, 8082b96 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 8082b92:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8082b96:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8082b9a:	b10b      	cbz	r3, 8082ba0 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 8082b9c:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 8082ba0:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8082ba4:	b10b      	cbz	r3, 8082baa <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 8082ba6:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8082baa:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8082bae:	b10b      	cbz	r3, 8082bb4 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 8082bb0:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8082bb4:	2102      	movs	r1, #2
 8082bb6:	4628      	mov	r0, r5
 8082bb8:	f7ff febb 	bl	8082932 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8082bbc:	f000 0201 	and.w	r2, r0, #1
 8082bc0:	4322      	orrs	r2, r4
 8082bc2:	2102      	movs	r1, #2
 8082bc4:	4628      	mov	r0, r5
 8082bc6:	f7ff fede 	bl	8082986 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 8082bca:	a801      	add	r0, sp, #4
 8082bcc:	f7ff feaa 	bl	8082924 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 8082bd0:	2001      	movs	r0, #1
 8082bd2:	b003      	add	sp, #12
 8082bd4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082bd6 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8082bd6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082bd8:	4604      	mov	r4, r0
 8082bda:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082bdc:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8082bde:	f7ff fe83 	bl	80828e8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8082be2:	2104      	movs	r1, #4
 8082be4:	4620      	mov	r0, r4
 8082be6:	f7ff fea4 	bl	8082932 <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 8082bea:	f241 0310 	movw	r3, #4112	; 0x1010
 8082bee:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 8082bf0:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 8082bf4:	d006      	beq.n	8082c04 <_ZN4PMIC16setChargeVoltageEt+0x2e>
 8082bf6:	f241 0370 	movw	r3, #4208	; 0x1070
 8082bfa:	429d      	cmp	r5, r3
 8082bfc:	d10a      	bne.n	8082c14 <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8082bfe:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 8082c02:	e001      	b.n	8082c08 <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 8082c04:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8082c08:	4620      	mov	r0, r4
 8082c0a:	2104      	movs	r1, #4
 8082c0c:	f7ff febb 	bl	8082986 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8082c10:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 8082c12:	e000      	b.n	8082c16 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 8082c14:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8082c16:	a801      	add	r0, sp, #4
 8082c18:	f7ff fe84 	bl	8082924 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8082c1c:	4620      	mov	r0, r4
 8082c1e:	b003      	add	sp, #12
 8082c20:	bd30      	pop	{r4, r5, pc}

08082c22 <_ZN4PMIC15disableWatchdogEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
 8082c22:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082c24:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082c26:	ac02      	add	r4, sp, #8
 8082c28:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8082c2c:	f7ff fe5c 	bl	80828e8 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
 8082c30:	2105      	movs	r1, #5
 8082c32:	4628      	mov	r0, r5
 8082c34:	f7ff fe7d 	bl	8082932 <_ZN4PMIC12readRegisterEh>
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
 8082c38:	2105      	movs	r1, #5
 8082c3a:	f000 02ce 	and.w	r2, r0, #206	; 0xce
 8082c3e:	4628      	mov	r0, r5
 8082c40:	f7ff fea1 	bl	8082986 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
    std::lock_guard<PMIC> l(*this);
 8082c44:	4620      	mov	r0, r4
 8082c46:	f7ff fe6d 	bl	8082924 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
    return 1;
}
 8082c4a:	2001      	movs	r0, #1
 8082c4c:	b003      	add	sp, #12
 8082c4e:	bd30      	pop	{r4, r5, pc}

08082c50 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8082c50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082c52:	4606      	mov	r6, r0
 8082c54:	460d      	mov	r5, r1
 8082c56:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8082c58:	2400      	movs	r4, #0
  while (size--) {
 8082c5a:	42bd      	cmp	r5, r7
 8082c5c:	d00c      	beq.n	8082c78 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8082c5e:	6833      	ldr	r3, [r6, #0]
 8082c60:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082c64:	689b      	ldr	r3, [r3, #8]
 8082c66:	4630      	mov	r0, r6
 8082c68:	4798      	blx	r3
     if (chunk>=0)
 8082c6a:	2800      	cmp	r0, #0
 8082c6c:	db01      	blt.n	8082c72 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8082c6e:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8082c70:	e7f3      	b.n	8082c5a <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8082c72:	2c00      	cmp	r4, #0
 8082c74:	bf08      	it	eq
 8082c76:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8082c78:	4620      	mov	r0, r4
 8082c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082c7c <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8082c7c:	b570      	push	{r4, r5, r6, lr}
 8082c7e:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8082c80:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8082c82:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8082c84:	b149      	cbz	r1, 8082c9a <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8082c86:	f001 ff18 	bl	8084aba <strlen>
 8082c8a:	682b      	ldr	r3, [r5, #0]
 8082c8c:	4602      	mov	r2, r0
 8082c8e:	4621      	mov	r1, r4
 8082c90:	4628      	mov	r0, r5
    }
 8082c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8082c96:	68db      	ldr	r3, [r3, #12]
 8082c98:	4718      	bx	r3
    }
 8082c9a:	bd70      	pop	{r4, r5, r6, pc}

08082c9c <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082c9c:	6803      	ldr	r3, [r0, #0]
 8082c9e:	689b      	ldr	r3, [r3, #8]
 8082ca0:	4718      	bx	r3

08082ca2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8082ca2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8082ca4:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8082ca6:	4605      	mov	r5, r0
  size_t n = print('\r');
 8082ca8:	f7ff fff8 	bl	8082c9c <_ZN5Print5printEc>
  n += print('\n');
 8082cac:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8082cae:	4604      	mov	r4, r0
  n += print('\n');
 8082cb0:	4628      	mov	r0, r5
 8082cb2:	f7ff fff3 	bl	8082c9c <_ZN5Print5printEc>
  return n;
}
 8082cb6:	4420      	add	r0, r4
 8082cb8:	bd38      	pop	{r3, r4, r5, pc}

08082cba <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8082cba:	b538      	push	{r3, r4, r5, lr}
 8082cbc:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8082cbe:	f7ff ffdd 	bl	8082c7c <_ZN5Print5writeEPKc>
 8082cc2:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8082cc4:	4628      	mov	r0, r5
 8082cc6:	f7ff ffec 	bl	8082ca2 <_ZN5Print7printlnEv>
  return n;
}
 8082cca:	4420      	add	r0, r4
 8082ccc:	bd38      	pop	{r3, r4, r5, pc}

08082cce <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8082cce:	2a01      	cmp	r2, #1
 8082cd0:	bf98      	it	ls
 8082cd2:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082cd4:	b530      	push	{r4, r5, lr}
 8082cd6:	460b      	mov	r3, r1
 8082cd8:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8082cda:	2100      	movs	r1, #0
 8082cdc:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8082ce0:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8082ce4:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8082ce8:	fb05 3312 	mls	r3, r5, r2, r3
 8082cec:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082cee:	2b09      	cmp	r3, #9
 8082cf0:	bf94      	ite	ls
 8082cf2:	3330      	addls	r3, #48	; 0x30
 8082cf4:	3337      	addhi	r3, #55	; 0x37
 8082cf6:	b2db      	uxtb	r3, r3
 8082cf8:	4621      	mov	r1, r4
 8082cfa:	f804 3901 	strb.w	r3, [r4], #-1
 8082cfe:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8082d00:	2d00      	cmp	r5, #0
 8082d02:	d1ef      	bne.n	8082ce4 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8082d04:	f7ff ffba 	bl	8082c7c <_ZN5Print5writeEPKc>
}
 8082d08:	b00b      	add	sp, #44	; 0x2c
 8082d0a:	bd30      	pop	{r4, r5, pc}

08082d0c <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8082d0c:	b410      	push	{r4}
  if (base == 0) return write(n);
 8082d0e:	b922      	cbnz	r2, 8082d1a <_ZN5Print5printEmi+0xe>
 8082d10:	6803      	ldr	r3, [r0, #0]
 8082d12:	b2c9      	uxtb	r1, r1
 8082d14:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8082d16:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8082d18:	4718      	bx	r3
  else return printNumber(n, base);
 8082d1a:	b2d2      	uxtb	r2, r2
}
 8082d1c:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8082d1e:	f7ff bfd6 	b.w	8082cce <_ZN5Print11printNumberEmh>

08082d22 <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8082d22:	f7ff bff3 	b.w	8082d0c <_ZN5Print5printEmi>

08082d26 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8082d26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082d2a:	4607      	mov	r7, r0
 8082d2c:	460e      	mov	r6, r1
  if (base == 0) {
 8082d2e:	4615      	mov	r5, r2
 8082d30:	b92a      	cbnz	r2, 8082d3e <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8082d32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8082d36:	6803      	ldr	r3, [r0, #0]
 8082d38:	b2c9      	uxtb	r1, r1
 8082d3a:	689b      	ldr	r3, [r3, #8]
 8082d3c:	4718      	bx	r3
  } else if (base == 10) {
 8082d3e:	2a0a      	cmp	r2, #10
 8082d40:	d102      	bne.n	8082d48 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8082d42:	2900      	cmp	r1, #0
 8082d44:	da01      	bge.n	8082d4a <_ZN5Print5printEli+0x24>
 8082d46:	e004      	b.n	8082d52 <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8082d48:	b2d2      	uxtb	r2, r2
  }
}
 8082d4a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8082d4e:	f7ff bfbe 	b.w	8082cce <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8082d52:	212d      	movs	r1, #45	; 0x2d
 8082d54:	f7ff ffa2 	bl	8082c9c <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8082d58:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8082d5a:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8082d5c:	4271      	negs	r1, r6
 8082d5e:	4638      	mov	r0, r7
 8082d60:	f7ff ffb5 	bl	8082cce <_ZN5Print11printNumberEmh>
 8082d64:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8082d66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082d6a <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8082d6a:	f7ff bfdc 	b.w	8082d26 <_ZN5Print5printEli>

08082d6e <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8082d6e:	b510      	push	{r4, lr}
 8082d70:	4604      	mov	r4, r0
 8082d72:	f7ff f91b 	bl	8081fac <_ZNSt14_Function_baseD1Ev>
 8082d76:	4620      	mov	r0, r4
 8082d78:	bd10      	pop	{r4, pc}
	...

08082d7c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082d7c:	4803      	ldr	r0, [pc, #12]	; (8082d8c <_GLOBAL__sub_I_RGB+0x10>)
 8082d7e:	2300      	movs	r3, #0
 8082d80:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8082d82:	4a03      	ldr	r2, [pc, #12]	; (8082d90 <_GLOBAL__sub_I_RGB+0x14>)
 8082d84:	4903      	ldr	r1, [pc, #12]	; (8082d94 <_GLOBAL__sub_I_RGB+0x18>)
 8082d86:	f000 bc85 	b.w	8083694 <__aeabi_atexit>
 8082d8a:	bf00      	nop
 8082d8c:	200006d0 	.word	0x200006d0
 8082d90:	20000550 	.word	0x20000550
 8082d94:	08082d6f 	.word	0x08082d6f

08082d98 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8082d98:	4770      	bx	lr

08082d9a <_ZN8SPIClassD0Ev>:
 8082d9a:	b510      	push	{r4, lr}
 8082d9c:	4604      	mov	r4, r0
 8082d9e:	f7fd f97e 	bl	808009e <_ZdlPv>
 8082da2:	4620      	mov	r0, r4
 8082da4:	bd10      	pop	{r4, pc}
	...

08082da8 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8082da8:	b570      	push	{r4, r5, r6, lr}
 8082daa:	4604      	mov	r4, r0
 8082dac:	460e      	mov	r6, r1
 8082dae:	4b07      	ldr	r3, [pc, #28]	; (8082dcc <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8082db0:	2500      	movs	r5, #0
 8082db2:	6003      	str	r3, [r0, #0]
 8082db4:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8082db8:	f7fe fcb4 	bl	8081724 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8082dbc:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8082dbe:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8082dc0:	f7fe fdd8 	bl	8081974 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8082dc4:	60a5      	str	r5, [r4, #8]
}
 8082dc6:	4620      	mov	r0, r4
 8082dc8:	bd70      	pop	{r4, r5, r6, pc}
 8082dca:	bf00      	nop
 8082dcc:	08085894 	.word	0x08085894

08082dd0 <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8082dd0:	7900      	ldrb	r0, [r0, #4]
 8082dd2:	f7fe bdd7 	b.w	8081984 <HAL_SPI_Is_Enabled>

08082dd6 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8082dd6:	b510      	push	{r4, lr}
 8082dd8:	4604      	mov	r4, r0
{
	free(buffer);
 8082dda:	6800      	ldr	r0, [r0, #0]
 8082ddc:	f7fe ff56 	bl	8081c8c <free>
}
 8082de0:	4620      	mov	r0, r4
 8082de2:	bd10      	pop	{r4, pc}

08082de4 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8082de4:	b510      	push	{r4, lr}
 8082de6:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8082de8:	6800      	ldr	r0, [r0, #0]
 8082dea:	b108      	cbz	r0, 8082df0 <_ZN6String10invalidateEv+0xc>
 8082dec:	f7fe ff4e 	bl	8081c8c <free>
	buffer = NULL;
 8082df0:	2300      	movs	r3, #0
 8082df2:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8082df4:	60a3      	str	r3, [r4, #8]
 8082df6:	6063      	str	r3, [r4, #4]
 8082df8:	bd10      	pop	{r4, pc}

08082dfa <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8082dfa:	b538      	push	{r3, r4, r5, lr}
 8082dfc:	4604      	mov	r4, r0
 8082dfe:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8082e00:	6800      	ldr	r0, [r0, #0]
 8082e02:	3101      	adds	r1, #1
 8082e04:	f7fe ff4a 	bl	8081c9c <realloc>
	if (newbuffer) {
 8082e08:	b110      	cbz	r0, 8082e10 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8082e0a:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8082e0e:	2001      	movs	r0, #1
	}
	return 0;
}
 8082e10:	bd38      	pop	{r3, r4, r5, pc}

08082e12 <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082e12:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8082e14:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082e16:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8082e18:	b113      	cbz	r3, 8082e20 <_ZN6String7reserveEj+0xe>
 8082e1a:	6843      	ldr	r3, [r0, #4]
 8082e1c:	428b      	cmp	r3, r1
 8082e1e:	d207      	bcs.n	8082e30 <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8082e20:	4620      	mov	r0, r4
 8082e22:	f7ff ffea 	bl	8082dfa <_ZN6String12changeBufferEj>
 8082e26:	b120      	cbz	r0, 8082e32 <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8082e28:	68a3      	ldr	r3, [r4, #8]
 8082e2a:	b90b      	cbnz	r3, 8082e30 <_ZN6String7reserveEj+0x1e>
 8082e2c:	6822      	ldr	r2, [r4, #0]
 8082e2e:	7013      	strb	r3, [r2, #0]
 8082e30:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8082e32:	bd10      	pop	{r4, pc}

08082e34 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082e34:	b570      	push	{r4, r5, r6, lr}
 8082e36:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8082e38:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082e3a:	4604      	mov	r4, r0
 8082e3c:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8082e3e:	f7ff ffe8 	bl	8082e12 <_ZN6String7reserveEj>
 8082e42:	b918      	cbnz	r0, 8082e4c <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8082e44:	4620      	mov	r0, r4
 8082e46:	f7ff ffcd 	bl	8082de4 <_ZN6String10invalidateEv>
		return *this;
 8082e4a:	e009      	b.n	8082e60 <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8082e4c:	462a      	mov	r2, r5
 8082e4e:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8082e50:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8082e52:	6820      	ldr	r0, [r4, #0]
 8082e54:	f001 fdc8 	bl	80849e8 <memcpy>
	buffer[len] = 0;
 8082e58:	6822      	ldr	r2, [r4, #0]
 8082e5a:	68a3      	ldr	r3, [r4, #8]
 8082e5c:	2100      	movs	r1, #0
 8082e5e:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8082e60:	4620      	mov	r0, r4
 8082e62:	bd70      	pop	{r4, r5, r6, pc}

08082e64 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082e64:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082e66:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082e68:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082e6a:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8082e6c:	6043      	str	r3, [r0, #4]
	len = 0;
 8082e6e:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082e70:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8082e72:	460d      	mov	r5, r1
 8082e74:	b139      	cbz	r1, 8082e86 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8082e76:	4608      	mov	r0, r1
 8082e78:	f001 fe1f 	bl	8084aba <strlen>
 8082e7c:	4629      	mov	r1, r5
 8082e7e:	4602      	mov	r2, r0
 8082e80:	4620      	mov	r0, r4
 8082e82:	f7ff ffd7 	bl	8082e34 <_ZN6String4copyEPKcj>
}
 8082e86:	4620      	mov	r0, r4
 8082e88:	bd38      	pop	{r3, r4, r5, pc}

08082e8a <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8082e8a:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8082e8c:	b510      	push	{r4, lr}
 8082e8e:	460b      	mov	r3, r1
 8082e90:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8082e92:	d007      	beq.n	8082ea4 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8082e94:	6809      	ldr	r1, [r1, #0]
 8082e96:	b119      	cbz	r1, 8082ea0 <_ZN6StringaSERKS_+0x16>
 8082e98:	689a      	ldr	r2, [r3, #8]
 8082e9a:	f7ff ffcb 	bl	8082e34 <_ZN6String4copyEPKcj>
 8082e9e:	e001      	b.n	8082ea4 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8082ea0:	f7ff ffa0 	bl	8082de4 <_ZN6String10invalidateEv>

	return *this;
}
 8082ea4:	4620      	mov	r0, r4
 8082ea6:	bd10      	pop	{r4, pc}

08082ea8 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8082ea8:	b510      	push	{r4, lr}
 8082eaa:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082eac:	2300      	movs	r3, #0
 8082eae:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8082eb0:	6043      	str	r3, [r0, #4]
	len = 0;
 8082eb2:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082eb4:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8082eb6:	f7ff ffe8 	bl	8082e8a <_ZN6StringaSERKS_>
}
 8082eba:	4620      	mov	r0, r4
 8082ebc:	bd10      	pop	{r4, pc}

08082ebe <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082ebe:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082ec0:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082ec2:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082ec4:	b912      	cbnz	r2, 8082ecc <_ZNK6String6equalsEPKc+0xe>
 8082ec6:	b919      	cbnz	r1, 8082ed0 <_ZNK6String6equalsEPKc+0x12>
 8082ec8:	2001      	movs	r0, #1
 8082eca:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8082ecc:	b911      	cbnz	r1, 8082ed4 <_ZNK6String6equalsEPKc+0x16>
 8082ece:	6803      	ldr	r3, [r0, #0]
 8082ed0:	7818      	ldrb	r0, [r3, #0]
 8082ed2:	e002      	b.n	8082eda <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8082ed4:	6800      	ldr	r0, [r0, #0]
 8082ed6:	f001 fdc3 	bl	8084a60 <strcmp>
 8082eda:	fab0 f080 	clz	r0, r0
 8082ede:	0940      	lsrs	r0, r0, #5
}
 8082ee0:	bd08      	pop	{r3, pc}

08082ee2 <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8082ee2:	b570      	push	{r4, r5, r6, lr}
 8082ee4:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8082ee6:	b19a      	cbz	r2, 8082f10 <_ZNK6String8getBytesEPhjj+0x2e>
 8082ee8:	b191      	cbz	r1, 8082f10 <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 8082eea:	6885      	ldr	r5, [r0, #8]
 8082eec:	429d      	cmp	r5, r3
 8082eee:	d802      	bhi.n	8082ef6 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8082ef0:	2300      	movs	r3, #0
 8082ef2:	700b      	strb	r3, [r1, #0]
		return;
 8082ef4:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 8082ef6:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 8082ef8:	1aed      	subs	r5, r5, r3
 8082efa:	42ac      	cmp	r4, r5
 8082efc:	bf28      	it	cs
 8082efe:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 8082f00:	6801      	ldr	r1, [r0, #0]
 8082f02:	4622      	mov	r2, r4
 8082f04:	4419      	add	r1, r3
 8082f06:	4630      	mov	r0, r6
 8082f08:	f001 fdf4 	bl	8084af4 <strncpy>
	buf[n] = 0;
 8082f0c:	2300      	movs	r3, #0
 8082f0e:	5533      	strb	r3, [r6, r4]
 8082f10:	bd70      	pop	{r4, r5, r6, pc}

08082f12 <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8082f12:	4601      	mov	r1, r0
 8082f14:	2200      	movs	r2, #0
 8082f16:	208c      	movs	r0, #140	; 0x8c
 8082f18:	f7fe bc14 	b.w	8081744 <HAL_Core_System_Reset_Ex>

08082f1c <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 8082f1c:	2000      	movs	r0, #0
 8082f1e:	f7ff bff8 	b.w	8082f12 <_ZN11SystemClass5resetEm>
	...

08082f24 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8082f24:	b510      	push	{r4, lr}
 8082f26:	4604      	mov	r4, r0
 8082f28:	4608      	mov	r0, r1
 8082f2a:	4611      	mov	r1, r2
 8082f2c:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8082f2e:	2300      	movs	r3, #0
 8082f30:	f7fe fdb8 	bl	8081aa4 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
 8082f34:	4b06      	ldr	r3, [pc, #24]	; (8082f50 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
 8082f36:	2200      	movs	r2, #0
 8082f38:	701a      	strb	r2, [r3, #0]
 8082f3a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8082f3e:	8058      	strh	r0, [r3, #2]
 8082f40:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 8082f42:	681a      	ldr	r2, [r3, #0]
 8082f44:	889b      	ldrh	r3, [r3, #4]
 8082f46:	6022      	str	r2, [r4, #0]
 8082f48:	80a3      	strh	r3, [r4, #4]
}
 8082f4a:	4620      	mov	r0, r4
 8082f4c:	bd10      	pop	{r4, pc}
 8082f4e:	bf00      	nop
 8082f50:	200006e0 	.word	0x200006e0

08082f54 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8082f54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8082f58:	4b03      	ldr	r3, [pc, #12]	; (8082f68 <_GLOBAL__sub_I_System+0x14>)
 8082f5a:	2000      	movs	r0, #0
 8082f5c:	7018      	strb	r0, [r3, #0]
 8082f5e:	8058      	strh	r0, [r3, #2]
 8082f60:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8082f62:	f7fe bd8f 	b.w	8081a84 <set_system_mode>
 8082f66:	bf00      	nop
 8082f68:	200006e0 	.word	0x200006e0

08082f6c <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082f6c:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 8082f6e:	4b14      	ldr	r3, [pc, #80]	; (8082fc0 <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8082f70:	4f14      	ldr	r7, [pc, #80]	; (8082fc4 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8082f72:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8082f74:	4b14      	ldr	r3, [pc, #80]	; (8082fc8 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8082f76:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 8082f78:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 8082f7a:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8082f7c:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 8082f7e:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082f80:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8082f82:	d01b      	beq.n	8082fbc <_ZL22Refresh_UnixTime_Cachel+0x50>
 8082f84:	a80a      	add	r0, sp, #40	; 0x28
 8082f86:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 8082f8a:	f001 fc35 	bl	80847f8 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8082f8e:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8082f90:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 8082f92:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8082f94:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8082f98:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 8082f9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082f9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8082f9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082fa0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8082fa2:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082fa6:	4c09      	ldr	r4, [pc, #36]	; (8082fcc <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8082fa8:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082fac:	ad01      	add	r5, sp, #4
 8082fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082fb2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082fb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8082fb6:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082fb8:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8082fbc:	b00b      	add	sp, #44	; 0x2c
 8082fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082fc0:	20000718 	.word	0x20000718
 8082fc4:	20000714 	.word	0x20000714
 8082fc8:	20000710 	.word	0x20000710
 8082fcc:	200006e8 	.word	0x200006e8

08082fd0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8082fd0:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8082fd2:	2000      	movs	r0, #0
 8082fd4:	f7fe fdf2 	bl	8081bbc <spark_sync_time_pending>
 8082fd8:	b128      	cbz	r0, 8082fe6 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082fda:	f7fe fdc7 	bl	8081b6c <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8082fde:	f080 0001 	eor.w	r0, r0, #1
 8082fe2:	b2c0      	uxtb	r0, r0
 8082fe4:	bd08      	pop	{r3, pc}
 8082fe6:	2001      	movs	r0, #1
    }
 8082fe8:	bd08      	pop	{r3, pc}
	...

08082fec <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8082fec:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8082fee:	4909      	ldr	r1, [pc, #36]	; (8083014 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8082ff0:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8082ff2:	f001 fb65 	bl	80846c0 <__aeabi_fcmplt>
 8082ff6:	b960      	cbnz	r0, 8083012 <_ZN9TimeClass4zoneEf+0x26>
 8082ff8:	4907      	ldr	r1, [pc, #28]	; (8083018 <_ZN9TimeClass4zoneEf+0x2c>)
 8082ffa:	4620      	mov	r0, r4
 8082ffc:	f001 fb7e 	bl	80846fc <__aeabi_fcmpgt>
 8083000:	b938      	cbnz	r0, 8083012 <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8083002:	4906      	ldr	r1, [pc, #24]	; (808301c <_ZN9TimeClass4zoneEf+0x30>)
 8083004:	4620      	mov	r0, r4
 8083006:	f001 f9bd 	bl	8084384 <__aeabi_fmul>
 808300a:	f001 fb81 	bl	8084710 <__aeabi_f2iz>
 808300e:	4b04      	ldr	r3, [pc, #16]	; (8083020 <_ZN9TimeClass4zoneEf+0x34>)
 8083010:	6018      	str	r0, [r3, #0]
 8083012:	bd10      	pop	{r4, pc}
 8083014:	c1400000 	.word	0xc1400000
 8083018:	41600000 	.word	0x41600000
 808301c:	45610000 	.word	0x45610000
 8083020:	20000718 	.word	0x20000718

08083024 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8083024:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 8083026:	4b0e      	ldr	r3, [pc, #56]	; (8083060 <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8083028:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 808302a:	681b      	ldr	r3, [r3, #0]
 808302c:	a802      	add	r0, sp, #8
 808302e:	4419      	add	r1, r3
 8083030:	4b0c      	ldr	r3, [pc, #48]	; (8083064 <_ZN9TimeClass7timeStrEl+0x40>)
 8083032:	681b      	ldr	r3, [r3, #0]
 8083034:	4419      	add	r1, r3
 8083036:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 808303a:	f001 fbdd 	bl	80847f8 <localtime>
        char* ascstr = asctime(calendar_time);
 808303e:	f001 fb8d 	bl	808475c <asctime>
 8083042:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8083044:	f001 fd39 	bl	8084aba <strlen>
        ascstr[len-1] = 0; // remove final newline
 8083048:	2300      	movs	r3, #0
 808304a:	4428      	add	r0, r5
 808304c:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8083050:	4629      	mov	r1, r5
 8083052:	4620      	mov	r0, r4
 8083054:	f7ff ff06 	bl	8082e64 <_ZN6StringC1EPK19__FlashStringHelper>
}
 8083058:	4620      	mov	r0, r4
 808305a:	b003      	add	sp, #12
 808305c:	bd30      	pop	{r4, r5, pc}
 808305e:	bf00      	nop
 8083060:	20000718 	.word	0x20000718
 8083064:	20000710 	.word	0x20000710

08083068 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8083068:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 808306a:	2000      	movs	r0, #0
 808306c:	f7fe fbba 	bl	80817e4 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8083070:	4604      	mov	r4, r0
 8083072:	b968      	cbnz	r0, 8083090 <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8083074:	f7fe fcfe 	bl	8081a74 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8083078:	2801      	cmp	r0, #1
 808307a:	d10b      	bne.n	8083094 <_ZN9TimeClass7isValidEv+0x2c>
 808307c:	4620      	mov	r0, r4
 808307e:	f7fe fd31 	bl	8081ae4 <system_thread_get_state>
 8083082:	b938      	cbnz	r0, 8083094 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8083084:	f7ff ffa4 	bl	8082fd0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8083088:	b930      	cbnz	r0, 8083098 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 808308a:	f7fe fd57 	bl	8081b3c <spark_process>
 808308e:	e7f9      	b.n	8083084 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8083090:	2001      	movs	r0, #1
 8083092:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8083094:	2000      	movs	r0, #0
 8083096:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8083098:	f7ff ff9a 	bl	8082fd0 <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 808309c:	2000      	movs	r0, #0
 808309e:	f7fe fba1 	bl	80817e4 <HAL_RTC_Time_Is_Valid>
 80830a2:	3000      	adds	r0, #0
 80830a4:	bf18      	it	ne
 80830a6:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 80830a8:	bd10      	pop	{r4, pc}

080830aa <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 80830aa:	b508      	push	{r3, lr}
    (void)isValid();
 80830ac:	f7ff ffdc 	bl	8083068 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 80830b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 80830b4:	f7fe bb6e 	b.w	8081794 <HAL_RTC_Get_UnixTime>

080830b8 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 80830b8:	b508      	push	{r3, lr}
	return hour(now());
 80830ba:	f7ff fff6 	bl	80830aa <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80830be:	f7ff ff55 	bl	8082f6c <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 80830c2:	4b01      	ldr	r3, [pc, #4]	; (80830c8 <_ZN9TimeClass4hourEv+0x10>)
 80830c4:	6898      	ldr	r0, [r3, #8]
 80830c6:	bd08      	pop	{r3, pc}
 80830c8:	200006e8 	.word	0x200006e8

080830cc <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 80830cc:	b508      	push	{r3, lr}
	return minute(now());
 80830ce:	f7ff ffec 	bl	80830aa <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80830d2:	f7ff ff4b 	bl	8082f6c <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 80830d6:	4b01      	ldr	r3, [pc, #4]	; (80830dc <_ZN9TimeClass6minuteEv+0x10>)
 80830d8:	6858      	ldr	r0, [r3, #4]
 80830da:	bd08      	pop	{r3, pc}
 80830dc:	200006e8 	.word	0x200006e8

080830e0 <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 80830e0:	b508      	push	{r3, lr}
	return day(now());
 80830e2:	f7ff ffe2 	bl	80830aa <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 80830e6:	f7ff ff41 	bl	8082f6c <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 80830ea:	4b01      	ldr	r3, [pc, #4]	; (80830f0 <_ZN9TimeClass3dayEv+0x10>)
 80830ec:	68d8      	ldr	r0, [r3, #12]
 80830ee:	bd08      	pop	{r3, pc}
 80830f0:	200006e8 	.word	0x200006e8

080830f4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 80830f4:	4b02      	ldr	r3, [pc, #8]	; (8083100 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 80830f6:	681a      	ldr	r2, [r3, #0]
 80830f8:	4b02      	ldr	r3, [pc, #8]	; (8083104 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 80830fa:	601a      	str	r2, [r3, #0]
 80830fc:	4770      	bx	lr
 80830fe:	bf00      	nop
 8083100:	20000498 	.word	0x20000498
 8083104:	2000070c 	.word	0x2000070c

08083108 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8083108:	4770      	bx	lr

0808310a <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 808310a:	7441      	strb	r1, [r0, #17]
 808310c:	4770      	bx	lr

0808310e <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 808310e:	7c00      	ldrb	r0, [r0, #16]
 8083110:	f7fe bc78 	b.w	8081a04 <HAL_USART_Available_Data_For_Write>

08083114 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8083114:	7c00      	ldrb	r0, [r0, #16]
 8083116:	f7fe bc4d 	b.w	80819b4 <HAL_USART_Available_Data>

0808311a <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 808311a:	7c00      	ldrb	r0, [r0, #16]
 808311c:	f7fe bc5a 	b.w	80819d4 <HAL_USART_Peek_Data>

08083120 <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 8083120:	7c00      	ldrb	r0, [r0, #16]
 8083122:	f7fe bc4f 	b.w	80819c4 <HAL_USART_Read_Data>

08083126 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8083126:	7c00      	ldrb	r0, [r0, #16]
 8083128:	f7fe bc5c 	b.w	80819e4 <HAL_USART_Flush_Data>

0808312c <_ZN11USARTSerialD0Ev>:
 808312c:	b510      	push	{r4, lr}
 808312e:	4604      	mov	r4, r0
 8083130:	f7fc ffb5 	bl	808009e <_ZdlPv>
 8083134:	4620      	mov	r0, r4
 8083136:	bd10      	pop	{r4, pc}

08083138 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8083138:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808313a:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 808313c:	4604      	mov	r4, r0
 808313e:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8083140:	b925      	cbnz	r5, 808314c <_ZN11USARTSerial5writeEh+0x14>
 8083142:	7c00      	ldrb	r0, [r0, #16]
 8083144:	f7fe fc5e 	bl	8081a04 <HAL_USART_Available_Data_For_Write>
 8083148:	2800      	cmp	r0, #0
 808314a:	dd05      	ble.n	8083158 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 808314c:	4631      	mov	r1, r6
 808314e:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 8083150:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8083154:	f7fe bc26 	b.w	80819a4 <HAL_USART_Write_Data>
  }
  return 0;
}
 8083158:	4628      	mov	r0, r5
 808315a:	bd70      	pop	{r4, r5, r6, pc}

0808315c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808315c:	b510      	push	{r4, lr}
 808315e:	4604      	mov	r4, r0
 8083160:	4608      	mov	r0, r1
 8083162:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8083164:	2200      	movs	r2, #0
 8083166:	6062      	str	r2, [r4, #4]
 8083168:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 808316c:	60a2      	str	r2, [r4, #8]
 808316e:	4a05      	ldr	r2, [pc, #20]	; (8083184 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 8083170:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8083172:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8083174:	2201      	movs	r2, #1
 8083176:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8083178:	461a      	mov	r2, r3
 808317a:	f7fe fc0b 	bl	8081994 <HAL_USART_Init>
}
 808317e:	4620      	mov	r0, r4
 8083180:	bd10      	pop	{r4, pc}
 8083182:	bf00      	nop
 8083184:	080858cc 	.word	0x080858cc

08083188 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8083188:	7c00      	ldrb	r0, [r0, #16]
 808318a:	f7fe bc33 	b.w	80819f4 <HAL_USART_Is_Enabled>
	...

08083190 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 8083190:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 8083192:	4d0c      	ldr	r5, [pc, #48]	; (80831c4 <_Z22__fetch_global_Serial1v+0x34>)
 8083194:	6829      	ldr	r1, [r5, #0]
 8083196:	f011 0401 	ands.w	r4, r1, #1
 808319a:	d111      	bne.n	80831c0 <_Z22__fetch_global_Serial1v+0x30>
 808319c:	4628      	mov	r0, r5
 808319e:	f7fc ff80 	bl	80800a2 <__cxa_guard_acquire>
 80831a2:	b168      	cbz	r0, 80831c0 <_Z22__fetch_global_Serial1v+0x30>
 80831a4:	4a08      	ldr	r2, [pc, #32]	; (80831c8 <_Z22__fetch_global_Serial1v+0x38>)
 80831a6:	4621      	mov	r1, r4
 80831a8:	4b08      	ldr	r3, [pc, #32]	; (80831cc <_Z22__fetch_global_Serial1v+0x3c>)
 80831aa:	4809      	ldr	r0, [pc, #36]	; (80831d0 <_Z22__fetch_global_Serial1v+0x40>)
 80831ac:	f7ff ffd6 	bl	808315c <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80831b0:	4628      	mov	r0, r5
 80831b2:	f7fc ff7b 	bl	80800ac <__cxa_guard_release>
 80831b6:	4a07      	ldr	r2, [pc, #28]	; (80831d4 <_Z22__fetch_global_Serial1v+0x44>)
 80831b8:	4907      	ldr	r1, [pc, #28]	; (80831d8 <_Z22__fetch_global_Serial1v+0x48>)
 80831ba:	4805      	ldr	r0, [pc, #20]	; (80831d0 <_Z22__fetch_global_Serial1v+0x40>)
 80831bc:	f000 fa6a 	bl	8083694 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80831c0:	4803      	ldr	r0, [pc, #12]	; (80831d0 <_Z22__fetch_global_Serial1v+0x40>)
 80831c2:	bd38      	pop	{r3, r4, r5, pc}
 80831c4:	200007b4 	.word	0x200007b4
 80831c8:	200007b8 	.word	0x200007b8
 80831cc:	20000730 	.word	0x20000730
 80831d0:	2000071c 	.word	0x2000071c
 80831d4:	20000550 	.word	0x20000550
 80831d8:	08083109 	.word	0x08083109

080831dc <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80831dc:	7441      	strb	r1, [r0, #17]
 80831de:	4770      	bx	lr

080831e0 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80831e0:	4770      	bx	lr

080831e2 <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80831e2:	2100      	movs	r1, #0
 80831e4:	7c00      	ldrb	r0, [r0, #16]
 80831e6:	f7fe bc2d 	b.w	8081a44 <HAL_USB_USART_Receive_Data>

080831ea <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80831ea:	2101      	movs	r1, #1
 80831ec:	7c00      	ldrb	r0, [r0, #16]
 80831ee:	f7fe bc29 	b.w	8081a44 <HAL_USB_USART_Receive_Data>

080831f2 <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80831f2:	7c00      	ldrb	r0, [r0, #16]
 80831f4:	f7fe bc1e 	b.w	8081a34 <HAL_USB_USART_Available_Data_For_Write>

080831f8 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80831f8:	7c00      	ldrb	r0, [r0, #16]
 80831fa:	f7fe bc13 	b.w	8081a24 <HAL_USB_USART_Available_Data>

080831fe <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80831fe:	b538      	push	{r3, r4, r5, lr}
 8083200:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8083202:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8083204:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8083206:	f7fe fc15 	bl	8081a34 <HAL_USB_USART_Available_Data_For_Write>
 808320a:	2800      	cmp	r0, #0
 808320c:	dc01      	bgt.n	8083212 <_ZN9USBSerial5writeEh+0x14>
 808320e:	7c60      	ldrb	r0, [r4, #17]
 8083210:	b120      	cbz	r0, 808321c <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 8083212:	4629      	mov	r1, r5
 8083214:	7c20      	ldrb	r0, [r4, #16]
 8083216:	f7fe fc1d 	bl	8081a54 <HAL_USB_USART_Send_Data>
    return 1;
 808321a:	2001      	movs	r0, #1
  }
  return 0;
}
 808321c:	bd38      	pop	{r3, r4, r5, pc}

0808321e <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808321e:	7c00      	ldrb	r0, [r0, #16]
 8083220:	f7fe bc20 	b.w	8081a64 <HAL_USB_USART_Flush_Data>

08083224 <_ZN9USBSerialD0Ev>:
 8083224:	b510      	push	{r4, lr}
 8083226:	4604      	mov	r4, r0
 8083228:	f7fc ff39 	bl	808009e <_ZdlPv>
 808322c:	4620      	mov	r0, r4
 808322e:	bd10      	pop	{r4, pc}

08083230 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 8083230:	b510      	push	{r4, lr}
 8083232:	4604      	mov	r4, r0
 8083234:	2300      	movs	r3, #0
 8083236:	6063      	str	r3, [r4, #4]
 8083238:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808323c:	60a3      	str	r3, [r4, #8]
 808323e:	4b05      	ldr	r3, [pc, #20]	; (8083254 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 8083240:	4608      	mov	r0, r1
 8083242:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8083244:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8083246:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8083248:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 808324a:	4611      	mov	r1, r2
 808324c:	f7fe fbe2 	bl	8081a14 <HAL_USB_USART_Init>
}
 8083250:	4620      	mov	r0, r4
 8083252:	bd10      	pop	{r4, pc}
 8083254:	080858fc 	.word	0x080858fc

08083258 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8083258:	b510      	push	{r4, lr}
 808325a:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 808325c:	2214      	movs	r2, #20
 808325e:	2100      	movs	r1, #0
 8083260:	f001 fbcd 	bl	80849fe <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8083264:	4b05      	ldr	r3, [pc, #20]	; (808327c <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8083266:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8083268:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 808326a:	4b05      	ldr	r3, [pc, #20]	; (8083280 <_Z19acquireSerialBufferv+0x28>)
 808326c:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808326e:	f240 1301 	movw	r3, #257	; 0x101
 8083272:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8083274:	2381      	movs	r3, #129	; 0x81
 8083276:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8083278:	bd10      	pop	{r4, pc}
 808327a:	bf00      	nop
 808327c:	200008c1 	.word	0x200008c1
 8083280:	20000840 	.word	0x20000840

08083284 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8083284:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083286:	4d0e      	ldr	r5, [pc, #56]	; (80832c0 <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8083288:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 808328a:	a801      	add	r0, sp, #4
 808328c:	f7ff ffe4 	bl	8083258 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083290:	6829      	ldr	r1, [r5, #0]
 8083292:	f011 0401 	ands.w	r4, r1, #1
 8083296:	d110      	bne.n	80832ba <_Z16_fetch_usbserialv+0x36>
 8083298:	4628      	mov	r0, r5
 808329a:	f7fc ff02 	bl	80800a2 <__cxa_guard_acquire>
 808329e:	b160      	cbz	r0, 80832ba <_Z16_fetch_usbserialv+0x36>
 80832a0:	aa01      	add	r2, sp, #4
 80832a2:	4621      	mov	r1, r4
 80832a4:	4807      	ldr	r0, [pc, #28]	; (80832c4 <_Z16_fetch_usbserialv+0x40>)
 80832a6:	f7ff ffc3 	bl	8083230 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80832aa:	4628      	mov	r0, r5
 80832ac:	f7fc fefe 	bl	80800ac <__cxa_guard_release>
 80832b0:	4a05      	ldr	r2, [pc, #20]	; (80832c8 <_Z16_fetch_usbserialv+0x44>)
 80832b2:	4906      	ldr	r1, [pc, #24]	; (80832cc <_Z16_fetch_usbserialv+0x48>)
 80832b4:	4803      	ldr	r0, [pc, #12]	; (80832c4 <_Z16_fetch_usbserialv+0x40>)
 80832b6:	f000 f9ed 	bl	8083694 <__aeabi_atexit>
	return _usbserial;
}
 80832ba:	4802      	ldr	r0, [pc, #8]	; (80832c4 <_Z16_fetch_usbserialv+0x40>)
 80832bc:	b007      	add	sp, #28
 80832be:	bd30      	pop	{r4, r5, pc}
 80832c0:	2000083c 	.word	0x2000083c
 80832c4:	200009c4 	.word	0x200009c4
 80832c8:	20000550 	.word	0x20000550
 80832cc:	080831e1 	.word	0x080831e1

080832d0 <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80832d0:	b510      	push	{r4, lr}
 80832d2:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80832d4:	2214      	movs	r2, #20
 80832d6:	2100      	movs	r1, #0
 80832d8:	f001 fb91 	bl	80849fe <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80832dc:	4b05      	ldr	r3, [pc, #20]	; (80832f4 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80832de:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80832e0:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80832e2:	4b05      	ldr	r3, [pc, #20]	; (80832f8 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80832e4:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80832e6:	f240 1301 	movw	r3, #257	; 0x101
 80832ea:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80832ec:	2381      	movs	r3, #129	; 0x81
 80832ee:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80832f0:	bd10      	pop	{r4, pc}
 80832f2:	bf00      	nop
 80832f4:	20000a74 	.word	0x20000a74
 80832f8:	200009dc 	.word	0x200009dc

080832fc <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80832fc:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80832fe:	4c0e      	ldr	r4, [pc, #56]	; (8083338 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 8083300:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 8083302:	a801      	add	r0, sp, #4
 8083304:	f7ff ffe4 	bl	80832d0 <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8083308:	6823      	ldr	r3, [r4, #0]
 808330a:	07db      	lsls	r3, r3, #31
 808330c:	d410      	bmi.n	8083330 <_Z17_fetch_usbserial1v+0x34>
 808330e:	4620      	mov	r0, r4
 8083310:	f7fc fec7 	bl	80800a2 <__cxa_guard_acquire>
 8083314:	b160      	cbz	r0, 8083330 <_Z17_fetch_usbserial1v+0x34>
 8083316:	aa01      	add	r2, sp, #4
 8083318:	2101      	movs	r1, #1
 808331a:	4808      	ldr	r0, [pc, #32]	; (808333c <_Z17_fetch_usbserial1v+0x40>)
 808331c:	f7ff ff88 	bl	8083230 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 8083320:	4620      	mov	r0, r4
 8083322:	f7fc fec3 	bl	80800ac <__cxa_guard_release>
 8083326:	4a06      	ldr	r2, [pc, #24]	; (8083340 <_Z17_fetch_usbserial1v+0x44>)
 8083328:	4906      	ldr	r1, [pc, #24]	; (8083344 <_Z17_fetch_usbserial1v+0x48>)
 808332a:	4804      	ldr	r0, [pc, #16]	; (808333c <_Z17_fetch_usbserial1v+0x40>)
 808332c:	f000 f9b2 	bl	8083694 <__aeabi_atexit>
  return _usbserial1;
}
 8083330:	4802      	ldr	r0, [pc, #8]	; (808333c <_Z17_fetch_usbserial1v+0x40>)
 8083332:	b006      	add	sp, #24
 8083334:	bd10      	pop	{r4, pc}
 8083336:	bf00      	nop
 8083338:	200009d8 	.word	0x200009d8
 808333c:	20000a60 	.word	0x20000a60
 8083340:	20000550 	.word	0x20000550
 8083344:	080831e1 	.word	0x080831e1

08083348 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8083348:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 808334a:	4b18      	ldr	r3, [pc, #96]	; (80833ac <serialEventRun+0x64>)
 808334c:	b133      	cbz	r3, 808335c <serialEventRun+0x14>
 808334e:	f7ff ff99 	bl	8083284 <_Z16_fetch_usbserialv>
 8083352:	6803      	ldr	r3, [r0, #0]
 8083354:	691b      	ldr	r3, [r3, #16]
 8083356:	4798      	blx	r3
 8083358:	2800      	cmp	r0, #0
 808335a:	dc1e      	bgt.n	808339a <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 808335c:	4b14      	ldr	r3, [pc, #80]	; (80833b0 <serialEventRun+0x68>)
 808335e:	b133      	cbz	r3, 808336e <serialEventRun+0x26>
 8083360:	f7ff ff16 	bl	8083190 <_Z22__fetch_global_Serial1v>
 8083364:	6803      	ldr	r3, [r0, #0]
 8083366:	691b      	ldr	r3, [r3, #16]
 8083368:	4798      	blx	r3
 808336a:	2800      	cmp	r0, #0
 808336c:	dc18      	bgt.n	80833a0 <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 808336e:	4b11      	ldr	r3, [pc, #68]	; (80833b4 <serialEventRun+0x6c>)
 8083370:	b10b      	cbz	r3, 8083376 <serialEventRun+0x2e>
 8083372:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8083376:	4b10      	ldr	r3, [pc, #64]	; (80833b8 <serialEventRun+0x70>)
 8083378:	b10b      	cbz	r3, 808337e <serialEventRun+0x36>
 808337a:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 808337e:	4b0f      	ldr	r3, [pc, #60]	; (80833bc <serialEventRun+0x74>)
 8083380:	b10b      	cbz	r3, 8083386 <serialEventRun+0x3e>
 8083382:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8083386:	4b0e      	ldr	r3, [pc, #56]	; (80833c0 <serialEventRun+0x78>)
 8083388:	b17b      	cbz	r3, 80833aa <serialEventRun+0x62>
 808338a:	f7ff ffb7 	bl	80832fc <_Z17_fetch_usbserial1v>
 808338e:	6803      	ldr	r3, [r0, #0]
 8083390:	691b      	ldr	r3, [r3, #16]
 8083392:	4798      	blx	r3
 8083394:	2800      	cmp	r0, #0
 8083396:	dc06      	bgt.n	80833a6 <serialEventRun+0x5e>
 8083398:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 808339a:	f3af 8000 	nop.w
 808339e:	e7dd      	b.n	808335c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 80833a0:	f3af 8000 	nop.w
 80833a4:	e7e3      	b.n	808336e <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80833a6:	f3af 8000 	nop.w
 80833aa:	bd08      	pop	{r3, pc}
	...

080833c4 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80833c4:	b508      	push	{r3, lr}
	serialEventRun();
 80833c6:	f7ff ffbf 	bl	8083348 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80833ca:	f7fe f9db 	bl	8081784 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80833ce:	4b01      	ldr	r3, [pc, #4]	; (80833d4 <_post_loop+0x10>)
 80833d0:	6018      	str	r0, [r3, #0]
 80833d2:	bd08      	pop	{r3, pc}
 80833d4:	20000b80 	.word	0x20000b80

080833d8 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80833d8:	4802      	ldr	r0, [pc, #8]	; (80833e4 <_Z33system_initialize_user_backup_ramv+0xc>)
 80833da:	4a03      	ldr	r2, [pc, #12]	; (80833e8 <_Z33system_initialize_user_backup_ramv+0x10>)
 80833dc:	4903      	ldr	r1, [pc, #12]	; (80833ec <_Z33system_initialize_user_backup_ramv+0x14>)
 80833de:	1a12      	subs	r2, r2, r0
 80833e0:	f001 bb02 	b.w	80849e8 <memcpy>
 80833e4:	40024000 	.word	0x40024000
 80833e8:	40024004 	.word	0x40024004
 80833ec:	08085bc0 	.word	0x08085bc0

080833f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80833f0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80833f2:	2300      	movs	r3, #0
 80833f4:	9300      	str	r3, [sp, #0]
 80833f6:	461a      	mov	r2, r3
 80833f8:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80833fc:	f7fe fb84 	bl	8081b08 <system_ctrl_set_result>
}
 8083400:	b003      	add	sp, #12
 8083402:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08083408 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8083408:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 808340a:	8843      	ldrh	r3, [r0, #2]
 808340c:	2b0a      	cmp	r3, #10
 808340e:	d008      	beq.n	8083422 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 8083410:	2b50      	cmp	r3, #80	; 0x50
 8083412:	d109      	bne.n	8083428 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8083414:	4b09      	ldr	r3, [pc, #36]	; (808343c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8083416:	681b      	ldr	r3, [r3, #0]
 8083418:	b13b      	cbz	r3, 808342a <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 808341a:	b003      	add	sp, #12
 808341c:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 8083420:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 8083422:	f7ff ffe5 	bl	80833f0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8083426:	e006      	b.n	8083436 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8083428:	2300      	movs	r3, #0
 808342a:	9300      	str	r3, [sp, #0]
 808342c:	461a      	mov	r2, r3
 808342e:	f06f 0177 	mvn.w	r1, #119	; 0x77
 8083432:	f7fe fb69 	bl	8081b08 <system_ctrl_set_result>
        break;
    }
}
 8083436:	b003      	add	sp, #12
 8083438:	f85d fb04 	ldr.w	pc, [sp], #4
 808343c:	20000b78 	.word	0x20000b78

08083440 <module_user_init_hook>:

void module_user_init_hook()
{
 8083440:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 8083442:	4c10      	ldr	r4, [pc, #64]	; (8083484 <module_user_init_hook+0x44>)
 8083444:	4d10      	ldr	r5, [pc, #64]	; (8083488 <module_user_init_hook+0x48>)
 8083446:	6823      	ldr	r3, [r4, #0]
 8083448:	42ab      	cmp	r3, r5
 808344a:	4b10      	ldr	r3, [pc, #64]	; (808348c <module_user_init_hook+0x4c>)
 808344c:	bf0c      	ite	eq
 808344e:	2201      	moveq	r2, #1
 8083450:	2200      	movne	r2, #0
 8083452:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8083454:	d002      	beq.n	808345c <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8083456:	f7ff ffbf 	bl	80833d8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 808345a:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 808345c:	f7fe f982 	bl	8081764 <HAL_RNG_GetRandomNumber>
 8083460:	4604      	mov	r4, r0
    srand(seed);
 8083462:	f001 fad5 	bl	8084a10 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8083466:	4b0a      	ldr	r3, [pc, #40]	; (8083490 <module_user_init_hook+0x50>)
 8083468:	b113      	cbz	r3, 8083470 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 808346a:	4620      	mov	r0, r4
 808346c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 8083470:	2100      	movs	r1, #0
 8083472:	4807      	ldr	r0, [pc, #28]	; (8083490 <module_user_init_hook+0x50>)
 8083474:	f7fe fbaa 	bl	8081bcc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8083478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 808347c:	2100      	movs	r1, #0
 808347e:	4805      	ldr	r0, [pc, #20]	; (8083494 <module_user_init_hook+0x54>)
 8083480:	f7fe bb38 	b.w	8081af4 <system_ctrl_set_app_request_handler>
 8083484:	40024000 	.word	0x40024000
 8083488:	9a271c1e 	.word	0x9a271c1e
 808348c:	20000b7c 	.word	0x20000b7c
 8083490:	00000000 	.word	0x00000000
 8083494:	08083409 	.word	0x08083409

08083498 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8083498:	b510      	push	{r4, lr}
 808349a:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 808349c:	480f      	ldr	r0, [pc, #60]	; (80834dc <pinAvailable+0x44>)
 808349e:	f7ff fc97 	bl	8082dd0 <_ZN8SPIClass9isEnabledEv>
 80834a2:	b128      	cbz	r0, 80834b0 <pinAvailable+0x18>
 80834a4:	f1a4 030d 	sub.w	r3, r4, #13
 80834a8:	2b02      	cmp	r3, #2
 80834aa:	d801      	bhi.n	80834b0 <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80834ac:	2000      	movs	r0, #0
 80834ae:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80834b0:	f000 f86a 	bl	8083588 <_Z19__fetch_global_Wirev>
 80834b4:	f7ff f909 	bl	80826ca <_ZN7TwoWire9isEnabledEv>
 80834b8:	b108      	cbz	r0, 80834be <pinAvailable+0x26>
 80834ba:	2c01      	cmp	r4, #1
 80834bc:	d9f6      	bls.n	80834ac <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80834be:	f7ff fe67 	bl	8083190 <_Z22__fetch_global_Serial1v>
 80834c2:	f7ff fe61 	bl	8083188 <_ZN11USARTSerial9isEnabledEv>
 80834c6:	b118      	cbz	r0, 80834d0 <pinAvailable+0x38>
 80834c8:	f1a4 0312 	sub.w	r3, r4, #18
 80834cc:	2b01      	cmp	r3, #1
 80834ce:	d9ed      	bls.n	80834ac <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80834d0:	2c2e      	cmp	r4, #46	; 0x2e
 80834d2:	bf8c      	ite	hi
 80834d4:	2000      	movhi	r0, #0
 80834d6:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80834d8:	bd10      	pop	{r4, pc}
 80834da:	bf00      	nop
 80834dc:	20000bc4 	.word	0x20000bc4

080834e0 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80834e0:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80834e2:	b538      	push	{r3, r4, r5, lr}
 80834e4:	4604      	mov	r4, r0
 80834e6:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80834e8:	d80a      	bhi.n	8083500 <pinMode+0x20>
 80834ea:	29ff      	cmp	r1, #255	; 0xff
 80834ec:	d008      	beq.n	8083500 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80834ee:	f7ff ffd3 	bl	8083498 <pinAvailable>
 80834f2:	b128      	cbz	r0, 8083500 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80834f4:	4629      	mov	r1, r5
 80834f6:	4620      	mov	r0, r4
}
 80834f8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80834fc:	f7fe b98a 	b.w	8081814 <HAL_Pin_Mode>
 8083500:	bd38      	pop	{r3, r4, r5, pc}

08083502 <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 8083502:	b538      	push	{r3, r4, r5, lr}
 8083504:	4604      	mov	r4, r0
 8083506:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083508:	f7fe f98c 	bl	8081824 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 808350c:	28ff      	cmp	r0, #255	; 0xff
 808350e:	d010      	beq.n	8083532 <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 8083510:	2806      	cmp	r0, #6
 8083512:	d804      	bhi.n	808351e <digitalWrite+0x1c>
 8083514:	234d      	movs	r3, #77	; 0x4d
 8083516:	fa23 f000 	lsr.w	r0, r3, r0
 808351a:	07c3      	lsls	r3, r0, #31
 808351c:	d409      	bmi.n	8083532 <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808351e:	4620      	mov	r0, r4
 8083520:	f7ff ffba 	bl	8083498 <pinAvailable>
 8083524:	b128      	cbz	r0, 8083532 <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8083526:	4629      	mov	r1, r5
 8083528:	4620      	mov	r0, r4
}
 808352a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808352e:	f7fe b981 	b.w	8081834 <HAL_GPIO_Write>
 8083532:	bd38      	pop	{r3, r4, r5, pc}

08083534 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8083534:	b510      	push	{r4, lr}
 8083536:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083538:	f7fe f974 	bl	8081824 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 808353c:	3804      	subs	r0, #4
 808353e:	b2c0      	uxtb	r0, r0
 8083540:	2801      	cmp	r0, #1
 8083542:	d908      	bls.n	8083556 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8083544:	4620      	mov	r0, r4
 8083546:	f7ff ffa7 	bl	8083498 <pinAvailable>
 808354a:	b120      	cbz	r0, 8083556 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808354c:	4620      	mov	r0, r4
}
 808354e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8083552:	f7fe b977 	b.w	8081844 <HAL_GPIO_Read>
}
 8083556:	2000      	movs	r0, #0
 8083558:	bd10      	pop	{r4, pc}

0808355a <pulseIn>:
 */
uint32_t pulseIn(pin_t pin, uint16_t value) {

    // NO SAFETY CHECKS!!! WILD WILD WEST!!!

    return HAL_Pulse_In(pin, value);
 808355a:	f7fe b99b 	b.w	8081894 <HAL_Pulse_In>
	...

08083560 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 8083560:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 8083562:	4c07      	ldr	r4, [pc, #28]	; (8083580 <_Z21__fetch_global_EEPROMv+0x20>)
 8083564:	6823      	ldr	r3, [r4, #0]
 8083566:	07db      	lsls	r3, r3, #31
 8083568:	d408      	bmi.n	808357c <_Z21__fetch_global_EEPROMv+0x1c>
 808356a:	4620      	mov	r0, r4
 808356c:	f7fc fd99 	bl	80800a2 <__cxa_guard_acquire>
 8083570:	b120      	cbz	r0, 808357c <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 8083572:	f7fe f917 	bl	80817a4 <HAL_EEPROM_Init>
 8083576:	4620      	mov	r0, r4
 8083578:	f7fc fd98 	bl	80800ac <__cxa_guard_release>
	return eeprom;
}
 808357c:	4801      	ldr	r0, [pc, #4]	; (8083584 <_Z21__fetch_global_EEPROMv+0x24>)
 808357e:	bd10      	pop	{r4, pc}
 8083580:	20000b84 	.word	0x20000b84
 8083584:	20000b88 	.word	0x20000b88

08083588 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8083588:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 808358a:	4d0b      	ldr	r5, [pc, #44]	; (80835b8 <_Z19__fetch_global_Wirev+0x30>)
 808358c:	6829      	ldr	r1, [r5, #0]
 808358e:	f011 0401 	ands.w	r4, r1, #1
 8083592:	d10f      	bne.n	80835b4 <_Z19__fetch_global_Wirev+0x2c>
 8083594:	4628      	mov	r0, r5
 8083596:	f7fc fd84 	bl	80800a2 <__cxa_guard_acquire>
 808359a:	b158      	cbz	r0, 80835b4 <_Z19__fetch_global_Wirev+0x2c>
 808359c:	4621      	mov	r1, r4
 808359e:	4807      	ldr	r0, [pc, #28]	; (80835bc <_Z19__fetch_global_Wirev+0x34>)
 80835a0:	f7ff f862 	bl	8082668 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80835a4:	4628      	mov	r0, r5
 80835a6:	f7fc fd81 	bl	80800ac <__cxa_guard_release>
 80835aa:	4a05      	ldr	r2, [pc, #20]	; (80835c0 <_Z19__fetch_global_Wirev+0x38>)
 80835ac:	4905      	ldr	r1, [pc, #20]	; (80835c4 <_Z19__fetch_global_Wirev+0x3c>)
 80835ae:	4803      	ldr	r0, [pc, #12]	; (80835bc <_Z19__fetch_global_Wirev+0x34>)
 80835b0:	f000 f870 	bl	8083694 <__aeabi_atexit>
	return wire;
}
 80835b4:	4801      	ldr	r0, [pc, #4]	; (80835bc <_Z19__fetch_global_Wirev+0x34>)
 80835b6:	bd38      	pop	{r3, r4, r5, pc}
 80835b8:	20000b8c 	.word	0x20000b8c
 80835bc:	20000ba4 	.word	0x20000ba4
 80835c0:	20000550 	.word	0x20000550
 80835c4:	08082611 	.word	0x08082611

080835c8 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 80835c8:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 80835ca:	4c0b      	ldr	r4, [pc, #44]	; (80835f8 <_Z20__fetch_global_Wire3v+0x30>)
 80835cc:	6823      	ldr	r3, [r4, #0]
 80835ce:	07db      	lsls	r3, r3, #31
 80835d0:	d40f      	bmi.n	80835f2 <_Z20__fetch_global_Wire3v+0x2a>
 80835d2:	4620      	mov	r0, r4
 80835d4:	f7fc fd65 	bl	80800a2 <__cxa_guard_acquire>
 80835d8:	b158      	cbz	r0, 80835f2 <_Z20__fetch_global_Wire3v+0x2a>
 80835da:	2102      	movs	r1, #2
 80835dc:	4807      	ldr	r0, [pc, #28]	; (80835fc <_Z20__fetch_global_Wire3v+0x34>)
 80835de:	f7ff f843 	bl	8082668 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80835e2:	4620      	mov	r0, r4
 80835e4:	f7fc fd62 	bl	80800ac <__cxa_guard_release>
 80835e8:	4a05      	ldr	r2, [pc, #20]	; (8083600 <_Z20__fetch_global_Wire3v+0x38>)
 80835ea:	4906      	ldr	r1, [pc, #24]	; (8083604 <_Z20__fetch_global_Wire3v+0x3c>)
 80835ec:	4803      	ldr	r0, [pc, #12]	; (80835fc <_Z20__fetch_global_Wire3v+0x34>)
 80835ee:	f000 f851 	bl	8083694 <__aeabi_atexit>
	return wire;
}
 80835f2:	4802      	ldr	r0, [pc, #8]	; (80835fc <_Z20__fetch_global_Wire3v+0x34>)
 80835f4:	bd10      	pop	{r4, pc}
 80835f6:	bf00      	nop
 80835f8:	20000bb8 	.word	0x20000bb8
 80835fc:	20000b90 	.word	0x20000b90
 8083600:	20000550 	.word	0x20000550
 8083604:	08082611 	.word	0x08082611

08083608 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8083608:	b513      	push	{r0, r1, r4, lr}
 808360a:	4c08      	ldr	r4, [pc, #32]	; (808362c <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 808360c:	2300      	movs	r3, #0
 808360e:	461a      	mov	r2, r3
 8083610:	4619      	mov	r1, r3
 8083612:	9300      	str	r3, [sp, #0]
 8083614:	4620      	mov	r0, r4
 8083616:	f7ff f8df 	bl	80827d8 <_ZN9IPAddressC1Ehhhh>
 808361a:	4620      	mov	r0, r4
 808361c:	4a04      	ldr	r2, [pc, #16]	; (8083630 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 808361e:	4905      	ldr	r1, [pc, #20]	; (8083634 <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8083620:	b002      	add	sp, #8
 8083622:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8083626:	f000 b835 	b.w	8083694 <__aeabi_atexit>
 808362a:	bf00      	nop
 808362c:	20000bbc 	.word	0x20000bbc
 8083630:	20000550 	.word	0x20000550
 8083634:	08082755 	.word	0x08082755

08083638 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8083638:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808363a:	4e11      	ldr	r6, [pc, #68]	; (8083680 <_GLOBAL__sub_I_SPI+0x48>)
 808363c:	4d11      	ldr	r5, [pc, #68]	; (8083684 <_GLOBAL__sub_I_SPI+0x4c>)
 808363e:	4c12      	ldr	r4, [pc, #72]	; (8083688 <_GLOBAL__sub_I_SPI+0x50>)
 8083640:	2100      	movs	r1, #0
 8083642:	4630      	mov	r0, r6
 8083644:	f7ff fbb0 	bl	8082da8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8083648:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808364a:	4e10      	ldr	r6, [pc, #64]	; (808368c <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 808364c:	462a      	mov	r2, r5
 808364e:	4621      	mov	r1, r4
 8083650:	f000 f820 	bl	8083694 <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8083654:	2101      	movs	r1, #1
 8083656:	4630      	mov	r0, r6
 8083658:	f7ff fba6 	bl	8082da8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 808365c:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 808365e:	4e0c      	ldr	r6, [pc, #48]	; (8083690 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8083660:	462a      	mov	r2, r5
 8083662:	4621      	mov	r1, r4
 8083664:	f000 f816 	bl	8083694 <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8083668:	2102      	movs	r1, #2
 808366a:	4630      	mov	r0, r6
 808366c:	f7ff fb9c 	bl	8082da8 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8083670:	462a      	mov	r2, r5
 8083672:	4621      	mov	r1, r4
 8083674:	4630      	mov	r0, r6
 8083676:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 808367a:	f000 b80b 	b.w	8083694 <__aeabi_atexit>
 808367e:	bf00      	nop
 8083680:	20000bc4 	.word	0x20000bc4
 8083684:	20000550 	.word	0x20000550
 8083688:	08082d99 	.word	0x08082d99
 808368c:	20000bd4 	.word	0x20000bd4
 8083690:	20000be4 	.word	0x20000be4

08083694 <__aeabi_atexit>:
 8083694:	460b      	mov	r3, r1
 8083696:	4601      	mov	r1, r0
 8083698:	4618      	mov	r0, r3
 808369a:	f001 b89f 	b.w	80847dc <__cxa_atexit>

0808369e <_ZSt25__throw_bad_function_callv>:
 808369e:	b508      	push	{r3, lr}
 80836a0:	f7fe fb1c 	bl	8081cdc <abort>

080836a4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 80836a4:	4b24      	ldr	r3, [pc, #144]	; (8083738 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 80836a6:	681a      	ldr	r2, [r3, #0]
 80836a8:	07d0      	lsls	r0, r2, #31
 80836aa:	bf5c      	itt	pl
 80836ac:	2201      	movpl	r2, #1
 80836ae:	601a      	strpl	r2, [r3, #0]
 80836b0:	4b22      	ldr	r3, [pc, #136]	; (808373c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80836b2:	681a      	ldr	r2, [r3, #0]
 80836b4:	07d1      	lsls	r1, r2, #31
 80836b6:	bf5c      	itt	pl
 80836b8:	2201      	movpl	r2, #1
 80836ba:	601a      	strpl	r2, [r3, #0]
 80836bc:	4b20      	ldr	r3, [pc, #128]	; (8083740 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80836be:	681a      	ldr	r2, [r3, #0]
 80836c0:	07d2      	lsls	r2, r2, #31
 80836c2:	bf5c      	itt	pl
 80836c4:	2201      	movpl	r2, #1
 80836c6:	601a      	strpl	r2, [r3, #0]
 80836c8:	4b1e      	ldr	r3, [pc, #120]	; (8083744 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80836ca:	681a      	ldr	r2, [r3, #0]
 80836cc:	07d0      	lsls	r0, r2, #31
 80836ce:	bf5c      	itt	pl
 80836d0:	2201      	movpl	r2, #1
 80836d2:	601a      	strpl	r2, [r3, #0]
 80836d4:	4b1c      	ldr	r3, [pc, #112]	; (8083748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80836d6:	681a      	ldr	r2, [r3, #0]
 80836d8:	07d1      	lsls	r1, r2, #31
 80836da:	bf5c      	itt	pl
 80836dc:	2201      	movpl	r2, #1
 80836de:	601a      	strpl	r2, [r3, #0]
 80836e0:	4b1a      	ldr	r3, [pc, #104]	; (808374c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80836e2:	681a      	ldr	r2, [r3, #0]
 80836e4:	07d2      	lsls	r2, r2, #31
 80836e6:	bf5c      	itt	pl
 80836e8:	2201      	movpl	r2, #1
 80836ea:	601a      	strpl	r2, [r3, #0]
 80836ec:	4b18      	ldr	r3, [pc, #96]	; (8083750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80836ee:	681a      	ldr	r2, [r3, #0]
 80836f0:	07d0      	lsls	r0, r2, #31
 80836f2:	bf5c      	itt	pl
 80836f4:	2201      	movpl	r2, #1
 80836f6:	601a      	strpl	r2, [r3, #0]
 80836f8:	4b16      	ldr	r3, [pc, #88]	; (8083754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80836fa:	681a      	ldr	r2, [r3, #0]
 80836fc:	07d1      	lsls	r1, r2, #31
 80836fe:	bf5c      	itt	pl
 8083700:	2201      	movpl	r2, #1
 8083702:	601a      	strpl	r2, [r3, #0]
 8083704:	4b14      	ldr	r3, [pc, #80]	; (8083758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 8083706:	681a      	ldr	r2, [r3, #0]
 8083708:	07d2      	lsls	r2, r2, #31
 808370a:	bf5c      	itt	pl
 808370c:	2201      	movpl	r2, #1
 808370e:	601a      	strpl	r2, [r3, #0]
 8083710:	4b12      	ldr	r3, [pc, #72]	; (808375c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 8083712:	681a      	ldr	r2, [r3, #0]
 8083714:	07d0      	lsls	r0, r2, #31
 8083716:	bf5c      	itt	pl
 8083718:	2201      	movpl	r2, #1
 808371a:	601a      	strpl	r2, [r3, #0]
 808371c:	4b10      	ldr	r3, [pc, #64]	; (8083760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 808371e:	681a      	ldr	r2, [r3, #0]
 8083720:	07d1      	lsls	r1, r2, #31
 8083722:	bf5c      	itt	pl
 8083724:	2201      	movpl	r2, #1
 8083726:	601a      	strpl	r2, [r3, #0]
 8083728:	4b0e      	ldr	r3, [pc, #56]	; (8083764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 808372a:	681a      	ldr	r2, [r3, #0]
 808372c:	07d2      	lsls	r2, r2, #31
 808372e:	bf5c      	itt	pl
 8083730:	2201      	movpl	r2, #1
 8083732:	601a      	strpl	r2, [r3, #0]
 8083734:	4770      	bx	lr
 8083736:	bf00      	nop
 8083738:	20000c20 	.word	0x20000c20
 808373c:	20000c1c 	.word	0x20000c1c
 8083740:	20000c18 	.word	0x20000c18
 8083744:	20000c14 	.word	0x20000c14
 8083748:	20000c10 	.word	0x20000c10
 808374c:	20000c0c 	.word	0x20000c0c
 8083750:	20000c08 	.word	0x20000c08
 8083754:	20000c04 	.word	0x20000c04
 8083758:	20000c00 	.word	0x20000c00
 808375c:	20000bfc 	.word	0x20000bfc
 8083760:	20000bf8 	.word	0x20000bf8
 8083764:	20000bf4 	.word	0x20000bf4

08083768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083768:	4b18      	ldr	r3, [pc, #96]	; (80837cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 808376a:	681a      	ldr	r2, [r3, #0]
 808376c:	07d1      	lsls	r1, r2, #31
 808376e:	bf5c      	itt	pl
 8083770:	2201      	movpl	r2, #1
 8083772:	601a      	strpl	r2, [r3, #0]
 8083774:	4b16      	ldr	r3, [pc, #88]	; (80837d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 8083776:	681a      	ldr	r2, [r3, #0]
 8083778:	07d2      	lsls	r2, r2, #31
 808377a:	bf5c      	itt	pl
 808377c:	2201      	movpl	r2, #1
 808377e:	601a      	strpl	r2, [r3, #0]
 8083780:	4b14      	ldr	r3, [pc, #80]	; (80837d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8083782:	681a      	ldr	r2, [r3, #0]
 8083784:	07d0      	lsls	r0, r2, #31
 8083786:	bf5c      	itt	pl
 8083788:	2201      	movpl	r2, #1
 808378a:	601a      	strpl	r2, [r3, #0]
 808378c:	4b12      	ldr	r3, [pc, #72]	; (80837d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808378e:	681a      	ldr	r2, [r3, #0]
 8083790:	07d1      	lsls	r1, r2, #31
 8083792:	bf5c      	itt	pl
 8083794:	2201      	movpl	r2, #1
 8083796:	601a      	strpl	r2, [r3, #0]
 8083798:	4b10      	ldr	r3, [pc, #64]	; (80837dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808379a:	681a      	ldr	r2, [r3, #0]
 808379c:	07d2      	lsls	r2, r2, #31
 808379e:	bf5c      	itt	pl
 80837a0:	2201      	movpl	r2, #1
 80837a2:	601a      	strpl	r2, [r3, #0]
 80837a4:	4b0e      	ldr	r3, [pc, #56]	; (80837e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 80837a6:	681a      	ldr	r2, [r3, #0]
 80837a8:	07d0      	lsls	r0, r2, #31
 80837aa:	bf5c      	itt	pl
 80837ac:	2201      	movpl	r2, #1
 80837ae:	601a      	strpl	r2, [r3, #0]
 80837b0:	4b0c      	ldr	r3, [pc, #48]	; (80837e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80837b2:	681a      	ldr	r2, [r3, #0]
 80837b4:	07d1      	lsls	r1, r2, #31
 80837b6:	bf5c      	itt	pl
 80837b8:	2201      	movpl	r2, #1
 80837ba:	601a      	strpl	r2, [r3, #0]
 80837bc:	4b0a      	ldr	r3, [pc, #40]	; (80837e8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80837be:	681a      	ldr	r2, [r3, #0]
 80837c0:	07d2      	lsls	r2, r2, #31
 80837c2:	bf5c      	itt	pl
 80837c4:	2201      	movpl	r2, #1
 80837c6:	601a      	strpl	r2, [r3, #0]
 80837c8:	4770      	bx	lr
 80837ca:	bf00      	nop
 80837cc:	20000c40 	.word	0x20000c40
 80837d0:	20000c3c 	.word	0x20000c3c
 80837d4:	20000c38 	.word	0x20000c38
 80837d8:	20000c34 	.word	0x20000c34
 80837dc:	20000c30 	.word	0x20000c30
 80837e0:	20000c2c 	.word	0x20000c2c
 80837e4:	20000c28 	.word	0x20000c28
 80837e8:	20000c24 	.word	0x20000c24

080837ec <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80837ec:	4b18      	ldr	r3, [pc, #96]	; (8083850 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80837ee:	681a      	ldr	r2, [r3, #0]
 80837f0:	07d1      	lsls	r1, r2, #31
 80837f2:	bf5c      	itt	pl
 80837f4:	2201      	movpl	r2, #1
 80837f6:	601a      	strpl	r2, [r3, #0]
 80837f8:	4b16      	ldr	r3, [pc, #88]	; (8083854 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80837fa:	681a      	ldr	r2, [r3, #0]
 80837fc:	07d2      	lsls	r2, r2, #31
 80837fe:	bf5c      	itt	pl
 8083800:	2201      	movpl	r2, #1
 8083802:	601a      	strpl	r2, [r3, #0]
 8083804:	4b14      	ldr	r3, [pc, #80]	; (8083858 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 8083806:	681a      	ldr	r2, [r3, #0]
 8083808:	07d0      	lsls	r0, r2, #31
 808380a:	bf5c      	itt	pl
 808380c:	2201      	movpl	r2, #1
 808380e:	601a      	strpl	r2, [r3, #0]
 8083810:	4b12      	ldr	r3, [pc, #72]	; (808385c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083812:	681a      	ldr	r2, [r3, #0]
 8083814:	07d1      	lsls	r1, r2, #31
 8083816:	bf5c      	itt	pl
 8083818:	2201      	movpl	r2, #1
 808381a:	601a      	strpl	r2, [r3, #0]
 808381c:	4b10      	ldr	r3, [pc, #64]	; (8083860 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 808381e:	681a      	ldr	r2, [r3, #0]
 8083820:	07d2      	lsls	r2, r2, #31
 8083822:	bf5c      	itt	pl
 8083824:	2201      	movpl	r2, #1
 8083826:	601a      	strpl	r2, [r3, #0]
 8083828:	4b0e      	ldr	r3, [pc, #56]	; (8083864 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808382a:	681a      	ldr	r2, [r3, #0]
 808382c:	07d0      	lsls	r0, r2, #31
 808382e:	bf5c      	itt	pl
 8083830:	2201      	movpl	r2, #1
 8083832:	601a      	strpl	r2, [r3, #0]
 8083834:	4b0c      	ldr	r3, [pc, #48]	; (8083868 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 8083836:	681a      	ldr	r2, [r3, #0]
 8083838:	07d1      	lsls	r1, r2, #31
 808383a:	bf5c      	itt	pl
 808383c:	2201      	movpl	r2, #1
 808383e:	601a      	strpl	r2, [r3, #0]
 8083840:	4b0a      	ldr	r3, [pc, #40]	; (808386c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 8083842:	681a      	ldr	r2, [r3, #0]
 8083844:	07d2      	lsls	r2, r2, #31
 8083846:	bf5c      	itt	pl
 8083848:	2201      	movpl	r2, #1
 808384a:	601a      	strpl	r2, [r3, #0]
 808384c:	4770      	bx	lr
 808384e:	bf00      	nop
 8083850:	20000c60 	.word	0x20000c60
 8083854:	20000c5c 	.word	0x20000c5c
 8083858:	20000c58 	.word	0x20000c58
 808385c:	20000c54 	.word	0x20000c54
 8083860:	20000c50 	.word	0x20000c50
 8083864:	20000c4c 	.word	0x20000c4c
 8083868:	20000c48 	.word	0x20000c48
 808386c:	20000c44 	.word	0x20000c44

08083870 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8083870:	4b24      	ldr	r3, [pc, #144]	; (8083904 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 8083872:	681a      	ldr	r2, [r3, #0]
 8083874:	07d0      	lsls	r0, r2, #31
 8083876:	bf5c      	itt	pl
 8083878:	2201      	movpl	r2, #1
 808387a:	601a      	strpl	r2, [r3, #0]
 808387c:	4b22      	ldr	r3, [pc, #136]	; (8083908 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 808387e:	681a      	ldr	r2, [r3, #0]
 8083880:	07d1      	lsls	r1, r2, #31
 8083882:	bf5c      	itt	pl
 8083884:	2201      	movpl	r2, #1
 8083886:	601a      	strpl	r2, [r3, #0]
 8083888:	4b20      	ldr	r3, [pc, #128]	; (808390c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 808388a:	681a      	ldr	r2, [r3, #0]
 808388c:	07d2      	lsls	r2, r2, #31
 808388e:	bf5c      	itt	pl
 8083890:	2201      	movpl	r2, #1
 8083892:	601a      	strpl	r2, [r3, #0]
 8083894:	4b1e      	ldr	r3, [pc, #120]	; (8083910 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 8083896:	681a      	ldr	r2, [r3, #0]
 8083898:	07d0      	lsls	r0, r2, #31
 808389a:	bf5c      	itt	pl
 808389c:	2201      	movpl	r2, #1
 808389e:	601a      	strpl	r2, [r3, #0]
 80838a0:	4b1c      	ldr	r3, [pc, #112]	; (8083914 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 80838a2:	681a      	ldr	r2, [r3, #0]
 80838a4:	07d1      	lsls	r1, r2, #31
 80838a6:	bf5c      	itt	pl
 80838a8:	2201      	movpl	r2, #1
 80838aa:	601a      	strpl	r2, [r3, #0]
 80838ac:	4b1a      	ldr	r3, [pc, #104]	; (8083918 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80838ae:	681a      	ldr	r2, [r3, #0]
 80838b0:	07d2      	lsls	r2, r2, #31
 80838b2:	bf5c      	itt	pl
 80838b4:	2201      	movpl	r2, #1
 80838b6:	601a      	strpl	r2, [r3, #0]
 80838b8:	4b18      	ldr	r3, [pc, #96]	; (808391c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80838ba:	681a      	ldr	r2, [r3, #0]
 80838bc:	07d0      	lsls	r0, r2, #31
 80838be:	bf5c      	itt	pl
 80838c0:	2201      	movpl	r2, #1
 80838c2:	601a      	strpl	r2, [r3, #0]
 80838c4:	4b16      	ldr	r3, [pc, #88]	; (8083920 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80838c6:	681a      	ldr	r2, [r3, #0]
 80838c8:	07d1      	lsls	r1, r2, #31
 80838ca:	bf5c      	itt	pl
 80838cc:	2201      	movpl	r2, #1
 80838ce:	601a      	strpl	r2, [r3, #0]
 80838d0:	4b14      	ldr	r3, [pc, #80]	; (8083924 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80838d2:	681a      	ldr	r2, [r3, #0]
 80838d4:	07d2      	lsls	r2, r2, #31
 80838d6:	bf5c      	itt	pl
 80838d8:	2201      	movpl	r2, #1
 80838da:	601a      	strpl	r2, [r3, #0]
 80838dc:	4b12      	ldr	r3, [pc, #72]	; (8083928 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80838de:	681a      	ldr	r2, [r3, #0]
 80838e0:	07d0      	lsls	r0, r2, #31
 80838e2:	bf5c      	itt	pl
 80838e4:	2201      	movpl	r2, #1
 80838e6:	601a      	strpl	r2, [r3, #0]
 80838e8:	4b10      	ldr	r3, [pc, #64]	; (808392c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80838ea:	681a      	ldr	r2, [r3, #0]
 80838ec:	07d1      	lsls	r1, r2, #31
 80838ee:	bf5c      	itt	pl
 80838f0:	2201      	movpl	r2, #1
 80838f2:	601a      	strpl	r2, [r3, #0]
 80838f4:	4b0e      	ldr	r3, [pc, #56]	; (8083930 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80838f6:	681a      	ldr	r2, [r3, #0]
 80838f8:	07d2      	lsls	r2, r2, #31
 80838fa:	bf5c      	itt	pl
 80838fc:	2201      	movpl	r2, #1
 80838fe:	601a      	strpl	r2, [r3, #0]
 8083900:	4770      	bx	lr
 8083902:	bf00      	nop
 8083904:	20000c90 	.word	0x20000c90
 8083908:	20000c8c 	.word	0x20000c8c
 808390c:	20000c88 	.word	0x20000c88
 8083910:	20000c84 	.word	0x20000c84
 8083914:	20000c80 	.word	0x20000c80
 8083918:	20000c7c 	.word	0x20000c7c
 808391c:	20000c78 	.word	0x20000c78
 8083920:	20000c74 	.word	0x20000c74
 8083924:	20000c70 	.word	0x20000c70
 8083928:	20000c6c 	.word	0x20000c6c
 808392c:	20000c68 	.word	0x20000c68
 8083930:	20000c64 	.word	0x20000c64

08083934 <__aeabi_drsub>:
 8083934:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8083938:	e002      	b.n	8083940 <__adddf3>
 808393a:	bf00      	nop

0808393c <__aeabi_dsub>:
 808393c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08083940 <__adddf3>:
 8083940:	b530      	push	{r4, r5, lr}
 8083942:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8083946:	ea4f 0543 	mov.w	r5, r3, lsl #1
 808394a:	ea94 0f05 	teq	r4, r5
 808394e:	bf08      	it	eq
 8083950:	ea90 0f02 	teqeq	r0, r2
 8083954:	bf1f      	itttt	ne
 8083956:	ea54 0c00 	orrsne.w	ip, r4, r0
 808395a:	ea55 0c02 	orrsne.w	ip, r5, r2
 808395e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8083962:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8083966:	f000 80e2 	beq.w	8083b2e <__adddf3+0x1ee>
 808396a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 808396e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8083972:	bfb8      	it	lt
 8083974:	426d      	neglt	r5, r5
 8083976:	dd0c      	ble.n	8083992 <__adddf3+0x52>
 8083978:	442c      	add	r4, r5
 808397a:	ea80 0202 	eor.w	r2, r0, r2
 808397e:	ea81 0303 	eor.w	r3, r1, r3
 8083982:	ea82 0000 	eor.w	r0, r2, r0
 8083986:	ea83 0101 	eor.w	r1, r3, r1
 808398a:	ea80 0202 	eor.w	r2, r0, r2
 808398e:	ea81 0303 	eor.w	r3, r1, r3
 8083992:	2d36      	cmp	r5, #54	; 0x36
 8083994:	bf88      	it	hi
 8083996:	bd30      	pophi	{r4, r5, pc}
 8083998:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 808399c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80839a0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80839a4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80839a8:	d002      	beq.n	80839b0 <__adddf3+0x70>
 80839aa:	4240      	negs	r0, r0
 80839ac:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80839b0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80839b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80839b8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80839bc:	d002      	beq.n	80839c4 <__adddf3+0x84>
 80839be:	4252      	negs	r2, r2
 80839c0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80839c4:	ea94 0f05 	teq	r4, r5
 80839c8:	f000 80a7 	beq.w	8083b1a <__adddf3+0x1da>
 80839cc:	f1a4 0401 	sub.w	r4, r4, #1
 80839d0:	f1d5 0e20 	rsbs	lr, r5, #32
 80839d4:	db0d      	blt.n	80839f2 <__adddf3+0xb2>
 80839d6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80839da:	fa22 f205 	lsr.w	r2, r2, r5
 80839de:	1880      	adds	r0, r0, r2
 80839e0:	f141 0100 	adc.w	r1, r1, #0
 80839e4:	fa03 f20e 	lsl.w	r2, r3, lr
 80839e8:	1880      	adds	r0, r0, r2
 80839ea:	fa43 f305 	asr.w	r3, r3, r5
 80839ee:	4159      	adcs	r1, r3
 80839f0:	e00e      	b.n	8083a10 <__adddf3+0xd0>
 80839f2:	f1a5 0520 	sub.w	r5, r5, #32
 80839f6:	f10e 0e20 	add.w	lr, lr, #32
 80839fa:	2a01      	cmp	r2, #1
 80839fc:	fa03 fc0e 	lsl.w	ip, r3, lr
 8083a00:	bf28      	it	cs
 8083a02:	f04c 0c02 	orrcs.w	ip, ip, #2
 8083a06:	fa43 f305 	asr.w	r3, r3, r5
 8083a0a:	18c0      	adds	r0, r0, r3
 8083a0c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8083a10:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083a14:	d507      	bpl.n	8083a26 <__adddf3+0xe6>
 8083a16:	f04f 0e00 	mov.w	lr, #0
 8083a1a:	f1dc 0c00 	rsbs	ip, ip, #0
 8083a1e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8083a22:	eb6e 0101 	sbc.w	r1, lr, r1
 8083a26:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8083a2a:	d31b      	bcc.n	8083a64 <__adddf3+0x124>
 8083a2c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8083a30:	d30c      	bcc.n	8083a4c <__adddf3+0x10c>
 8083a32:	0849      	lsrs	r1, r1, #1
 8083a34:	ea5f 0030 	movs.w	r0, r0, rrx
 8083a38:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8083a3c:	f104 0401 	add.w	r4, r4, #1
 8083a40:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8083a44:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8083a48:	f080 809a 	bcs.w	8083b80 <__adddf3+0x240>
 8083a4c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083a50:	bf08      	it	eq
 8083a52:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083a56:	f150 0000 	adcs.w	r0, r0, #0
 8083a5a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083a5e:	ea41 0105 	orr.w	r1, r1, r5
 8083a62:	bd30      	pop	{r4, r5, pc}
 8083a64:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8083a68:	4140      	adcs	r0, r0
 8083a6a:	eb41 0101 	adc.w	r1, r1, r1
 8083a6e:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083a72:	f1a4 0401 	sub.w	r4, r4, #1
 8083a76:	d1e9      	bne.n	8083a4c <__adddf3+0x10c>
 8083a78:	f091 0f00 	teq	r1, #0
 8083a7c:	bf04      	itt	eq
 8083a7e:	4601      	moveq	r1, r0
 8083a80:	2000      	moveq	r0, #0
 8083a82:	fab1 f381 	clz	r3, r1
 8083a86:	bf08      	it	eq
 8083a88:	3320      	addeq	r3, #32
 8083a8a:	f1a3 030b 	sub.w	r3, r3, #11
 8083a8e:	f1b3 0220 	subs.w	r2, r3, #32
 8083a92:	da0c      	bge.n	8083aae <__adddf3+0x16e>
 8083a94:	320c      	adds	r2, #12
 8083a96:	dd08      	ble.n	8083aaa <__adddf3+0x16a>
 8083a98:	f102 0c14 	add.w	ip, r2, #20
 8083a9c:	f1c2 020c 	rsb	r2, r2, #12
 8083aa0:	fa01 f00c 	lsl.w	r0, r1, ip
 8083aa4:	fa21 f102 	lsr.w	r1, r1, r2
 8083aa8:	e00c      	b.n	8083ac4 <__adddf3+0x184>
 8083aaa:	f102 0214 	add.w	r2, r2, #20
 8083aae:	bfd8      	it	le
 8083ab0:	f1c2 0c20 	rsble	ip, r2, #32
 8083ab4:	fa01 f102 	lsl.w	r1, r1, r2
 8083ab8:	fa20 fc0c 	lsr.w	ip, r0, ip
 8083abc:	bfdc      	itt	le
 8083abe:	ea41 010c 	orrle.w	r1, r1, ip
 8083ac2:	4090      	lslle	r0, r2
 8083ac4:	1ae4      	subs	r4, r4, r3
 8083ac6:	bfa2      	ittt	ge
 8083ac8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8083acc:	4329      	orrge	r1, r5
 8083ace:	bd30      	popge	{r4, r5, pc}
 8083ad0:	ea6f 0404 	mvn.w	r4, r4
 8083ad4:	3c1f      	subs	r4, #31
 8083ad6:	da1c      	bge.n	8083b12 <__adddf3+0x1d2>
 8083ad8:	340c      	adds	r4, #12
 8083ada:	dc0e      	bgt.n	8083afa <__adddf3+0x1ba>
 8083adc:	f104 0414 	add.w	r4, r4, #20
 8083ae0:	f1c4 0220 	rsb	r2, r4, #32
 8083ae4:	fa20 f004 	lsr.w	r0, r0, r4
 8083ae8:	fa01 f302 	lsl.w	r3, r1, r2
 8083aec:	ea40 0003 	orr.w	r0, r0, r3
 8083af0:	fa21 f304 	lsr.w	r3, r1, r4
 8083af4:	ea45 0103 	orr.w	r1, r5, r3
 8083af8:	bd30      	pop	{r4, r5, pc}
 8083afa:	f1c4 040c 	rsb	r4, r4, #12
 8083afe:	f1c4 0220 	rsb	r2, r4, #32
 8083b02:	fa20 f002 	lsr.w	r0, r0, r2
 8083b06:	fa01 f304 	lsl.w	r3, r1, r4
 8083b0a:	ea40 0003 	orr.w	r0, r0, r3
 8083b0e:	4629      	mov	r1, r5
 8083b10:	bd30      	pop	{r4, r5, pc}
 8083b12:	fa21 f004 	lsr.w	r0, r1, r4
 8083b16:	4629      	mov	r1, r5
 8083b18:	bd30      	pop	{r4, r5, pc}
 8083b1a:	f094 0f00 	teq	r4, #0
 8083b1e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8083b22:	bf06      	itte	eq
 8083b24:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8083b28:	3401      	addeq	r4, #1
 8083b2a:	3d01      	subne	r5, #1
 8083b2c:	e74e      	b.n	80839cc <__adddf3+0x8c>
 8083b2e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083b32:	bf18      	it	ne
 8083b34:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8083b38:	d029      	beq.n	8083b8e <__adddf3+0x24e>
 8083b3a:	ea94 0f05 	teq	r4, r5
 8083b3e:	bf08      	it	eq
 8083b40:	ea90 0f02 	teqeq	r0, r2
 8083b44:	d005      	beq.n	8083b52 <__adddf3+0x212>
 8083b46:	ea54 0c00 	orrs.w	ip, r4, r0
 8083b4a:	bf04      	itt	eq
 8083b4c:	4619      	moveq	r1, r3
 8083b4e:	4610      	moveq	r0, r2
 8083b50:	bd30      	pop	{r4, r5, pc}
 8083b52:	ea91 0f03 	teq	r1, r3
 8083b56:	bf1e      	ittt	ne
 8083b58:	2100      	movne	r1, #0
 8083b5a:	2000      	movne	r0, #0
 8083b5c:	bd30      	popne	{r4, r5, pc}
 8083b5e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8083b62:	d105      	bne.n	8083b70 <__adddf3+0x230>
 8083b64:	0040      	lsls	r0, r0, #1
 8083b66:	4149      	adcs	r1, r1
 8083b68:	bf28      	it	cs
 8083b6a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8083b6e:	bd30      	pop	{r4, r5, pc}
 8083b70:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8083b74:	bf3c      	itt	cc
 8083b76:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8083b7a:	bd30      	popcc	{r4, r5, pc}
 8083b7c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083b80:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8083b84:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083b88:	f04f 0000 	mov.w	r0, #0
 8083b8c:	bd30      	pop	{r4, r5, pc}
 8083b8e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083b92:	bf1a      	itte	ne
 8083b94:	4619      	movne	r1, r3
 8083b96:	4610      	movne	r0, r2
 8083b98:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8083b9c:	bf1c      	itt	ne
 8083b9e:	460b      	movne	r3, r1
 8083ba0:	4602      	movne	r2, r0
 8083ba2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083ba6:	bf06      	itte	eq
 8083ba8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083bac:	ea91 0f03 	teqeq	r1, r3
 8083bb0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8083bb4:	bd30      	pop	{r4, r5, pc}
 8083bb6:	bf00      	nop

08083bb8 <__aeabi_ui2d>:
 8083bb8:	f090 0f00 	teq	r0, #0
 8083bbc:	bf04      	itt	eq
 8083bbe:	2100      	moveq	r1, #0
 8083bc0:	4770      	bxeq	lr
 8083bc2:	b530      	push	{r4, r5, lr}
 8083bc4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083bc8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083bcc:	f04f 0500 	mov.w	r5, #0
 8083bd0:	f04f 0100 	mov.w	r1, #0
 8083bd4:	e750      	b.n	8083a78 <__adddf3+0x138>
 8083bd6:	bf00      	nop

08083bd8 <__aeabi_i2d>:
 8083bd8:	f090 0f00 	teq	r0, #0
 8083bdc:	bf04      	itt	eq
 8083bde:	2100      	moveq	r1, #0
 8083be0:	4770      	bxeq	lr
 8083be2:	b530      	push	{r4, r5, lr}
 8083be4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083be8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083bec:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8083bf0:	bf48      	it	mi
 8083bf2:	4240      	negmi	r0, r0
 8083bf4:	f04f 0100 	mov.w	r1, #0
 8083bf8:	e73e      	b.n	8083a78 <__adddf3+0x138>
 8083bfa:	bf00      	nop

08083bfc <__aeabi_f2d>:
 8083bfc:	0042      	lsls	r2, r0, #1
 8083bfe:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8083c02:	ea4f 0131 	mov.w	r1, r1, rrx
 8083c06:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8083c0a:	bf1f      	itttt	ne
 8083c0c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8083c10:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083c14:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083c18:	4770      	bxne	lr
 8083c1a:	f092 0f00 	teq	r2, #0
 8083c1e:	bf14      	ite	ne
 8083c20:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083c24:	4770      	bxeq	lr
 8083c26:	b530      	push	{r4, r5, lr}
 8083c28:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083c2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083c30:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083c34:	e720      	b.n	8083a78 <__adddf3+0x138>
 8083c36:	bf00      	nop

08083c38 <__aeabi_ul2d>:
 8083c38:	ea50 0201 	orrs.w	r2, r0, r1
 8083c3c:	bf08      	it	eq
 8083c3e:	4770      	bxeq	lr
 8083c40:	b530      	push	{r4, r5, lr}
 8083c42:	f04f 0500 	mov.w	r5, #0
 8083c46:	e00a      	b.n	8083c5e <__aeabi_l2d+0x16>

08083c48 <__aeabi_l2d>:
 8083c48:	ea50 0201 	orrs.w	r2, r0, r1
 8083c4c:	bf08      	it	eq
 8083c4e:	4770      	bxeq	lr
 8083c50:	b530      	push	{r4, r5, lr}
 8083c52:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8083c56:	d502      	bpl.n	8083c5e <__aeabi_l2d+0x16>
 8083c58:	4240      	negs	r0, r0
 8083c5a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083c5e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083c62:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083c66:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8083c6a:	f43f aedc 	beq.w	8083a26 <__adddf3+0xe6>
 8083c6e:	f04f 0203 	mov.w	r2, #3
 8083c72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083c76:	bf18      	it	ne
 8083c78:	3203      	addne	r2, #3
 8083c7a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083c7e:	bf18      	it	ne
 8083c80:	3203      	addne	r2, #3
 8083c82:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8083c86:	f1c2 0320 	rsb	r3, r2, #32
 8083c8a:	fa00 fc03 	lsl.w	ip, r0, r3
 8083c8e:	fa20 f002 	lsr.w	r0, r0, r2
 8083c92:	fa01 fe03 	lsl.w	lr, r1, r3
 8083c96:	ea40 000e 	orr.w	r0, r0, lr
 8083c9a:	fa21 f102 	lsr.w	r1, r1, r2
 8083c9e:	4414      	add	r4, r2
 8083ca0:	e6c1      	b.n	8083a26 <__adddf3+0xe6>
 8083ca2:	bf00      	nop

08083ca4 <__aeabi_dmul>:
 8083ca4:	b570      	push	{r4, r5, r6, lr}
 8083ca6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083caa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083cae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083cb2:	bf1d      	ittte	ne
 8083cb4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083cb8:	ea94 0f0c 	teqne	r4, ip
 8083cbc:	ea95 0f0c 	teqne	r5, ip
 8083cc0:	f000 f8de 	bleq	8083e80 <__aeabi_dmul+0x1dc>
 8083cc4:	442c      	add	r4, r5
 8083cc6:	ea81 0603 	eor.w	r6, r1, r3
 8083cca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8083cce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8083cd2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8083cd6:	bf18      	it	ne
 8083cd8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8083cdc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083ce0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083ce4:	d038      	beq.n	8083d58 <__aeabi_dmul+0xb4>
 8083ce6:	fba0 ce02 	umull	ip, lr, r0, r2
 8083cea:	f04f 0500 	mov.w	r5, #0
 8083cee:	fbe1 e502 	umlal	lr, r5, r1, r2
 8083cf2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8083cf6:	fbe0 e503 	umlal	lr, r5, r0, r3
 8083cfa:	f04f 0600 	mov.w	r6, #0
 8083cfe:	fbe1 5603 	umlal	r5, r6, r1, r3
 8083d02:	f09c 0f00 	teq	ip, #0
 8083d06:	bf18      	it	ne
 8083d08:	f04e 0e01 	orrne.w	lr, lr, #1
 8083d0c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8083d10:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8083d14:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8083d18:	d204      	bcs.n	8083d24 <__aeabi_dmul+0x80>
 8083d1a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8083d1e:	416d      	adcs	r5, r5
 8083d20:	eb46 0606 	adc.w	r6, r6, r6
 8083d24:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8083d28:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8083d2c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8083d30:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8083d34:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8083d38:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083d3c:	bf88      	it	hi
 8083d3e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083d42:	d81e      	bhi.n	8083d82 <__aeabi_dmul+0xde>
 8083d44:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8083d48:	bf08      	it	eq
 8083d4a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8083d4e:	f150 0000 	adcs.w	r0, r0, #0
 8083d52:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083d56:	bd70      	pop	{r4, r5, r6, pc}
 8083d58:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8083d5c:	ea46 0101 	orr.w	r1, r6, r1
 8083d60:	ea40 0002 	orr.w	r0, r0, r2
 8083d64:	ea81 0103 	eor.w	r1, r1, r3
 8083d68:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8083d6c:	bfc2      	ittt	gt
 8083d6e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083d72:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083d76:	bd70      	popgt	{r4, r5, r6, pc}
 8083d78:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083d7c:	f04f 0e00 	mov.w	lr, #0
 8083d80:	3c01      	subs	r4, #1
 8083d82:	f300 80ab 	bgt.w	8083edc <__aeabi_dmul+0x238>
 8083d86:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8083d8a:	bfde      	ittt	le
 8083d8c:	2000      	movle	r0, #0
 8083d8e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8083d92:	bd70      	pople	{r4, r5, r6, pc}
 8083d94:	f1c4 0400 	rsb	r4, r4, #0
 8083d98:	3c20      	subs	r4, #32
 8083d9a:	da35      	bge.n	8083e08 <__aeabi_dmul+0x164>
 8083d9c:	340c      	adds	r4, #12
 8083d9e:	dc1b      	bgt.n	8083dd8 <__aeabi_dmul+0x134>
 8083da0:	f104 0414 	add.w	r4, r4, #20
 8083da4:	f1c4 0520 	rsb	r5, r4, #32
 8083da8:	fa00 f305 	lsl.w	r3, r0, r5
 8083dac:	fa20 f004 	lsr.w	r0, r0, r4
 8083db0:	fa01 f205 	lsl.w	r2, r1, r5
 8083db4:	ea40 0002 	orr.w	r0, r0, r2
 8083db8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083dbc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083dc0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083dc4:	fa21 f604 	lsr.w	r6, r1, r4
 8083dc8:	eb42 0106 	adc.w	r1, r2, r6
 8083dcc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083dd0:	bf08      	it	eq
 8083dd2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083dd6:	bd70      	pop	{r4, r5, r6, pc}
 8083dd8:	f1c4 040c 	rsb	r4, r4, #12
 8083ddc:	f1c4 0520 	rsb	r5, r4, #32
 8083de0:	fa00 f304 	lsl.w	r3, r0, r4
 8083de4:	fa20 f005 	lsr.w	r0, r0, r5
 8083de8:	fa01 f204 	lsl.w	r2, r1, r4
 8083dec:	ea40 0002 	orr.w	r0, r0, r2
 8083df0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083df4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083df8:	f141 0100 	adc.w	r1, r1, #0
 8083dfc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083e00:	bf08      	it	eq
 8083e02:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083e06:	bd70      	pop	{r4, r5, r6, pc}
 8083e08:	f1c4 0520 	rsb	r5, r4, #32
 8083e0c:	fa00 f205 	lsl.w	r2, r0, r5
 8083e10:	ea4e 0e02 	orr.w	lr, lr, r2
 8083e14:	fa20 f304 	lsr.w	r3, r0, r4
 8083e18:	fa01 f205 	lsl.w	r2, r1, r5
 8083e1c:	ea43 0302 	orr.w	r3, r3, r2
 8083e20:	fa21 f004 	lsr.w	r0, r1, r4
 8083e24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083e28:	fa21 f204 	lsr.w	r2, r1, r4
 8083e2c:	ea20 0002 	bic.w	r0, r0, r2
 8083e30:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8083e34:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083e38:	bf08      	it	eq
 8083e3a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083e3e:	bd70      	pop	{r4, r5, r6, pc}
 8083e40:	f094 0f00 	teq	r4, #0
 8083e44:	d10f      	bne.n	8083e66 <__aeabi_dmul+0x1c2>
 8083e46:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8083e4a:	0040      	lsls	r0, r0, #1
 8083e4c:	eb41 0101 	adc.w	r1, r1, r1
 8083e50:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083e54:	bf08      	it	eq
 8083e56:	3c01      	subeq	r4, #1
 8083e58:	d0f7      	beq.n	8083e4a <__aeabi_dmul+0x1a6>
 8083e5a:	ea41 0106 	orr.w	r1, r1, r6
 8083e5e:	f095 0f00 	teq	r5, #0
 8083e62:	bf18      	it	ne
 8083e64:	4770      	bxne	lr
 8083e66:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8083e6a:	0052      	lsls	r2, r2, #1
 8083e6c:	eb43 0303 	adc.w	r3, r3, r3
 8083e70:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8083e74:	bf08      	it	eq
 8083e76:	3d01      	subeq	r5, #1
 8083e78:	d0f7      	beq.n	8083e6a <__aeabi_dmul+0x1c6>
 8083e7a:	ea43 0306 	orr.w	r3, r3, r6
 8083e7e:	4770      	bx	lr
 8083e80:	ea94 0f0c 	teq	r4, ip
 8083e84:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083e88:	bf18      	it	ne
 8083e8a:	ea95 0f0c 	teqne	r5, ip
 8083e8e:	d00c      	beq.n	8083eaa <__aeabi_dmul+0x206>
 8083e90:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083e94:	bf18      	it	ne
 8083e96:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083e9a:	d1d1      	bne.n	8083e40 <__aeabi_dmul+0x19c>
 8083e9c:	ea81 0103 	eor.w	r1, r1, r3
 8083ea0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083ea4:	f04f 0000 	mov.w	r0, #0
 8083ea8:	bd70      	pop	{r4, r5, r6, pc}
 8083eaa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083eae:	bf06      	itte	eq
 8083eb0:	4610      	moveq	r0, r2
 8083eb2:	4619      	moveq	r1, r3
 8083eb4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083eb8:	d019      	beq.n	8083eee <__aeabi_dmul+0x24a>
 8083eba:	ea94 0f0c 	teq	r4, ip
 8083ebe:	d102      	bne.n	8083ec6 <__aeabi_dmul+0x222>
 8083ec0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083ec4:	d113      	bne.n	8083eee <__aeabi_dmul+0x24a>
 8083ec6:	ea95 0f0c 	teq	r5, ip
 8083eca:	d105      	bne.n	8083ed8 <__aeabi_dmul+0x234>
 8083ecc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083ed0:	bf1c      	itt	ne
 8083ed2:	4610      	movne	r0, r2
 8083ed4:	4619      	movne	r1, r3
 8083ed6:	d10a      	bne.n	8083eee <__aeabi_dmul+0x24a>
 8083ed8:	ea81 0103 	eor.w	r1, r1, r3
 8083edc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083ee0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083ee4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083ee8:	f04f 0000 	mov.w	r0, #0
 8083eec:	bd70      	pop	{r4, r5, r6, pc}
 8083eee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083ef2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8083ef6:	bd70      	pop	{r4, r5, r6, pc}

08083ef8 <__aeabi_ddiv>:
 8083ef8:	b570      	push	{r4, r5, r6, lr}
 8083efa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083efe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083f02:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083f06:	bf1d      	ittte	ne
 8083f08:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083f0c:	ea94 0f0c 	teqne	r4, ip
 8083f10:	ea95 0f0c 	teqne	r5, ip
 8083f14:	f000 f8a7 	bleq	8084066 <__aeabi_ddiv+0x16e>
 8083f18:	eba4 0405 	sub.w	r4, r4, r5
 8083f1c:	ea81 0e03 	eor.w	lr, r1, r3
 8083f20:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083f24:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083f28:	f000 8088 	beq.w	808403c <__aeabi_ddiv+0x144>
 8083f2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083f30:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083f34:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083f38:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083f3c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083f40:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083f44:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083f48:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083f4c:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083f50:	429d      	cmp	r5, r3
 8083f52:	bf08      	it	eq
 8083f54:	4296      	cmpeq	r6, r2
 8083f56:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083f5a:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083f5e:	d202      	bcs.n	8083f66 <__aeabi_ddiv+0x6e>
 8083f60:	085b      	lsrs	r3, r3, #1
 8083f62:	ea4f 0232 	mov.w	r2, r2, rrx
 8083f66:	1ab6      	subs	r6, r6, r2
 8083f68:	eb65 0503 	sbc.w	r5, r5, r3
 8083f6c:	085b      	lsrs	r3, r3, #1
 8083f6e:	ea4f 0232 	mov.w	r2, r2, rrx
 8083f72:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083f76:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083f7a:	ebb6 0e02 	subs.w	lr, r6, r2
 8083f7e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083f82:	bf22      	ittt	cs
 8083f84:	1ab6      	subcs	r6, r6, r2
 8083f86:	4675      	movcs	r5, lr
 8083f88:	ea40 000c 	orrcs.w	r0, r0, ip
 8083f8c:	085b      	lsrs	r3, r3, #1
 8083f8e:	ea4f 0232 	mov.w	r2, r2, rrx
 8083f92:	ebb6 0e02 	subs.w	lr, r6, r2
 8083f96:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083f9a:	bf22      	ittt	cs
 8083f9c:	1ab6      	subcs	r6, r6, r2
 8083f9e:	4675      	movcs	r5, lr
 8083fa0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083fa4:	085b      	lsrs	r3, r3, #1
 8083fa6:	ea4f 0232 	mov.w	r2, r2, rrx
 8083faa:	ebb6 0e02 	subs.w	lr, r6, r2
 8083fae:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083fb2:	bf22      	ittt	cs
 8083fb4:	1ab6      	subcs	r6, r6, r2
 8083fb6:	4675      	movcs	r5, lr
 8083fb8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083fbc:	085b      	lsrs	r3, r3, #1
 8083fbe:	ea4f 0232 	mov.w	r2, r2, rrx
 8083fc2:	ebb6 0e02 	subs.w	lr, r6, r2
 8083fc6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083fca:	bf22      	ittt	cs
 8083fcc:	1ab6      	subcs	r6, r6, r2
 8083fce:	4675      	movcs	r5, lr
 8083fd0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083fd4:	ea55 0e06 	orrs.w	lr, r5, r6
 8083fd8:	d018      	beq.n	808400c <__aeabi_ddiv+0x114>
 8083fda:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8083fde:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8083fe2:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8083fe6:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8083fea:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8083fee:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8083ff2:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8083ff6:	d1c0      	bne.n	8083f7a <__aeabi_ddiv+0x82>
 8083ff8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083ffc:	d10b      	bne.n	8084016 <__aeabi_ddiv+0x11e>
 8083ffe:	ea41 0100 	orr.w	r1, r1, r0
 8084002:	f04f 0000 	mov.w	r0, #0
 8084006:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 808400a:	e7b6      	b.n	8083f7a <__aeabi_ddiv+0x82>
 808400c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8084010:	bf04      	itt	eq
 8084012:	4301      	orreq	r1, r0
 8084014:	2000      	moveq	r0, #0
 8084016:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 808401a:	bf88      	it	hi
 808401c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8084020:	f63f aeaf 	bhi.w	8083d82 <__aeabi_dmul+0xde>
 8084024:	ebb5 0c03 	subs.w	ip, r5, r3
 8084028:	bf04      	itt	eq
 808402a:	ebb6 0c02 	subseq.w	ip, r6, r2
 808402e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8084032:	f150 0000 	adcs.w	r0, r0, #0
 8084036:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 808403a:	bd70      	pop	{r4, r5, r6, pc}
 808403c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8084040:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8084044:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8084048:	bfc2      	ittt	gt
 808404a:	ebd4 050c 	rsbsgt	r5, r4, ip
 808404e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8084052:	bd70      	popgt	{r4, r5, r6, pc}
 8084054:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084058:	f04f 0e00 	mov.w	lr, #0
 808405c:	3c01      	subs	r4, #1
 808405e:	e690      	b.n	8083d82 <__aeabi_dmul+0xde>
 8084060:	ea45 0e06 	orr.w	lr, r5, r6
 8084064:	e68d      	b.n	8083d82 <__aeabi_dmul+0xde>
 8084066:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 808406a:	ea94 0f0c 	teq	r4, ip
 808406e:	bf08      	it	eq
 8084070:	ea95 0f0c 	teqeq	r5, ip
 8084074:	f43f af3b 	beq.w	8083eee <__aeabi_dmul+0x24a>
 8084078:	ea94 0f0c 	teq	r4, ip
 808407c:	d10a      	bne.n	8084094 <__aeabi_ddiv+0x19c>
 808407e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8084082:	f47f af34 	bne.w	8083eee <__aeabi_dmul+0x24a>
 8084086:	ea95 0f0c 	teq	r5, ip
 808408a:	f47f af25 	bne.w	8083ed8 <__aeabi_dmul+0x234>
 808408e:	4610      	mov	r0, r2
 8084090:	4619      	mov	r1, r3
 8084092:	e72c      	b.n	8083eee <__aeabi_dmul+0x24a>
 8084094:	ea95 0f0c 	teq	r5, ip
 8084098:	d106      	bne.n	80840a8 <__aeabi_ddiv+0x1b0>
 808409a:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 808409e:	f43f aefd 	beq.w	8083e9c <__aeabi_dmul+0x1f8>
 80840a2:	4610      	mov	r0, r2
 80840a4:	4619      	mov	r1, r3
 80840a6:	e722      	b.n	8083eee <__aeabi_dmul+0x24a>
 80840a8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80840ac:	bf18      	it	ne
 80840ae:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80840b2:	f47f aec5 	bne.w	8083e40 <__aeabi_dmul+0x19c>
 80840b6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80840ba:	f47f af0d 	bne.w	8083ed8 <__aeabi_dmul+0x234>
 80840be:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80840c2:	f47f aeeb 	bne.w	8083e9c <__aeabi_dmul+0x1f8>
 80840c6:	e712      	b.n	8083eee <__aeabi_dmul+0x24a>

080840c8 <__aeabi_d2f>:
 80840c8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80840cc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80840d0:	bf24      	itt	cs
 80840d2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80840d6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80840da:	d90d      	bls.n	80840f8 <__aeabi_d2f+0x30>
 80840dc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80840e0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 80840e4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80840e8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80840ec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80840f0:	bf08      	it	eq
 80840f2:	f020 0001 	biceq.w	r0, r0, #1
 80840f6:	4770      	bx	lr
 80840f8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80840fc:	d121      	bne.n	8084142 <__aeabi_d2f+0x7a>
 80840fe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8084102:	bfbc      	itt	lt
 8084104:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8084108:	4770      	bxlt	lr
 808410a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 808410e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8084112:	f1c2 0218 	rsb	r2, r2, #24
 8084116:	f1c2 0c20 	rsb	ip, r2, #32
 808411a:	fa10 f30c 	lsls.w	r3, r0, ip
 808411e:	fa20 f002 	lsr.w	r0, r0, r2
 8084122:	bf18      	it	ne
 8084124:	f040 0001 	orrne.w	r0, r0, #1
 8084128:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 808412c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8084130:	fa03 fc0c 	lsl.w	ip, r3, ip
 8084134:	ea40 000c 	orr.w	r0, r0, ip
 8084138:	fa23 f302 	lsr.w	r3, r3, r2
 808413c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8084140:	e7cc      	b.n	80840dc <__aeabi_d2f+0x14>
 8084142:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8084146:	d107      	bne.n	8084158 <__aeabi_d2f+0x90>
 8084148:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 808414c:	bf1e      	ittt	ne
 808414e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8084152:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8084156:	4770      	bxne	lr
 8084158:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 808415c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084160:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084164:	4770      	bx	lr
 8084166:	bf00      	nop

08084168 <__aeabi_frsub>:
 8084168:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 808416c:	e002      	b.n	8084174 <__addsf3>
 808416e:	bf00      	nop

08084170 <__aeabi_fsub>:
 8084170:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08084174 <__addsf3>:
 8084174:	0042      	lsls	r2, r0, #1
 8084176:	bf1f      	itttt	ne
 8084178:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 808417c:	ea92 0f03 	teqne	r2, r3
 8084180:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8084184:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084188:	d06a      	beq.n	8084260 <__addsf3+0xec>
 808418a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 808418e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8084192:	bfc1      	itttt	gt
 8084194:	18d2      	addgt	r2, r2, r3
 8084196:	4041      	eorgt	r1, r0
 8084198:	4048      	eorgt	r0, r1
 808419a:	4041      	eorgt	r1, r0
 808419c:	bfb8      	it	lt
 808419e:	425b      	neglt	r3, r3
 80841a0:	2b19      	cmp	r3, #25
 80841a2:	bf88      	it	hi
 80841a4:	4770      	bxhi	lr
 80841a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80841aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80841ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80841b2:	bf18      	it	ne
 80841b4:	4240      	negne	r0, r0
 80841b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80841ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80841be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80841c2:	bf18      	it	ne
 80841c4:	4249      	negne	r1, r1
 80841c6:	ea92 0f03 	teq	r2, r3
 80841ca:	d03f      	beq.n	808424c <__addsf3+0xd8>
 80841cc:	f1a2 0201 	sub.w	r2, r2, #1
 80841d0:	fa41 fc03 	asr.w	ip, r1, r3
 80841d4:	eb10 000c 	adds.w	r0, r0, ip
 80841d8:	f1c3 0320 	rsb	r3, r3, #32
 80841dc:	fa01 f103 	lsl.w	r1, r1, r3
 80841e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80841e4:	d502      	bpl.n	80841ec <__addsf3+0x78>
 80841e6:	4249      	negs	r1, r1
 80841e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80841ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80841f0:	d313      	bcc.n	808421a <__addsf3+0xa6>
 80841f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80841f6:	d306      	bcc.n	8084206 <__addsf3+0x92>
 80841f8:	0840      	lsrs	r0, r0, #1
 80841fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80841fe:	f102 0201 	add.w	r2, r2, #1
 8084202:	2afe      	cmp	r2, #254	; 0xfe
 8084204:	d251      	bcs.n	80842aa <__addsf3+0x136>
 8084206:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 808420a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808420e:	bf08      	it	eq
 8084210:	f020 0001 	biceq.w	r0, r0, #1
 8084214:	ea40 0003 	orr.w	r0, r0, r3
 8084218:	4770      	bx	lr
 808421a:	0049      	lsls	r1, r1, #1
 808421c:	eb40 0000 	adc.w	r0, r0, r0
 8084220:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 8084224:	f1a2 0201 	sub.w	r2, r2, #1
 8084228:	d1ed      	bne.n	8084206 <__addsf3+0x92>
 808422a:	fab0 fc80 	clz	ip, r0
 808422e:	f1ac 0c08 	sub.w	ip, ip, #8
 8084232:	ebb2 020c 	subs.w	r2, r2, ip
 8084236:	fa00 f00c 	lsl.w	r0, r0, ip
 808423a:	bfaa      	itet	ge
 808423c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8084240:	4252      	neglt	r2, r2
 8084242:	4318      	orrge	r0, r3
 8084244:	bfbc      	itt	lt
 8084246:	40d0      	lsrlt	r0, r2
 8084248:	4318      	orrlt	r0, r3
 808424a:	4770      	bx	lr
 808424c:	f092 0f00 	teq	r2, #0
 8084250:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8084254:	bf06      	itte	eq
 8084256:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 808425a:	3201      	addeq	r2, #1
 808425c:	3b01      	subne	r3, #1
 808425e:	e7b5      	b.n	80841cc <__addsf3+0x58>
 8084260:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8084264:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084268:	bf18      	it	ne
 808426a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808426e:	d021      	beq.n	80842b4 <__addsf3+0x140>
 8084270:	ea92 0f03 	teq	r2, r3
 8084274:	d004      	beq.n	8084280 <__addsf3+0x10c>
 8084276:	f092 0f00 	teq	r2, #0
 808427a:	bf08      	it	eq
 808427c:	4608      	moveq	r0, r1
 808427e:	4770      	bx	lr
 8084280:	ea90 0f01 	teq	r0, r1
 8084284:	bf1c      	itt	ne
 8084286:	2000      	movne	r0, #0
 8084288:	4770      	bxne	lr
 808428a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 808428e:	d104      	bne.n	808429a <__addsf3+0x126>
 8084290:	0040      	lsls	r0, r0, #1
 8084292:	bf28      	it	cs
 8084294:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8084298:	4770      	bx	lr
 808429a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 808429e:	bf3c      	itt	cc
 80842a0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 80842a4:	4770      	bxcc	lr
 80842a6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80842aa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80842ae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80842b2:	4770      	bx	lr
 80842b4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80842b8:	bf16      	itet	ne
 80842ba:	4608      	movne	r0, r1
 80842bc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80842c0:	4601      	movne	r1, r0
 80842c2:	0242      	lsls	r2, r0, #9
 80842c4:	bf06      	itte	eq
 80842c6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80842ca:	ea90 0f01 	teqeq	r0, r1
 80842ce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80842d2:	4770      	bx	lr

080842d4 <__aeabi_ui2f>:
 80842d4:	f04f 0300 	mov.w	r3, #0
 80842d8:	e004      	b.n	80842e4 <__aeabi_i2f+0x8>
 80842da:	bf00      	nop

080842dc <__aeabi_i2f>:
 80842dc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80842e0:	bf48      	it	mi
 80842e2:	4240      	negmi	r0, r0
 80842e4:	ea5f 0c00 	movs.w	ip, r0
 80842e8:	bf08      	it	eq
 80842ea:	4770      	bxeq	lr
 80842ec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80842f0:	4601      	mov	r1, r0
 80842f2:	f04f 0000 	mov.w	r0, #0
 80842f6:	e01c      	b.n	8084332 <__aeabi_l2f+0x2a>

080842f8 <__aeabi_ul2f>:
 80842f8:	ea50 0201 	orrs.w	r2, r0, r1
 80842fc:	bf08      	it	eq
 80842fe:	4770      	bxeq	lr
 8084300:	f04f 0300 	mov.w	r3, #0
 8084304:	e00a      	b.n	808431c <__aeabi_l2f+0x14>
 8084306:	bf00      	nop

08084308 <__aeabi_l2f>:
 8084308:	ea50 0201 	orrs.w	r2, r0, r1
 808430c:	bf08      	it	eq
 808430e:	4770      	bxeq	lr
 8084310:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8084314:	d502      	bpl.n	808431c <__aeabi_l2f+0x14>
 8084316:	4240      	negs	r0, r0
 8084318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 808431c:	ea5f 0c01 	movs.w	ip, r1
 8084320:	bf02      	ittt	eq
 8084322:	4684      	moveq	ip, r0
 8084324:	4601      	moveq	r1, r0
 8084326:	2000      	moveq	r0, #0
 8084328:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 808432c:	bf08      	it	eq
 808432e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8084332:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8084336:	fabc f28c 	clz	r2, ip
 808433a:	3a08      	subs	r2, #8
 808433c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8084340:	db10      	blt.n	8084364 <__aeabi_l2f+0x5c>
 8084342:	fa01 fc02 	lsl.w	ip, r1, r2
 8084346:	4463      	add	r3, ip
 8084348:	fa00 fc02 	lsl.w	ip, r0, r2
 808434c:	f1c2 0220 	rsb	r2, r2, #32
 8084350:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8084354:	fa20 f202 	lsr.w	r2, r0, r2
 8084358:	eb43 0002 	adc.w	r0, r3, r2
 808435c:	bf08      	it	eq
 808435e:	f020 0001 	biceq.w	r0, r0, #1
 8084362:	4770      	bx	lr
 8084364:	f102 0220 	add.w	r2, r2, #32
 8084368:	fa01 fc02 	lsl.w	ip, r1, r2
 808436c:	f1c2 0220 	rsb	r2, r2, #32
 8084370:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8084374:	fa21 f202 	lsr.w	r2, r1, r2
 8084378:	eb43 0002 	adc.w	r0, r3, r2
 808437c:	bf08      	it	eq
 808437e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8084382:	4770      	bx	lr

08084384 <__aeabi_fmul>:
 8084384:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084388:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 808438c:	bf1e      	ittt	ne
 808438e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8084392:	ea92 0f0c 	teqne	r2, ip
 8084396:	ea93 0f0c 	teqne	r3, ip
 808439a:	d06f      	beq.n	808447c <__aeabi_fmul+0xf8>
 808439c:	441a      	add	r2, r3
 808439e:	ea80 0c01 	eor.w	ip, r0, r1
 80843a2:	0240      	lsls	r0, r0, #9
 80843a4:	bf18      	it	ne
 80843a6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80843aa:	d01e      	beq.n	80843ea <__aeabi_fmul+0x66>
 80843ac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80843b0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80843b4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80843b8:	fba0 3101 	umull	r3, r1, r0, r1
 80843bc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80843c0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80843c4:	bf3e      	ittt	cc
 80843c6:	0049      	lslcc	r1, r1, #1
 80843c8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80843cc:	005b      	lslcc	r3, r3, #1
 80843ce:	ea40 0001 	orr.w	r0, r0, r1
 80843d2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80843d6:	2afd      	cmp	r2, #253	; 0xfd
 80843d8:	d81d      	bhi.n	8084416 <__aeabi_fmul+0x92>
 80843da:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80843de:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80843e2:	bf08      	it	eq
 80843e4:	f020 0001 	biceq.w	r0, r0, #1
 80843e8:	4770      	bx	lr
 80843ea:	f090 0f00 	teq	r0, #0
 80843ee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80843f2:	bf08      	it	eq
 80843f4:	0249      	lsleq	r1, r1, #9
 80843f6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80843fa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80843fe:	3a7f      	subs	r2, #127	; 0x7f
 8084400:	bfc2      	ittt	gt
 8084402:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8084406:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 808440a:	4770      	bxgt	lr
 808440c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084410:	f04f 0300 	mov.w	r3, #0
 8084414:	3a01      	subs	r2, #1
 8084416:	dc5d      	bgt.n	80844d4 <__aeabi_fmul+0x150>
 8084418:	f112 0f19 	cmn.w	r2, #25
 808441c:	bfdc      	itt	le
 808441e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8084422:	4770      	bxle	lr
 8084424:	f1c2 0200 	rsb	r2, r2, #0
 8084428:	0041      	lsls	r1, r0, #1
 808442a:	fa21 f102 	lsr.w	r1, r1, r2
 808442e:	f1c2 0220 	rsb	r2, r2, #32
 8084432:	fa00 fc02 	lsl.w	ip, r0, r2
 8084436:	ea5f 0031 	movs.w	r0, r1, rrx
 808443a:	f140 0000 	adc.w	r0, r0, #0
 808443e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8084442:	bf08      	it	eq
 8084444:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8084448:	4770      	bx	lr
 808444a:	f092 0f00 	teq	r2, #0
 808444e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8084452:	bf02      	ittt	eq
 8084454:	0040      	lsleq	r0, r0, #1
 8084456:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 808445a:	3a01      	subeq	r2, #1
 808445c:	d0f9      	beq.n	8084452 <__aeabi_fmul+0xce>
 808445e:	ea40 000c 	orr.w	r0, r0, ip
 8084462:	f093 0f00 	teq	r3, #0
 8084466:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 808446a:	bf02      	ittt	eq
 808446c:	0049      	lsleq	r1, r1, #1
 808446e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8084472:	3b01      	subeq	r3, #1
 8084474:	d0f9      	beq.n	808446a <__aeabi_fmul+0xe6>
 8084476:	ea41 010c 	orr.w	r1, r1, ip
 808447a:	e78f      	b.n	808439c <__aeabi_fmul+0x18>
 808447c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084480:	ea92 0f0c 	teq	r2, ip
 8084484:	bf18      	it	ne
 8084486:	ea93 0f0c 	teqne	r3, ip
 808448a:	d00a      	beq.n	80844a2 <__aeabi_fmul+0x11e>
 808448c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8084490:	bf18      	it	ne
 8084492:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8084496:	d1d8      	bne.n	808444a <__aeabi_fmul+0xc6>
 8084498:	ea80 0001 	eor.w	r0, r0, r1
 808449c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80844a0:	4770      	bx	lr
 80844a2:	f090 0f00 	teq	r0, #0
 80844a6:	bf17      	itett	ne
 80844a8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80844ac:	4608      	moveq	r0, r1
 80844ae:	f091 0f00 	teqne	r1, #0
 80844b2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80844b6:	d014      	beq.n	80844e2 <__aeabi_fmul+0x15e>
 80844b8:	ea92 0f0c 	teq	r2, ip
 80844bc:	d101      	bne.n	80844c2 <__aeabi_fmul+0x13e>
 80844be:	0242      	lsls	r2, r0, #9
 80844c0:	d10f      	bne.n	80844e2 <__aeabi_fmul+0x15e>
 80844c2:	ea93 0f0c 	teq	r3, ip
 80844c6:	d103      	bne.n	80844d0 <__aeabi_fmul+0x14c>
 80844c8:	024b      	lsls	r3, r1, #9
 80844ca:	bf18      	it	ne
 80844cc:	4608      	movne	r0, r1
 80844ce:	d108      	bne.n	80844e2 <__aeabi_fmul+0x15e>
 80844d0:	ea80 0001 	eor.w	r0, r0, r1
 80844d4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80844d8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80844dc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80844e0:	4770      	bx	lr
 80844e2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80844e6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80844ea:	4770      	bx	lr

080844ec <__aeabi_fdiv>:
 80844ec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80844f0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80844f4:	bf1e      	ittt	ne
 80844f6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80844fa:	ea92 0f0c 	teqne	r2, ip
 80844fe:	ea93 0f0c 	teqne	r3, ip
 8084502:	d069      	beq.n	80845d8 <__aeabi_fdiv+0xec>
 8084504:	eba2 0203 	sub.w	r2, r2, r3
 8084508:	ea80 0c01 	eor.w	ip, r0, r1
 808450c:	0249      	lsls	r1, r1, #9
 808450e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8084512:	d037      	beq.n	8084584 <__aeabi_fdiv+0x98>
 8084514:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8084518:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 808451c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8084520:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8084524:	428b      	cmp	r3, r1
 8084526:	bf38      	it	cc
 8084528:	005b      	lslcc	r3, r3, #1
 808452a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 808452e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8084532:	428b      	cmp	r3, r1
 8084534:	bf24      	itt	cs
 8084536:	1a5b      	subcs	r3, r3, r1
 8084538:	ea40 000c 	orrcs.w	r0, r0, ip
 808453c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8084540:	bf24      	itt	cs
 8084542:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8084546:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 808454a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 808454e:	bf24      	itt	cs
 8084550:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8084554:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8084558:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 808455c:	bf24      	itt	cs
 808455e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8084562:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8084566:	011b      	lsls	r3, r3, #4
 8084568:	bf18      	it	ne
 808456a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 808456e:	d1e0      	bne.n	8084532 <__aeabi_fdiv+0x46>
 8084570:	2afd      	cmp	r2, #253	; 0xfd
 8084572:	f63f af50 	bhi.w	8084416 <__aeabi_fmul+0x92>
 8084576:	428b      	cmp	r3, r1
 8084578:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 808457c:	bf08      	it	eq
 808457e:	f020 0001 	biceq.w	r0, r0, #1
 8084582:	4770      	bx	lr
 8084584:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8084588:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 808458c:	327f      	adds	r2, #127	; 0x7f
 808458e:	bfc2      	ittt	gt
 8084590:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8084594:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8084598:	4770      	bxgt	lr
 808459a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808459e:	f04f 0300 	mov.w	r3, #0
 80845a2:	3a01      	subs	r2, #1
 80845a4:	e737      	b.n	8084416 <__aeabi_fmul+0x92>
 80845a6:	f092 0f00 	teq	r2, #0
 80845aa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80845ae:	bf02      	ittt	eq
 80845b0:	0040      	lsleq	r0, r0, #1
 80845b2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80845b6:	3a01      	subeq	r2, #1
 80845b8:	d0f9      	beq.n	80845ae <__aeabi_fdiv+0xc2>
 80845ba:	ea40 000c 	orr.w	r0, r0, ip
 80845be:	f093 0f00 	teq	r3, #0
 80845c2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80845c6:	bf02      	ittt	eq
 80845c8:	0049      	lsleq	r1, r1, #1
 80845ca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80845ce:	3b01      	subeq	r3, #1
 80845d0:	d0f9      	beq.n	80845c6 <__aeabi_fdiv+0xda>
 80845d2:	ea41 010c 	orr.w	r1, r1, ip
 80845d6:	e795      	b.n	8084504 <__aeabi_fdiv+0x18>
 80845d8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80845dc:	ea92 0f0c 	teq	r2, ip
 80845e0:	d108      	bne.n	80845f4 <__aeabi_fdiv+0x108>
 80845e2:	0242      	lsls	r2, r0, #9
 80845e4:	f47f af7d 	bne.w	80844e2 <__aeabi_fmul+0x15e>
 80845e8:	ea93 0f0c 	teq	r3, ip
 80845ec:	f47f af70 	bne.w	80844d0 <__aeabi_fmul+0x14c>
 80845f0:	4608      	mov	r0, r1
 80845f2:	e776      	b.n	80844e2 <__aeabi_fmul+0x15e>
 80845f4:	ea93 0f0c 	teq	r3, ip
 80845f8:	d104      	bne.n	8084604 <__aeabi_fdiv+0x118>
 80845fa:	024b      	lsls	r3, r1, #9
 80845fc:	f43f af4c 	beq.w	8084498 <__aeabi_fmul+0x114>
 8084600:	4608      	mov	r0, r1
 8084602:	e76e      	b.n	80844e2 <__aeabi_fmul+0x15e>
 8084604:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8084608:	bf18      	it	ne
 808460a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808460e:	d1ca      	bne.n	80845a6 <__aeabi_fdiv+0xba>
 8084610:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8084614:	f47f af5c 	bne.w	80844d0 <__aeabi_fmul+0x14c>
 8084618:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 808461c:	f47f af3c 	bne.w	8084498 <__aeabi_fmul+0x114>
 8084620:	e75f      	b.n	80844e2 <__aeabi_fmul+0x15e>
 8084622:	bf00      	nop

08084624 <__gesf2>:
 8084624:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8084628:	e006      	b.n	8084638 <__cmpsf2+0x4>
 808462a:	bf00      	nop

0808462c <__lesf2>:
 808462c:	f04f 0c01 	mov.w	ip, #1
 8084630:	e002      	b.n	8084638 <__cmpsf2+0x4>
 8084632:	bf00      	nop

08084634 <__cmpsf2>:
 8084634:	f04f 0c01 	mov.w	ip, #1
 8084638:	f84d cd04 	str.w	ip, [sp, #-4]!
 808463c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8084640:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8084644:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084648:	bf18      	it	ne
 808464a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 808464e:	d011      	beq.n	8084674 <__cmpsf2+0x40>
 8084650:	b001      	add	sp, #4
 8084652:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8084656:	bf18      	it	ne
 8084658:	ea90 0f01 	teqne	r0, r1
 808465c:	bf58      	it	pl
 808465e:	ebb2 0003 	subspl.w	r0, r2, r3
 8084662:	bf88      	it	hi
 8084664:	17c8      	asrhi	r0, r1, #31
 8084666:	bf38      	it	cc
 8084668:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 808466c:	bf18      	it	ne
 808466e:	f040 0001 	orrne.w	r0, r0, #1
 8084672:	4770      	bx	lr
 8084674:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084678:	d102      	bne.n	8084680 <__cmpsf2+0x4c>
 808467a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 808467e:	d105      	bne.n	808468c <__cmpsf2+0x58>
 8084680:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8084684:	d1e4      	bne.n	8084650 <__cmpsf2+0x1c>
 8084686:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 808468a:	d0e1      	beq.n	8084650 <__cmpsf2+0x1c>
 808468c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8084690:	4770      	bx	lr
 8084692:	bf00      	nop

08084694 <__aeabi_cfrcmple>:
 8084694:	4684      	mov	ip, r0
 8084696:	4608      	mov	r0, r1
 8084698:	4661      	mov	r1, ip
 808469a:	e7ff      	b.n	808469c <__aeabi_cfcmpeq>

0808469c <__aeabi_cfcmpeq>:
 808469c:	b50f      	push	{r0, r1, r2, r3, lr}
 808469e:	f7ff ffc9 	bl	8084634 <__cmpsf2>
 80846a2:	2800      	cmp	r0, #0
 80846a4:	bf48      	it	mi
 80846a6:	f110 0f00 	cmnmi.w	r0, #0
 80846aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080846ac <__aeabi_fcmpeq>:
 80846ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80846b0:	f7ff fff4 	bl	808469c <__aeabi_cfcmpeq>
 80846b4:	bf0c      	ite	eq
 80846b6:	2001      	moveq	r0, #1
 80846b8:	2000      	movne	r0, #0
 80846ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80846be:	bf00      	nop

080846c0 <__aeabi_fcmplt>:
 80846c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80846c4:	f7ff ffea 	bl	808469c <__aeabi_cfcmpeq>
 80846c8:	bf34      	ite	cc
 80846ca:	2001      	movcc	r0, #1
 80846cc:	2000      	movcs	r0, #0
 80846ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80846d2:	bf00      	nop

080846d4 <__aeabi_fcmple>:
 80846d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80846d8:	f7ff ffe0 	bl	808469c <__aeabi_cfcmpeq>
 80846dc:	bf94      	ite	ls
 80846de:	2001      	movls	r0, #1
 80846e0:	2000      	movhi	r0, #0
 80846e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80846e6:	bf00      	nop

080846e8 <__aeabi_fcmpge>:
 80846e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80846ec:	f7ff ffd2 	bl	8084694 <__aeabi_cfrcmple>
 80846f0:	bf94      	ite	ls
 80846f2:	2001      	movls	r0, #1
 80846f4:	2000      	movhi	r0, #0
 80846f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80846fa:	bf00      	nop

080846fc <__aeabi_fcmpgt>:
 80846fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8084700:	f7ff ffc8 	bl	8084694 <__aeabi_cfrcmple>
 8084704:	bf34      	ite	cc
 8084706:	2001      	movcc	r0, #1
 8084708:	2000      	movcs	r0, #0
 808470a:	f85d fb08 	ldr.w	pc, [sp], #8
 808470e:	bf00      	nop

08084710 <__aeabi_f2iz>:
 8084710:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8084714:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8084718:	d30f      	bcc.n	808473a <__aeabi_f2iz+0x2a>
 808471a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 808471e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8084722:	d90d      	bls.n	8084740 <__aeabi_f2iz+0x30>
 8084724:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8084728:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 808472c:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8084730:	fa23 f002 	lsr.w	r0, r3, r2
 8084734:	bf18      	it	ne
 8084736:	4240      	negne	r0, r0
 8084738:	4770      	bx	lr
 808473a:	f04f 0000 	mov.w	r0, #0
 808473e:	4770      	bx	lr
 8084740:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8084744:	d101      	bne.n	808474a <__aeabi_f2iz+0x3a>
 8084746:	0242      	lsls	r2, r0, #9
 8084748:	d105      	bne.n	8084756 <__aeabi_f2iz+0x46>
 808474a:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 808474e:	bf08      	it	eq
 8084750:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084754:	4770      	bx	lr
 8084756:	f04f 0000 	mov.w	r0, #0
 808475a:	4770      	bx	lr

0808475c <asctime>:
 808475c:	4b09      	ldr	r3, [pc, #36]	; (8084784 <asctime+0x28>)
 808475e:	b570      	push	{r4, r5, r6, lr}
 8084760:	681c      	ldr	r4, [r3, #0]
 8084762:	4606      	mov	r6, r0
 8084764:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8084766:	b93d      	cbnz	r5, 8084778 <asctime+0x1c>
 8084768:	201a      	movs	r0, #26
 808476a:	f7fd fa87 	bl	8081c7c <malloc>
 808476e:	221a      	movs	r2, #26
 8084770:	6420      	str	r0, [r4, #64]	; 0x40
 8084772:	4629      	mov	r1, r5
 8084774:	f000 f943 	bl	80849fe <memset>
 8084778:	6c21      	ldr	r1, [r4, #64]	; 0x40
 808477a:	4630      	mov	r0, r6
 808477c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8084780:	f000 b802 	b.w	8084788 <asctime_r>
 8084784:	20000500 	.word	0x20000500

08084788 <asctime_r>:
 8084788:	b510      	push	{r4, lr}
 808478a:	460c      	mov	r4, r1
 808478c:	6941      	ldr	r1, [r0, #20]
 808478e:	b086      	sub	sp, #24
 8084790:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 8084794:	6903      	ldr	r3, [r0, #16]
 8084796:	6982      	ldr	r2, [r0, #24]
 8084798:	9104      	str	r1, [sp, #16]
 808479a:	6801      	ldr	r1, [r0, #0]
 808479c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80847a0:	9103      	str	r1, [sp, #12]
 80847a2:	6841      	ldr	r1, [r0, #4]
 80847a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80847a8:	9102      	str	r1, [sp, #8]
 80847aa:	6881      	ldr	r1, [r0, #8]
 80847ac:	9101      	str	r1, [sp, #4]
 80847ae:	68c1      	ldr	r1, [r0, #12]
 80847b0:	4620      	mov	r0, r4
 80847b2:	9100      	str	r1, [sp, #0]
 80847b4:	4904      	ldr	r1, [pc, #16]	; (80847c8 <asctime_r+0x40>)
 80847b6:	440b      	add	r3, r1
 80847b8:	4904      	ldr	r1, [pc, #16]	; (80847cc <asctime_r+0x44>)
 80847ba:	440a      	add	r2, r1
 80847bc:	4904      	ldr	r1, [pc, #16]	; (80847d0 <asctime_r+0x48>)
 80847be:	f7fd fa75 	bl	8081cac <siprintf>
 80847c2:	4620      	mov	r0, r4
 80847c4:	b006      	add	sp, #24
 80847c6:	bd10      	pop	{r4, pc}
 80847c8:	08085939 	.word	0x08085939
 80847cc:	08085924 	.word	0x08085924
 80847d0:	0808595d 	.word	0x0808595d

080847d4 <atoi>:
 80847d4:	220a      	movs	r2, #10
 80847d6:	2100      	movs	r1, #0
 80847d8:	f000 ba26 	b.w	8084c28 <strtol>

080847dc <__cxa_atexit>:
 80847dc:	b510      	push	{r4, lr}
 80847de:	4c05      	ldr	r4, [pc, #20]	; (80847f4 <__cxa_atexit+0x18>)
 80847e0:	4613      	mov	r3, r2
 80847e2:	b12c      	cbz	r4, 80847f0 <__cxa_atexit+0x14>
 80847e4:	460a      	mov	r2, r1
 80847e6:	4601      	mov	r1, r0
 80847e8:	2002      	movs	r0, #2
 80847ea:	f3af 8000 	nop.w
 80847ee:	bd10      	pop	{r4, pc}
 80847f0:	4620      	mov	r0, r4
 80847f2:	bd10      	pop	{r4, pc}
 80847f4:	00000000 	.word	0x00000000

080847f8 <localtime>:
 80847f8:	b538      	push	{r3, r4, r5, lr}
 80847fa:	4b07      	ldr	r3, [pc, #28]	; (8084818 <localtime+0x20>)
 80847fc:	4605      	mov	r5, r0
 80847fe:	681c      	ldr	r4, [r3, #0]
 8084800:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8084802:	b91b      	cbnz	r3, 808480c <localtime+0x14>
 8084804:	2024      	movs	r0, #36	; 0x24
 8084806:	f7fd fa39 	bl	8081c7c <malloc>
 808480a:	63e0      	str	r0, [r4, #60]	; 0x3c
 808480c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 808480e:	4628      	mov	r0, r5
 8084810:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8084814:	f000 b802 	b.w	808481c <localtime_r>
 8084818:	20000500 	.word	0x20000500

0808481c <localtime_r>:
 808481c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084820:	460c      	mov	r4, r1
 8084822:	4680      	mov	r8, r0
 8084824:	f000 fd06 	bl	8085234 <__gettzinfo>
 8084828:	4621      	mov	r1, r4
 808482a:	4607      	mov	r7, r0
 808482c:	4640      	mov	r0, r8
 808482e:	f000 fd05 	bl	808523c <gmtime_r>
 8084832:	6946      	ldr	r6, [r0, #20]
 8084834:	4604      	mov	r4, r0
 8084836:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 808483a:	07b3      	lsls	r3, r6, #30
 808483c:	d105      	bne.n	808484a <localtime_r+0x2e>
 808483e:	2264      	movs	r2, #100	; 0x64
 8084840:	fb96 f3f2 	sdiv	r3, r6, r2
 8084844:	fb02 6313 	mls	r3, r2, r3, r6
 8084848:	b94b      	cbnz	r3, 808485e <localtime_r+0x42>
 808484a:	f44f 75c8 	mov.w	r5, #400	; 0x190
 808484e:	fb96 f3f5 	sdiv	r3, r6, r5
 8084852:	fb05 6513 	mls	r5, r5, r3, r6
 8084856:	fab5 f385 	clz	r3, r5
 808485a:	095b      	lsrs	r3, r3, #5
 808485c:	e000      	b.n	8084860 <localtime_r+0x44>
 808485e:	2301      	movs	r3, #1
 8084860:	4a5f      	ldr	r2, [pc, #380]	; (80849e0 <localtime_r+0x1c4>)
 8084862:	2530      	movs	r5, #48	; 0x30
 8084864:	fb05 2503 	mla	r5, r5, r3, r2
 8084868:	f000 fb18 	bl	8084e9c <__tz_lock>
 808486c:	f000 fb18 	bl	8084ea0 <_tzset_unlocked>
 8084870:	4b5c      	ldr	r3, [pc, #368]	; (80849e4 <localtime_r+0x1c8>)
 8084872:	681b      	ldr	r3, [r3, #0]
 8084874:	b1f3      	cbz	r3, 80848b4 <localtime_r+0x98>
 8084876:	687b      	ldr	r3, [r7, #4]
 8084878:	429e      	cmp	r6, r3
 808487a:	d105      	bne.n	8084888 <localtime_r+0x6c>
 808487c:	6839      	ldr	r1, [r7, #0]
 808487e:	f8d8 3000 	ldr.w	r3, [r8]
 8084882:	69fa      	ldr	r2, [r7, #28]
 8084884:	b941      	cbnz	r1, 8084898 <localtime_r+0x7c>
 8084886:	e00a      	b.n	808489e <localtime_r+0x82>
 8084888:	4630      	mov	r0, r6
 808488a:	f000 fa5f 	bl	8084d4c <__tzcalc_limits>
 808488e:	2800      	cmp	r0, #0
 8084890:	d1f4      	bne.n	808487c <localtime_r+0x60>
 8084892:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8084896:	e00d      	b.n	80848b4 <localtime_r+0x98>
 8084898:	4293      	cmp	r3, r2
 808489a:	db08      	blt.n	80848ae <localtime_r+0x92>
 808489c:	e001      	b.n	80848a2 <localtime_r+0x86>
 808489e:	4293      	cmp	r3, r2
 80848a0:	da07      	bge.n	80848b2 <localtime_r+0x96>
 80848a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80848a4:	4293      	cmp	r3, r2
 80848a6:	bfac      	ite	ge
 80848a8:	2300      	movge	r3, #0
 80848aa:	2301      	movlt	r3, #1
 80848ac:	e002      	b.n	80848b4 <localtime_r+0x98>
 80848ae:	2300      	movs	r3, #0
 80848b0:	e000      	b.n	80848b4 <localtime_r+0x98>
 80848b2:	2301      	movs	r3, #1
 80848b4:	6223      	str	r3, [r4, #32]
 80848b6:	6a23      	ldr	r3, [r4, #32]
 80848b8:	203c      	movs	r0, #60	; 0x3c
 80848ba:	2b01      	cmp	r3, #1
 80848bc:	bf0c      	ite	eq
 80848be:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80848c0:	6a39      	ldrne	r1, [r7, #32]
 80848c2:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80848c6:	fb91 f6f3 	sdiv	r6, r1, r3
 80848ca:	fb03 1316 	mls	r3, r3, r6, r1
 80848ce:	fb93 f2f0 	sdiv	r2, r3, r0
 80848d2:	fb00 3012 	mls	r0, r0, r2, r3
 80848d6:	6861      	ldr	r1, [r4, #4]
 80848d8:	6823      	ldr	r3, [r4, #0]
 80848da:	1a89      	subs	r1, r1, r2
 80848dc:	68a2      	ldr	r2, [r4, #8]
 80848de:	1a1b      	subs	r3, r3, r0
 80848e0:	1b92      	subs	r2, r2, r6
 80848e2:	2b3b      	cmp	r3, #59	; 0x3b
 80848e4:	6023      	str	r3, [r4, #0]
 80848e6:	6061      	str	r1, [r4, #4]
 80848e8:	60a2      	str	r2, [r4, #8]
 80848ea:	dd03      	ble.n	80848f4 <localtime_r+0xd8>
 80848ec:	3101      	adds	r1, #1
 80848ee:	6061      	str	r1, [r4, #4]
 80848f0:	3b3c      	subs	r3, #60	; 0x3c
 80848f2:	e004      	b.n	80848fe <localtime_r+0xe2>
 80848f4:	2b00      	cmp	r3, #0
 80848f6:	da03      	bge.n	8084900 <localtime_r+0xe4>
 80848f8:	3901      	subs	r1, #1
 80848fa:	6061      	str	r1, [r4, #4]
 80848fc:	333c      	adds	r3, #60	; 0x3c
 80848fe:	6023      	str	r3, [r4, #0]
 8084900:	6863      	ldr	r3, [r4, #4]
 8084902:	2b3b      	cmp	r3, #59	; 0x3b
 8084904:	dd03      	ble.n	808490e <localtime_r+0xf2>
 8084906:	3201      	adds	r2, #1
 8084908:	60a2      	str	r2, [r4, #8]
 808490a:	3b3c      	subs	r3, #60	; 0x3c
 808490c:	e004      	b.n	8084918 <localtime_r+0xfc>
 808490e:	2b00      	cmp	r3, #0
 8084910:	da03      	bge.n	808491a <localtime_r+0xfe>
 8084912:	3a01      	subs	r2, #1
 8084914:	60a2      	str	r2, [r4, #8]
 8084916:	333c      	adds	r3, #60	; 0x3c
 8084918:	6063      	str	r3, [r4, #4]
 808491a:	68a3      	ldr	r3, [r4, #8]
 808491c:	2b17      	cmp	r3, #23
 808491e:	dd22      	ble.n	8084966 <localtime_r+0x14a>
 8084920:	69e2      	ldr	r2, [r4, #28]
 8084922:	3b18      	subs	r3, #24
 8084924:	3201      	adds	r2, #1
 8084926:	61e2      	str	r2, [r4, #28]
 8084928:	69a2      	ldr	r2, [r4, #24]
 808492a:	60a3      	str	r3, [r4, #8]
 808492c:	3201      	adds	r2, #1
 808492e:	2a06      	cmp	r2, #6
 8084930:	bfc8      	it	gt
 8084932:	2200      	movgt	r2, #0
 8084934:	61a2      	str	r2, [r4, #24]
 8084936:	68e2      	ldr	r2, [r4, #12]
 8084938:	6923      	ldr	r3, [r4, #16]
 808493a:	3201      	adds	r2, #1
 808493c:	60e2      	str	r2, [r4, #12]
 808493e:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 8084942:	428a      	cmp	r2, r1
 8084944:	dd46      	ble.n	80849d4 <localtime_r+0x1b8>
 8084946:	3301      	adds	r3, #1
 8084948:	2b0c      	cmp	r3, #12
 808494a:	bf08      	it	eq
 808494c:	6963      	ldreq	r3, [r4, #20]
 808494e:	eba2 0201 	sub.w	r2, r2, r1
 8084952:	60e2      	str	r2, [r4, #12]
 8084954:	bf05      	ittet	eq
 8084956:	3301      	addeq	r3, #1
 8084958:	2200      	moveq	r2, #0
 808495a:	6123      	strne	r3, [r4, #16]
 808495c:	6122      	streq	r2, [r4, #16]
 808495e:	bf04      	itt	eq
 8084960:	6163      	streq	r3, [r4, #20]
 8084962:	61e2      	streq	r2, [r4, #28]
 8084964:	e036      	b.n	80849d4 <localtime_r+0x1b8>
 8084966:	2b00      	cmp	r3, #0
 8084968:	da34      	bge.n	80849d4 <localtime_r+0x1b8>
 808496a:	69e2      	ldr	r2, [r4, #28]
 808496c:	3318      	adds	r3, #24
 808496e:	3a01      	subs	r2, #1
 8084970:	61e2      	str	r2, [r4, #28]
 8084972:	69a2      	ldr	r2, [r4, #24]
 8084974:	60a3      	str	r3, [r4, #8]
 8084976:	3a01      	subs	r2, #1
 8084978:	bf48      	it	mi
 808497a:	2206      	movmi	r2, #6
 808497c:	61a2      	str	r2, [r4, #24]
 808497e:	68e2      	ldr	r2, [r4, #12]
 8084980:	3a01      	subs	r2, #1
 8084982:	60e2      	str	r2, [r4, #12]
 8084984:	bb32      	cbnz	r2, 80849d4 <localtime_r+0x1b8>
 8084986:	6923      	ldr	r3, [r4, #16]
 8084988:	3b01      	subs	r3, #1
 808498a:	d401      	bmi.n	8084990 <localtime_r+0x174>
 808498c:	6123      	str	r3, [r4, #16]
 808498e:	e01d      	b.n	80849cc <localtime_r+0x1b0>
 8084990:	230b      	movs	r3, #11
 8084992:	6123      	str	r3, [r4, #16]
 8084994:	6963      	ldr	r3, [r4, #20]
 8084996:	1e5a      	subs	r2, r3, #1
 8084998:	f012 0f03 	tst.w	r2, #3
 808499c:	6162      	str	r2, [r4, #20]
 808499e:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 80849a2:	d105      	bne.n	80849b0 <localtime_r+0x194>
 80849a4:	2164      	movs	r1, #100	; 0x64
 80849a6:	fb93 f2f1 	sdiv	r2, r3, r1
 80849aa:	fb01 3212 	mls	r2, r1, r2, r3
 80849ae:	b94a      	cbnz	r2, 80849c4 <localtime_r+0x1a8>
 80849b0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80849b4:	fb93 f2f1 	sdiv	r2, r3, r1
 80849b8:	fb01 3312 	mls	r3, r1, r2, r3
 80849bc:	fab3 f383 	clz	r3, r3
 80849c0:	095b      	lsrs	r3, r3, #5
 80849c2:	e000      	b.n	80849c6 <localtime_r+0x1aa>
 80849c4:	2301      	movs	r3, #1
 80849c6:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80849ca:	61e3      	str	r3, [r4, #28]
 80849cc:	6923      	ldr	r3, [r4, #16]
 80849ce:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80849d2:	60e3      	str	r3, [r4, #12]
 80849d4:	f000 fa63 	bl	8084e9e <__tz_unlock>
 80849d8:	4620      	mov	r0, r4
 80849da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80849de:	bf00      	nop
 80849e0:	08085ae0 	.word	0x08085ae0
 80849e4:	20000cb0 	.word	0x20000cb0

080849e8 <memcpy>:
 80849e8:	b510      	push	{r4, lr}
 80849ea:	1e43      	subs	r3, r0, #1
 80849ec:	440a      	add	r2, r1
 80849ee:	4291      	cmp	r1, r2
 80849f0:	d004      	beq.n	80849fc <memcpy+0x14>
 80849f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80849f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80849fa:	e7f8      	b.n	80849ee <memcpy+0x6>
 80849fc:	bd10      	pop	{r4, pc}

080849fe <memset>:
 80849fe:	4603      	mov	r3, r0
 8084a00:	4402      	add	r2, r0
 8084a02:	4293      	cmp	r3, r2
 8084a04:	d002      	beq.n	8084a0c <memset+0xe>
 8084a06:	f803 1b01 	strb.w	r1, [r3], #1
 8084a0a:	e7fa      	b.n	8084a02 <memset+0x4>
 8084a0c:	4770      	bx	lr
	...

08084a10 <srand>:
 8084a10:	b538      	push	{r3, r4, r5, lr}
 8084a12:	4b12      	ldr	r3, [pc, #72]	; (8084a5c <srand+0x4c>)
 8084a14:	4605      	mov	r5, r0
 8084a16:	681c      	ldr	r4, [r3, #0]
 8084a18:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8084a1a:	b9d3      	cbnz	r3, 8084a52 <srand+0x42>
 8084a1c:	2018      	movs	r0, #24
 8084a1e:	f7fd f92d 	bl	8081c7c <malloc>
 8084a22:	f243 330e 	movw	r3, #13070	; 0x330e
 8084a26:	63a0      	str	r0, [r4, #56]	; 0x38
 8084a28:	8003      	strh	r3, [r0, #0]
 8084a2a:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8084a2e:	8043      	strh	r3, [r0, #2]
 8084a30:	f241 2334 	movw	r3, #4660	; 0x1234
 8084a34:	8083      	strh	r3, [r0, #4]
 8084a36:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8084a3a:	80c3      	strh	r3, [r0, #6]
 8084a3c:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8084a40:	8103      	strh	r3, [r0, #8]
 8084a42:	2305      	movs	r3, #5
 8084a44:	8143      	strh	r3, [r0, #10]
 8084a46:	230b      	movs	r3, #11
 8084a48:	8183      	strh	r3, [r0, #12]
 8084a4a:	2201      	movs	r2, #1
 8084a4c:	2300      	movs	r3, #0
 8084a4e:	e9c0 2304 	strd	r2, r3, [r0, #16]
 8084a52:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8084a54:	2200      	movs	r2, #0
 8084a56:	611d      	str	r5, [r3, #16]
 8084a58:	615a      	str	r2, [r3, #20]
 8084a5a:	bd38      	pop	{r3, r4, r5, pc}
 8084a5c:	20000500 	.word	0x20000500

08084a60 <strcmp>:
 8084a60:	f810 2b01 	ldrb.w	r2, [r0], #1
 8084a64:	f811 3b01 	ldrb.w	r3, [r1], #1
 8084a68:	2a01      	cmp	r2, #1
 8084a6a:	bf28      	it	cs
 8084a6c:	429a      	cmpcs	r2, r3
 8084a6e:	d0f7      	beq.n	8084a60 <strcmp>
 8084a70:	1ad0      	subs	r0, r2, r3
 8084a72:	4770      	bx	lr

08084a74 <strcpy>:
 8084a74:	4603      	mov	r3, r0
 8084a76:	f811 2b01 	ldrb.w	r2, [r1], #1
 8084a7a:	f803 2b01 	strb.w	r2, [r3], #1
 8084a7e:	2a00      	cmp	r2, #0
 8084a80:	d1f9      	bne.n	8084a76 <strcpy+0x2>
 8084a82:	4770      	bx	lr

08084a84 <strdup>:
 8084a84:	4b02      	ldr	r3, [pc, #8]	; (8084a90 <strdup+0xc>)
 8084a86:	4601      	mov	r1, r0
 8084a88:	6818      	ldr	r0, [r3, #0]
 8084a8a:	f000 b803 	b.w	8084a94 <_strdup_r>
 8084a8e:	bf00      	nop
 8084a90:	20000500 	.word	0x20000500

08084a94 <_strdup_r>:
 8084a94:	b570      	push	{r4, r5, r6, lr}
 8084a96:	4606      	mov	r6, r0
 8084a98:	4608      	mov	r0, r1
 8084a9a:	460c      	mov	r4, r1
 8084a9c:	f000 f80d 	bl	8084aba <strlen>
 8084aa0:	1c45      	adds	r5, r0, #1
 8084aa2:	4629      	mov	r1, r5
 8084aa4:	4630      	mov	r0, r6
 8084aa6:	f7fd f921 	bl	8081cec <_malloc_r>
 8084aaa:	4606      	mov	r6, r0
 8084aac:	b118      	cbz	r0, 8084ab6 <_strdup_r+0x22>
 8084aae:	462a      	mov	r2, r5
 8084ab0:	4621      	mov	r1, r4
 8084ab2:	f7ff ff99 	bl	80849e8 <memcpy>
 8084ab6:	4630      	mov	r0, r6
 8084ab8:	bd70      	pop	{r4, r5, r6, pc}

08084aba <strlen>:
 8084aba:	4603      	mov	r3, r0
 8084abc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8084ac0:	2a00      	cmp	r2, #0
 8084ac2:	d1fb      	bne.n	8084abc <strlen+0x2>
 8084ac4:	1a18      	subs	r0, r3, r0
 8084ac6:	3801      	subs	r0, #1
 8084ac8:	4770      	bx	lr

08084aca <strncmp>:
 8084aca:	b530      	push	{r4, r5, lr}
 8084acc:	b182      	cbz	r2, 8084af0 <strncmp+0x26>
 8084ace:	1e45      	subs	r5, r0, #1
 8084ad0:	3901      	subs	r1, #1
 8084ad2:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 8084ad6:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8084ada:	42a3      	cmp	r3, r4
 8084adc:	d106      	bne.n	8084aec <strncmp+0x22>
 8084ade:	43ec      	mvns	r4, r5
 8084ae0:	4414      	add	r4, r2
 8084ae2:	42e0      	cmn	r0, r4
 8084ae4:	d001      	beq.n	8084aea <strncmp+0x20>
 8084ae6:	2b00      	cmp	r3, #0
 8084ae8:	d1f3      	bne.n	8084ad2 <strncmp+0x8>
 8084aea:	461c      	mov	r4, r3
 8084aec:	1b18      	subs	r0, r3, r4
 8084aee:	bd30      	pop	{r4, r5, pc}
 8084af0:	4610      	mov	r0, r2
 8084af2:	bd30      	pop	{r4, r5, pc}

08084af4 <strncpy>:
 8084af4:	4603      	mov	r3, r0
 8084af6:	b510      	push	{r4, lr}
 8084af8:	b142      	cbz	r2, 8084b0c <strncpy+0x18>
 8084afa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8084afe:	3a01      	subs	r2, #1
 8084b00:	f803 4b01 	strb.w	r4, [r3], #1
 8084b04:	2c00      	cmp	r4, #0
 8084b06:	d1f7      	bne.n	8084af8 <strncpy+0x4>
 8084b08:	441a      	add	r2, r3
 8084b0a:	e000      	b.n	8084b0e <strncpy+0x1a>
 8084b0c:	bd10      	pop	{r4, pc}
 8084b0e:	4293      	cmp	r3, r2
 8084b10:	d002      	beq.n	8084b18 <strncpy+0x24>
 8084b12:	f803 4b01 	strb.w	r4, [r3], #1
 8084b16:	e7fa      	b.n	8084b0e <strncpy+0x1a>
 8084b18:	bd10      	pop	{r4, pc}
	...

08084b1c <_strtol_r>:
 8084b1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084b20:	460f      	mov	r7, r1
 8084b22:	4680      	mov	r8, r0
 8084b24:	483f      	ldr	r0, [pc, #252]	; (8084c24 <_strtol_r+0x108>)
 8084b26:	f8d0 9000 	ldr.w	r9, [r0]
 8084b2a:	463d      	mov	r5, r7
 8084b2c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084b30:	eb09 0004 	add.w	r0, r9, r4
 8084b34:	7840      	ldrb	r0, [r0, #1]
 8084b36:	f000 0008 	and.w	r0, r0, #8
 8084b3a:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8084b3e:	b108      	cbz	r0, 8084b44 <_strtol_r+0x28>
 8084b40:	462f      	mov	r7, r5
 8084b42:	e7f2      	b.n	8084b2a <_strtol_r+0xe>
 8084b44:	2c2d      	cmp	r4, #45	; 0x2d
 8084b46:	d103      	bne.n	8084b50 <_strtol_r+0x34>
 8084b48:	1cbd      	adds	r5, r7, #2
 8084b4a:	787c      	ldrb	r4, [r7, #1]
 8084b4c:	2601      	movs	r6, #1
 8084b4e:	e003      	b.n	8084b58 <_strtol_r+0x3c>
 8084b50:	2c2b      	cmp	r4, #43	; 0x2b
 8084b52:	bf04      	itt	eq
 8084b54:	787c      	ldrbeq	r4, [r7, #1]
 8084b56:	1cbd      	addeq	r5, r7, #2
 8084b58:	b113      	cbz	r3, 8084b60 <_strtol_r+0x44>
 8084b5a:	2b10      	cmp	r3, #16
 8084b5c:	d10a      	bne.n	8084b74 <_strtol_r+0x58>
 8084b5e:	e05b      	b.n	8084c18 <_strtol_r+0xfc>
 8084b60:	2c30      	cmp	r4, #48	; 0x30
 8084b62:	d157      	bne.n	8084c14 <_strtol_r+0xf8>
 8084b64:	7828      	ldrb	r0, [r5, #0]
 8084b66:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8084b6a:	2858      	cmp	r0, #88	; 0x58
 8084b6c:	d14d      	bne.n	8084c0a <_strtol_r+0xee>
 8084b6e:	786c      	ldrb	r4, [r5, #1]
 8084b70:	2310      	movs	r3, #16
 8084b72:	3502      	adds	r5, #2
 8084b74:	2e00      	cmp	r6, #0
 8084b76:	bf14      	ite	ne
 8084b78:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8084b7c:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8084b80:	fbbc faf3 	udiv	sl, ip, r3
 8084b84:	2700      	movs	r7, #0
 8084b86:	4638      	mov	r0, r7
 8084b88:	fb03 cc1a 	mls	ip, r3, sl, ip
 8084b8c:	eb09 0e04 	add.w	lr, r9, r4
 8084b90:	f89e e001 	ldrb.w	lr, [lr, #1]
 8084b94:	f01e 0f04 	tst.w	lr, #4
 8084b98:	d001      	beq.n	8084b9e <_strtol_r+0x82>
 8084b9a:	3c30      	subs	r4, #48	; 0x30
 8084b9c:	e00b      	b.n	8084bb6 <_strtol_r+0x9a>
 8084b9e:	f01e 0e03 	ands.w	lr, lr, #3
 8084ba2:	d01b      	beq.n	8084bdc <_strtol_r+0xc0>
 8084ba4:	f1be 0f01 	cmp.w	lr, #1
 8084ba8:	bf0c      	ite	eq
 8084baa:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8084bae:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8084bb2:	ebce 0404 	rsb	r4, lr, r4
 8084bb6:	42a3      	cmp	r3, r4
 8084bb8:	dd10      	ble.n	8084bdc <_strtol_r+0xc0>
 8084bba:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8084bbe:	d00a      	beq.n	8084bd6 <_strtol_r+0xba>
 8084bc0:	4550      	cmp	r0, sl
 8084bc2:	d806      	bhi.n	8084bd2 <_strtol_r+0xb6>
 8084bc4:	d101      	bne.n	8084bca <_strtol_r+0xae>
 8084bc6:	4564      	cmp	r4, ip
 8084bc8:	dc03      	bgt.n	8084bd2 <_strtol_r+0xb6>
 8084bca:	fb03 4000 	mla	r0, r3, r0, r4
 8084bce:	2701      	movs	r7, #1
 8084bd0:	e001      	b.n	8084bd6 <_strtol_r+0xba>
 8084bd2:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8084bd6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084bda:	e7d7      	b.n	8084b8c <_strtol_r+0x70>
 8084bdc:	1c7b      	adds	r3, r7, #1
 8084bde:	d10c      	bne.n	8084bfa <_strtol_r+0xde>
 8084be0:	2e00      	cmp	r6, #0
 8084be2:	f04f 0322 	mov.w	r3, #34	; 0x22
 8084be6:	bf14      	ite	ne
 8084be8:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8084bec:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084bf0:	f8c8 3000 	str.w	r3, [r8]
 8084bf4:	b92a      	cbnz	r2, 8084c02 <_strtol_r+0xe6>
 8084bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084bfa:	b106      	cbz	r6, 8084bfe <_strtol_r+0xe2>
 8084bfc:	4240      	negs	r0, r0
 8084bfe:	b172      	cbz	r2, 8084c1e <_strtol_r+0x102>
 8084c00:	b107      	cbz	r7, 8084c04 <_strtol_r+0xe8>
 8084c02:	1e69      	subs	r1, r5, #1
 8084c04:	6011      	str	r1, [r2, #0]
 8084c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084c0a:	2430      	movs	r4, #48	; 0x30
 8084c0c:	2b00      	cmp	r3, #0
 8084c0e:	d1b1      	bne.n	8084b74 <_strtol_r+0x58>
 8084c10:	2308      	movs	r3, #8
 8084c12:	e7af      	b.n	8084b74 <_strtol_r+0x58>
 8084c14:	230a      	movs	r3, #10
 8084c16:	e7ad      	b.n	8084b74 <_strtol_r+0x58>
 8084c18:	2c30      	cmp	r4, #48	; 0x30
 8084c1a:	d0a3      	beq.n	8084b64 <_strtol_r+0x48>
 8084c1c:	e7aa      	b.n	8084b74 <_strtol_r+0x58>
 8084c1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084c22:	bf00      	nop
 8084c24:	2000049c 	.word	0x2000049c

08084c28 <strtol>:
 8084c28:	4613      	mov	r3, r2
 8084c2a:	460a      	mov	r2, r1
 8084c2c:	4601      	mov	r1, r0
 8084c2e:	4802      	ldr	r0, [pc, #8]	; (8084c38 <strtol+0x10>)
 8084c30:	6800      	ldr	r0, [r0, #0]
 8084c32:	f7ff bf73 	b.w	8084b1c <_strtol_r>
 8084c36:	bf00      	nop
 8084c38:	20000500 	.word	0x20000500

08084c3c <_strtoul_r>:
 8084c3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084c40:	460e      	mov	r6, r1
 8084c42:	4680      	mov	r8, r0
 8084c44:	483b      	ldr	r0, [pc, #236]	; (8084d34 <_strtoul_r+0xf8>)
 8084c46:	f8d0 9000 	ldr.w	r9, [r0]
 8084c4a:	4635      	mov	r5, r6
 8084c4c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084c50:	eb09 0004 	add.w	r0, r9, r4
 8084c54:	7840      	ldrb	r0, [r0, #1]
 8084c56:	f000 0008 	and.w	r0, r0, #8
 8084c5a:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8084c5e:	b108      	cbz	r0, 8084c64 <_strtoul_r+0x28>
 8084c60:	462e      	mov	r6, r5
 8084c62:	e7f2      	b.n	8084c4a <_strtoul_r+0xe>
 8084c64:	2c2d      	cmp	r4, #45	; 0x2d
 8084c66:	d103      	bne.n	8084c70 <_strtoul_r+0x34>
 8084c68:	1cb5      	adds	r5, r6, #2
 8084c6a:	7874      	ldrb	r4, [r6, #1]
 8084c6c:	2701      	movs	r7, #1
 8084c6e:	e003      	b.n	8084c78 <_strtoul_r+0x3c>
 8084c70:	2c2b      	cmp	r4, #43	; 0x2b
 8084c72:	bf04      	itt	eq
 8084c74:	7874      	ldrbeq	r4, [r6, #1]
 8084c76:	1cb5      	addeq	r5, r6, #2
 8084c78:	b113      	cbz	r3, 8084c80 <_strtoul_r+0x44>
 8084c7a:	2b10      	cmp	r3, #16
 8084c7c:	d10a      	bne.n	8084c94 <_strtoul_r+0x58>
 8084c7e:	e053      	b.n	8084d28 <_strtoul_r+0xec>
 8084c80:	2c30      	cmp	r4, #48	; 0x30
 8084c82:	d14f      	bne.n	8084d24 <_strtoul_r+0xe8>
 8084c84:	7828      	ldrb	r0, [r5, #0]
 8084c86:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8084c8a:	2858      	cmp	r0, #88	; 0x58
 8084c8c:	d145      	bne.n	8084d1a <_strtoul_r+0xde>
 8084c8e:	786c      	ldrb	r4, [r5, #1]
 8084c90:	2310      	movs	r3, #16
 8084c92:	3502      	adds	r5, #2
 8084c94:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8084c98:	fbbc fcf3 	udiv	ip, ip, r3
 8084c9c:	fb03 fa0c 	mul.w	sl, r3, ip
 8084ca0:	2600      	movs	r6, #0
 8084ca2:	ea6f 0a0a 	mvn.w	sl, sl
 8084ca6:	4630      	mov	r0, r6
 8084ca8:	eb09 0e04 	add.w	lr, r9, r4
 8084cac:	f89e e001 	ldrb.w	lr, [lr, #1]
 8084cb0:	f01e 0f04 	tst.w	lr, #4
 8084cb4:	d001      	beq.n	8084cba <_strtoul_r+0x7e>
 8084cb6:	3c30      	subs	r4, #48	; 0x30
 8084cb8:	e00b      	b.n	8084cd2 <_strtoul_r+0x96>
 8084cba:	f01e 0e03 	ands.w	lr, lr, #3
 8084cbe:	d01a      	beq.n	8084cf6 <_strtoul_r+0xba>
 8084cc0:	f1be 0f01 	cmp.w	lr, #1
 8084cc4:	bf0c      	ite	eq
 8084cc6:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8084cca:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8084cce:	ebce 0404 	rsb	r4, lr, r4
 8084cd2:	42a3      	cmp	r3, r4
 8084cd4:	dd0f      	ble.n	8084cf6 <_strtoul_r+0xba>
 8084cd6:	2e00      	cmp	r6, #0
 8084cd8:	db08      	blt.n	8084cec <_strtoul_r+0xb0>
 8084cda:	4560      	cmp	r0, ip
 8084cdc:	d806      	bhi.n	8084cec <_strtoul_r+0xb0>
 8084cde:	d101      	bne.n	8084ce4 <_strtoul_r+0xa8>
 8084ce0:	4554      	cmp	r4, sl
 8084ce2:	dc03      	bgt.n	8084cec <_strtoul_r+0xb0>
 8084ce4:	fb03 4000 	mla	r0, r3, r0, r4
 8084ce8:	2601      	movs	r6, #1
 8084cea:	e001      	b.n	8084cf0 <_strtoul_r+0xb4>
 8084cec:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8084cf0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084cf4:	e7d8      	b.n	8084ca8 <_strtoul_r+0x6c>
 8084cf6:	2e00      	cmp	r6, #0
 8084cf8:	da07      	bge.n	8084d0a <_strtoul_r+0xce>
 8084cfa:	2322      	movs	r3, #34	; 0x22
 8084cfc:	f8c8 3000 	str.w	r3, [r8]
 8084d00:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8084d04:	b92a      	cbnz	r2, 8084d12 <_strtoul_r+0xd6>
 8084d06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084d0a:	b107      	cbz	r7, 8084d0e <_strtoul_r+0xd2>
 8084d0c:	4240      	negs	r0, r0
 8084d0e:	b172      	cbz	r2, 8084d2e <_strtoul_r+0xf2>
 8084d10:	b106      	cbz	r6, 8084d14 <_strtoul_r+0xd8>
 8084d12:	1e69      	subs	r1, r5, #1
 8084d14:	6011      	str	r1, [r2, #0]
 8084d16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084d1a:	2430      	movs	r4, #48	; 0x30
 8084d1c:	2b00      	cmp	r3, #0
 8084d1e:	d1b9      	bne.n	8084c94 <_strtoul_r+0x58>
 8084d20:	2308      	movs	r3, #8
 8084d22:	e7b7      	b.n	8084c94 <_strtoul_r+0x58>
 8084d24:	230a      	movs	r3, #10
 8084d26:	e7b5      	b.n	8084c94 <_strtoul_r+0x58>
 8084d28:	2c30      	cmp	r4, #48	; 0x30
 8084d2a:	d0ab      	beq.n	8084c84 <_strtoul_r+0x48>
 8084d2c:	e7b2      	b.n	8084c94 <_strtoul_r+0x58>
 8084d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084d32:	bf00      	nop
 8084d34:	2000049c 	.word	0x2000049c

08084d38 <strtoul>:
 8084d38:	4613      	mov	r3, r2
 8084d3a:	460a      	mov	r2, r1
 8084d3c:	4601      	mov	r1, r0
 8084d3e:	4802      	ldr	r0, [pc, #8]	; (8084d48 <strtoul+0x10>)
 8084d40:	6800      	ldr	r0, [r0, #0]
 8084d42:	f7ff bf7b 	b.w	8084c3c <_strtoul_r>
 8084d46:	bf00      	nop
 8084d48:	20000500 	.word	0x20000500

08084d4c <__tzcalc_limits>:
 8084d4c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084d50:	4604      	mov	r4, r0
 8084d52:	f000 fa6f 	bl	8085234 <__gettzinfo>
 8084d56:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8084d5a:	429c      	cmp	r4, r3
 8084d5c:	f340 8096 	ble.w	8084e8c <__tzcalc_limits+0x140>
 8084d60:	f240 156d 	movw	r5, #365	; 0x16d
 8084d64:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8084d68:	18e3      	adds	r3, r4, r3
 8084d6a:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8084d6e:	109b      	asrs	r3, r3, #2
 8084d70:	fb05 3502 	mla	r5, r5, r2, r3
 8084d74:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8084d78:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8084d7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8084d80:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8084d84:	442b      	add	r3, r5
 8084d86:	18a5      	adds	r5, r4, r2
 8084d88:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084d8c:	fb94 f7f2 	sdiv	r7, r4, r2
 8084d90:	fb95 f5f2 	sdiv	r5, r5, r2
 8084d94:	fb02 4717 	mls	r7, r2, r7, r4
 8084d98:	441d      	add	r5, r3
 8084d9a:	2364      	movs	r3, #100	; 0x64
 8084d9c:	fb94 f6f3 	sdiv	r6, r4, r3
 8084da0:	fab7 fe87 	clz	lr, r7
 8084da4:	4601      	mov	r1, r0
 8084da6:	fb03 4616 	mls	r6, r3, r6, r4
 8084daa:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8084dae:	9301      	str	r3, [sp, #4]
 8084db0:	f004 0303 	and.w	r3, r4, #3
 8084db4:	6044      	str	r4, [r0, #4]
 8084db6:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8084dba:	9300      	str	r3, [sp, #0]
 8084dbc:	f04f 0c07 	mov.w	ip, #7
 8084dc0:	7a0b      	ldrb	r3, [r1, #8]
 8084dc2:	2b4a      	cmp	r3, #74	; 0x4a
 8084dc4:	d10e      	bne.n	8084de4 <__tzcalc_limits+0x98>
 8084dc6:	694b      	ldr	r3, [r1, #20]
 8084dc8:	9a00      	ldr	r2, [sp, #0]
 8084dca:	18ec      	adds	r4, r5, r3
 8084dcc:	b902      	cbnz	r2, 8084dd0 <__tzcalc_limits+0x84>
 8084dce:	b906      	cbnz	r6, 8084dd2 <__tzcalc_limits+0x86>
 8084dd0:	b927      	cbnz	r7, 8084ddc <__tzcalc_limits+0x90>
 8084dd2:	2b3b      	cmp	r3, #59	; 0x3b
 8084dd4:	bfd4      	ite	le
 8084dd6:	2300      	movle	r3, #0
 8084dd8:	2301      	movgt	r3, #1
 8084dda:	e000      	b.n	8084dde <__tzcalc_limits+0x92>
 8084ddc:	2300      	movs	r3, #0
 8084dde:	4423      	add	r3, r4
 8084de0:	3b01      	subs	r3, #1
 8084de2:	e03f      	b.n	8084e64 <__tzcalc_limits+0x118>
 8084de4:	2b44      	cmp	r3, #68	; 0x44
 8084de6:	d102      	bne.n	8084dee <__tzcalc_limits+0xa2>
 8084de8:	694b      	ldr	r3, [r1, #20]
 8084dea:	442b      	add	r3, r5
 8084dec:	e03a      	b.n	8084e64 <__tzcalc_limits+0x118>
 8084dee:	9b00      	ldr	r3, [sp, #0]
 8084df0:	b92b      	cbnz	r3, 8084dfe <__tzcalc_limits+0xb2>
 8084df2:	2e00      	cmp	r6, #0
 8084df4:	bf0c      	ite	eq
 8084df6:	46f0      	moveq	r8, lr
 8084df8:	f04f 0801 	movne.w	r8, #1
 8084dfc:	e000      	b.n	8084e00 <__tzcalc_limits+0xb4>
 8084dfe:	46f0      	mov	r8, lr
 8084e00:	46a9      	mov	r9, r5
 8084e02:	4b24      	ldr	r3, [pc, #144]	; (8084e94 <__tzcalc_limits+0x148>)
 8084e04:	2230      	movs	r2, #48	; 0x30
 8084e06:	fb02 3808 	mla	r8, r2, r8, r3
 8084e0a:	68cc      	ldr	r4, [r1, #12]
 8084e0c:	f1a8 0a04 	sub.w	sl, r8, #4
 8084e10:	2301      	movs	r3, #1
 8084e12:	42a3      	cmp	r3, r4
 8084e14:	da04      	bge.n	8084e20 <__tzcalc_limits+0xd4>
 8084e16:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8084e1a:	3301      	adds	r3, #1
 8084e1c:	44d9      	add	r9, fp
 8084e1e:	e7f8      	b.n	8084e12 <__tzcalc_limits+0xc6>
 8084e20:	f109 0304 	add.w	r3, r9, #4
 8084e24:	fb93 fbfc 	sdiv	fp, r3, ip
 8084e28:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8084e2c:	ebca 0a03 	rsb	sl, sl, r3
 8084e30:	694b      	ldr	r3, [r1, #20]
 8084e32:	2c01      	cmp	r4, #1
 8084e34:	bfb8      	it	lt
 8084e36:	2401      	movlt	r4, #1
 8084e38:	ebb3 0a0a 	subs.w	sl, r3, sl
 8084e3c:	690b      	ldr	r3, [r1, #16]
 8084e3e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8084e42:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8084e46:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8084e4a:	bf48      	it	mi
 8084e4c:	f10a 0a07 	addmi.w	sl, sl, #7
 8084e50:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8084e54:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8084e58:	4453      	add	r3, sl
 8084e5a:	42a3      	cmp	r3, r4
 8084e5c:	db01      	blt.n	8084e62 <__tzcalc_limits+0x116>
 8084e5e:	3b07      	subs	r3, #7
 8084e60:	e7fb      	b.n	8084e5a <__tzcalc_limits+0x10e>
 8084e62:	444b      	add	r3, r9
 8084e64:	698c      	ldr	r4, [r1, #24]
 8084e66:	4a0c      	ldr	r2, [pc, #48]	; (8084e98 <__tzcalc_limits+0x14c>)
 8084e68:	fb02 4303 	mla	r3, r2, r3, r4
 8084e6c:	6a0c      	ldr	r4, [r1, #32]
 8084e6e:	4423      	add	r3, r4
 8084e70:	f841 3f1c 	str.w	r3, [r1, #28]!
 8084e74:	9b01      	ldr	r3, [sp, #4]
 8084e76:	4299      	cmp	r1, r3
 8084e78:	d1a2      	bne.n	8084dc0 <__tzcalc_limits+0x74>
 8084e7a:	69c3      	ldr	r3, [r0, #28]
 8084e7c:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8084e7e:	4293      	cmp	r3, r2
 8084e80:	bfac      	ite	ge
 8084e82:	2300      	movge	r3, #0
 8084e84:	2301      	movlt	r3, #1
 8084e86:	6003      	str	r3, [r0, #0]
 8084e88:	2001      	movs	r0, #1
 8084e8a:	e000      	b.n	8084e8e <__tzcalc_limits+0x142>
 8084e8c:	2000      	movs	r0, #0
 8084e8e:	b003      	add	sp, #12
 8084e90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084e94:	08085ae0 	.word	0x08085ae0
 8084e98:	00015180 	.word	0x00015180

08084e9c <__tz_lock>:
 8084e9c:	4770      	bx	lr

08084e9e <__tz_unlock>:
 8084e9e:	4770      	bx	lr

08084ea0 <_tzset_unlocked>:
 8084ea0:	4b01      	ldr	r3, [pc, #4]	; (8084ea8 <_tzset_unlocked+0x8>)
 8084ea2:	6818      	ldr	r0, [r3, #0]
 8084ea4:	f000 b802 	b.w	8084eac <_tzset_unlocked_r>
 8084ea8:	20000500 	.word	0x20000500

08084eac <_tzset_unlocked_r>:
 8084eac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084eb0:	b08d      	sub	sp, #52	; 0x34
 8084eb2:	4607      	mov	r7, r0
 8084eb4:	f000 f9be 	bl	8085234 <__gettzinfo>
 8084eb8:	49b0      	ldr	r1, [pc, #704]	; (808517c <_tzset_unlocked_r+0x2d0>)
 8084eba:	4604      	mov	r4, r0
 8084ebc:	4638      	mov	r0, r7
 8084ebe:	f000 f9b1 	bl	8085224 <_getenv_r>
 8084ec2:	4eaf      	ldr	r6, [pc, #700]	; (8085180 <_tzset_unlocked_r+0x2d4>)
 8084ec4:	4605      	mov	r5, r0
 8084ec6:	b960      	cbnz	r0, 8084ee2 <_tzset_unlocked_r+0x36>
 8084ec8:	4bae      	ldr	r3, [pc, #696]	; (8085184 <_tzset_unlocked_r+0x2d8>)
 8084eca:	4aaf      	ldr	r2, [pc, #700]	; (8085188 <_tzset_unlocked_r+0x2dc>)
 8084ecc:	6018      	str	r0, [r3, #0]
 8084ece:	4baf      	ldr	r3, [pc, #700]	; (808518c <_tzset_unlocked_r+0x2e0>)
 8084ed0:	6018      	str	r0, [r3, #0]
 8084ed2:	4baf      	ldr	r3, [pc, #700]	; (8085190 <_tzset_unlocked_r+0x2e4>)
 8084ed4:	6830      	ldr	r0, [r6, #0]
 8084ed6:	601a      	str	r2, [r3, #0]
 8084ed8:	605a      	str	r2, [r3, #4]
 8084eda:	f7fc fed7 	bl	8081c8c <free>
 8084ede:	6035      	str	r5, [r6, #0]
 8084ee0:	e148      	b.n	8085174 <_tzset_unlocked_r+0x2c8>
 8084ee2:	6831      	ldr	r1, [r6, #0]
 8084ee4:	b979      	cbnz	r1, 8084f06 <_tzset_unlocked_r+0x5a>
 8084ee6:	6830      	ldr	r0, [r6, #0]
 8084ee8:	f7fc fed0 	bl	8081c8c <free>
 8084eec:	4628      	mov	r0, r5
 8084eee:	f7ff fde4 	bl	8084aba <strlen>
 8084ef2:	1c41      	adds	r1, r0, #1
 8084ef4:	4638      	mov	r0, r7
 8084ef6:	f7fc fef9 	bl	8081cec <_malloc_r>
 8084efa:	6030      	str	r0, [r6, #0]
 8084efc:	b148      	cbz	r0, 8084f12 <_tzset_unlocked_r+0x66>
 8084efe:	4629      	mov	r1, r5
 8084f00:	f7ff fdb8 	bl	8084a74 <strcpy>
 8084f04:	e005      	b.n	8084f12 <_tzset_unlocked_r+0x66>
 8084f06:	f7ff fdab 	bl	8084a60 <strcmp>
 8084f0a:	2800      	cmp	r0, #0
 8084f0c:	f000 8132 	beq.w	8085174 <_tzset_unlocked_r+0x2c8>
 8084f10:	e7e9      	b.n	8084ee6 <_tzset_unlocked_r+0x3a>
 8084f12:	782b      	ldrb	r3, [r5, #0]
 8084f14:	ae0a      	add	r6, sp, #40	; 0x28
 8084f16:	2b3a      	cmp	r3, #58	; 0x3a
 8084f18:	bf08      	it	eq
 8084f1a:	3501      	addeq	r5, #1
 8084f1c:	4633      	mov	r3, r6
 8084f1e:	4a9d      	ldr	r2, [pc, #628]	; (8085194 <_tzset_unlocked_r+0x2e8>)
 8084f20:	499d      	ldr	r1, [pc, #628]	; (8085198 <_tzset_unlocked_r+0x2ec>)
 8084f22:	4628      	mov	r0, r5
 8084f24:	f7fc feca 	bl	8081cbc <siscanf>
 8084f28:	2800      	cmp	r0, #0
 8084f2a:	f340 8123 	ble.w	8085174 <_tzset_unlocked_r+0x2c8>
 8084f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084f30:	18ef      	adds	r7, r5, r3
 8084f32:	5ceb      	ldrb	r3, [r5, r3]
 8084f34:	2b2d      	cmp	r3, #45	; 0x2d
 8084f36:	d103      	bne.n	8084f40 <_tzset_unlocked_r+0x94>
 8084f38:	3701      	adds	r7, #1
 8084f3a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8084f3e:	e003      	b.n	8084f48 <_tzset_unlocked_r+0x9c>
 8084f40:	2b2b      	cmp	r3, #43	; 0x2b
 8084f42:	bf08      	it	eq
 8084f44:	3701      	addeq	r7, #1
 8084f46:	2501      	movs	r5, #1
 8084f48:	f10d 0a20 	add.w	sl, sp, #32
 8084f4c:	f10d 0b1e 	add.w	fp, sp, #30
 8084f50:	f04f 0800 	mov.w	r8, #0
 8084f54:	9603      	str	r6, [sp, #12]
 8084f56:	f8cd a008 	str.w	sl, [sp, #8]
 8084f5a:	9601      	str	r6, [sp, #4]
 8084f5c:	f8cd b000 	str.w	fp, [sp]
 8084f60:	4633      	mov	r3, r6
 8084f62:	aa07      	add	r2, sp, #28
 8084f64:	498d      	ldr	r1, [pc, #564]	; (808519c <_tzset_unlocked_r+0x2f0>)
 8084f66:	4638      	mov	r0, r7
 8084f68:	f8ad 801e 	strh.w	r8, [sp, #30]
 8084f6c:	f8ad 8020 	strh.w	r8, [sp, #32]
 8084f70:	f7fc fea4 	bl	8081cbc <siscanf>
 8084f74:	4540      	cmp	r0, r8
 8084f76:	f340 80fd 	ble.w	8085174 <_tzset_unlocked_r+0x2c8>
 8084f7a:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084f7e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084f82:	213c      	movs	r1, #60	; 0x3c
 8084f84:	fb01 3302 	mla	r3, r1, r2, r3
 8084f88:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084f8c:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084f90:	fb01 3302 	mla	r3, r1, r2, r3
 8084f94:	435d      	muls	r5, r3
 8084f96:	4b7f      	ldr	r3, [pc, #508]	; (8085194 <_tzset_unlocked_r+0x2e8>)
 8084f98:	6225      	str	r5, [r4, #32]
 8084f9a:	4d7d      	ldr	r5, [pc, #500]	; (8085190 <_tzset_unlocked_r+0x2e4>)
 8084f9c:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80851a8 <_tzset_unlocked_r+0x2fc>
 8084fa0:	602b      	str	r3, [r5, #0]
 8084fa2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084fa4:	464a      	mov	r2, r9
 8084fa6:	441f      	add	r7, r3
 8084fa8:	497b      	ldr	r1, [pc, #492]	; (8085198 <_tzset_unlocked_r+0x2ec>)
 8084faa:	4633      	mov	r3, r6
 8084fac:	4638      	mov	r0, r7
 8084fae:	f7fc fe85 	bl	8081cbc <siscanf>
 8084fb2:	4540      	cmp	r0, r8
 8084fb4:	dc08      	bgt.n	8084fc8 <_tzset_unlocked_r+0x11c>
 8084fb6:	682b      	ldr	r3, [r5, #0]
 8084fb8:	6a22      	ldr	r2, [r4, #32]
 8084fba:	606b      	str	r3, [r5, #4]
 8084fbc:	4b71      	ldr	r3, [pc, #452]	; (8085184 <_tzset_unlocked_r+0x2d8>)
 8084fbe:	601a      	str	r2, [r3, #0]
 8084fc0:	4b72      	ldr	r3, [pc, #456]	; (808518c <_tzset_unlocked_r+0x2e0>)
 8084fc2:	f8c3 8000 	str.w	r8, [r3]
 8084fc6:	e0d5      	b.n	8085174 <_tzset_unlocked_r+0x2c8>
 8084fc8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084fca:	f8c5 9004 	str.w	r9, [r5, #4]
 8084fce:	18fd      	adds	r5, r7, r3
 8084fd0:	5cfb      	ldrb	r3, [r7, r3]
 8084fd2:	2b2d      	cmp	r3, #45	; 0x2d
 8084fd4:	d103      	bne.n	8084fde <_tzset_unlocked_r+0x132>
 8084fd6:	3501      	adds	r5, #1
 8084fd8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8084fdc:	e003      	b.n	8084fe6 <_tzset_unlocked_r+0x13a>
 8084fde:	2b2b      	cmp	r3, #43	; 0x2b
 8084fe0:	bf08      	it	eq
 8084fe2:	3501      	addeq	r5, #1
 8084fe4:	2701      	movs	r7, #1
 8084fe6:	2300      	movs	r3, #0
 8084fe8:	f8ad 301c 	strh.w	r3, [sp, #28]
 8084fec:	f8ad 301e 	strh.w	r3, [sp, #30]
 8084ff0:	f8ad 3020 	strh.w	r3, [sp, #32]
 8084ff4:	930a      	str	r3, [sp, #40]	; 0x28
 8084ff6:	9603      	str	r6, [sp, #12]
 8084ff8:	f8cd a008 	str.w	sl, [sp, #8]
 8084ffc:	9601      	str	r6, [sp, #4]
 8084ffe:	f8cd b000 	str.w	fp, [sp]
 8085002:	4633      	mov	r3, r6
 8085004:	aa07      	add	r2, sp, #28
 8085006:	4965      	ldr	r1, [pc, #404]	; (808519c <_tzset_unlocked_r+0x2f0>)
 8085008:	4628      	mov	r0, r5
 808500a:	f7fc fe57 	bl	8081cbc <siscanf>
 808500e:	2800      	cmp	r0, #0
 8085010:	dc04      	bgt.n	808501c <_tzset_unlocked_r+0x170>
 8085012:	6a23      	ldr	r3, [r4, #32]
 8085014:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8085018:	63e3      	str	r3, [r4, #60]	; 0x3c
 808501a:	e00e      	b.n	808503a <_tzset_unlocked_r+0x18e>
 808501c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085020:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8085024:	213c      	movs	r1, #60	; 0x3c
 8085026:	fb01 3302 	mla	r3, r1, r2, r3
 808502a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808502e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8085032:	fb01 3302 	mla	r3, r1, r2, r3
 8085036:	435f      	muls	r7, r3
 8085038:	63e7      	str	r7, [r4, #60]	; 0x3c
 808503a:	4627      	mov	r7, r4
 808503c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808503e:	f04f 0900 	mov.w	r9, #0
 8085042:	441d      	add	r5, r3
 8085044:	782b      	ldrb	r3, [r5, #0]
 8085046:	2b2c      	cmp	r3, #44	; 0x2c
 8085048:	bf08      	it	eq
 808504a:	3501      	addeq	r5, #1
 808504c:	f895 8000 	ldrb.w	r8, [r5]
 8085050:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8085054:	d126      	bne.n	80850a4 <_tzset_unlocked_r+0x1f8>
 8085056:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 808505a:	9302      	str	r3, [sp, #8]
 808505c:	ab09      	add	r3, sp, #36	; 0x24
 808505e:	9300      	str	r3, [sp, #0]
 8085060:	9603      	str	r6, [sp, #12]
 8085062:	9601      	str	r6, [sp, #4]
 8085064:	4633      	mov	r3, r6
 8085066:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 808506a:	494d      	ldr	r1, [pc, #308]	; (80851a0 <_tzset_unlocked_r+0x2f4>)
 808506c:	4628      	mov	r0, r5
 808506e:	f7fc fe25 	bl	8081cbc <siscanf>
 8085072:	2803      	cmp	r0, #3
 8085074:	d17e      	bne.n	8085174 <_tzset_unlocked_r+0x2c8>
 8085076:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 808507a:	1e4b      	subs	r3, r1, #1
 808507c:	2b0b      	cmp	r3, #11
 808507e:	d879      	bhi.n	8085174 <_tzset_unlocked_r+0x2c8>
 8085080:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8085084:	1e53      	subs	r3, r2, #1
 8085086:	2b04      	cmp	r3, #4
 8085088:	d874      	bhi.n	8085174 <_tzset_unlocked_r+0x2c8>
 808508a:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 808508e:	2b06      	cmp	r3, #6
 8085090:	d870      	bhi.n	8085174 <_tzset_unlocked_r+0x2c8>
 8085092:	f887 8008 	strb.w	r8, [r7, #8]
 8085096:	60f9      	str	r1, [r7, #12]
 8085098:	613a      	str	r2, [r7, #16]
 808509a:	617b      	str	r3, [r7, #20]
 808509c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 808509e:	eb05 0803 	add.w	r8, r5, r3
 80850a2:	e02a      	b.n	80850fa <_tzset_unlocked_r+0x24e>
 80850a4:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 80850a8:	bf06      	itte	eq
 80850aa:	4643      	moveq	r3, r8
 80850ac:	3501      	addeq	r5, #1
 80850ae:	2344      	movne	r3, #68	; 0x44
 80850b0:	220a      	movs	r2, #10
 80850b2:	a90b      	add	r1, sp, #44	; 0x2c
 80850b4:	4628      	mov	r0, r5
 80850b6:	9305      	str	r3, [sp, #20]
 80850b8:	f7ff fe3e 	bl	8084d38 <strtoul>
 80850bc:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 80850c0:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 80850c4:	4545      	cmp	r5, r8
 80850c6:	9b05      	ldr	r3, [sp, #20]
 80850c8:	d114      	bne.n	80850f4 <_tzset_unlocked_r+0x248>
 80850ca:	234d      	movs	r3, #77	; 0x4d
 80850cc:	f1b9 0f00 	cmp.w	r9, #0
 80850d0:	d107      	bne.n	80850e2 <_tzset_unlocked_r+0x236>
 80850d2:	7223      	strb	r3, [r4, #8]
 80850d4:	2303      	movs	r3, #3
 80850d6:	60e3      	str	r3, [r4, #12]
 80850d8:	2302      	movs	r3, #2
 80850da:	6123      	str	r3, [r4, #16]
 80850dc:	f8c4 9014 	str.w	r9, [r4, #20]
 80850e0:	e00b      	b.n	80850fa <_tzset_unlocked_r+0x24e>
 80850e2:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 80850e6:	230b      	movs	r3, #11
 80850e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80850ea:	2301      	movs	r3, #1
 80850ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80850ee:	2300      	movs	r3, #0
 80850f0:	6323      	str	r3, [r4, #48]	; 0x30
 80850f2:	e002      	b.n	80850fa <_tzset_unlocked_r+0x24e>
 80850f4:	b280      	uxth	r0, r0
 80850f6:	723b      	strb	r3, [r7, #8]
 80850f8:	6178      	str	r0, [r7, #20]
 80850fa:	2302      	movs	r3, #2
 80850fc:	f8ad 301c 	strh.w	r3, [sp, #28]
 8085100:	2300      	movs	r3, #0
 8085102:	f8ad 301e 	strh.w	r3, [sp, #30]
 8085106:	f8ad 3020 	strh.w	r3, [sp, #32]
 808510a:	930a      	str	r3, [sp, #40]	; 0x28
 808510c:	f898 3000 	ldrb.w	r3, [r8]
 8085110:	2b2f      	cmp	r3, #47	; 0x2f
 8085112:	d10b      	bne.n	808512c <_tzset_unlocked_r+0x280>
 8085114:	9603      	str	r6, [sp, #12]
 8085116:	f8cd a008 	str.w	sl, [sp, #8]
 808511a:	9601      	str	r6, [sp, #4]
 808511c:	f8cd b000 	str.w	fp, [sp]
 8085120:	4633      	mov	r3, r6
 8085122:	aa07      	add	r2, sp, #28
 8085124:	491f      	ldr	r1, [pc, #124]	; (80851a4 <_tzset_unlocked_r+0x2f8>)
 8085126:	4640      	mov	r0, r8
 8085128:	f7fc fdc8 	bl	8081cbc <siscanf>
 808512c:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085130:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8085134:	213c      	movs	r1, #60	; 0x3c
 8085136:	fb01 3302 	mla	r3, r1, r2, r3
 808513a:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 808513e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8085142:	fb01 3302 	mla	r3, r1, r2, r3
 8085146:	61bb      	str	r3, [r7, #24]
 8085148:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 808514a:	f109 0901 	add.w	r9, r9, #1
 808514e:	f1b9 0f02 	cmp.w	r9, #2
 8085152:	4445      	add	r5, r8
 8085154:	f107 071c 	add.w	r7, r7, #28
 8085158:	f47f af74 	bne.w	8085044 <_tzset_unlocked_r+0x198>
 808515c:	6860      	ldr	r0, [r4, #4]
 808515e:	f7ff fdf5 	bl	8084d4c <__tzcalc_limits>
 8085162:	6a22      	ldr	r2, [r4, #32]
 8085164:	4b07      	ldr	r3, [pc, #28]	; (8085184 <_tzset_unlocked_r+0x2d8>)
 8085166:	601a      	str	r2, [r3, #0]
 8085168:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 808516a:	1a9b      	subs	r3, r3, r2
 808516c:	4a07      	ldr	r2, [pc, #28]	; (808518c <_tzset_unlocked_r+0x2e0>)
 808516e:	bf18      	it	ne
 8085170:	2301      	movne	r3, #1
 8085172:	6013      	str	r3, [r2, #0]
 8085174:	b00d      	add	sp, #52	; 0x34
 8085176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808517a:	bf00      	nop
 808517c:	08085b40 	.word	0x08085b40
 8085180:	20000cac 	.word	0x20000cac
 8085184:	20000cb4 	.word	0x20000cb4
 8085188:	08085b43 	.word	0x08085b43
 808518c:	20000cb0 	.word	0x20000cb0
 8085190:	20000504 	.word	0x20000504
 8085194:	20000c9f 	.word	0x20000c9f
 8085198:	08085b47 	.word	0x08085b47
 808519c:	08085b6a 	.word	0x08085b6a
 80851a0:	08085b56 	.word	0x08085b56
 80851a4:	08085b69 	.word	0x08085b69
 80851a8:	20000c94 	.word	0x20000c94

080851ac <_findenv_r>:
 80851ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80851b0:	4607      	mov	r7, r0
 80851b2:	468b      	mov	fp, r1
 80851b4:	4690      	mov	r8, r2
 80851b6:	f000 f8d7 	bl	8085368 <__env_lock>
 80851ba:	4b19      	ldr	r3, [pc, #100]	; (8085220 <_findenv_r+0x74>)
 80851bc:	681d      	ldr	r5, [r3, #0]
 80851be:	469a      	mov	sl, r3
 80851c0:	b13d      	cbz	r5, 80851d2 <_findenv_r+0x26>
 80851c2:	465c      	mov	r4, fp
 80851c4:	4623      	mov	r3, r4
 80851c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80851ca:	b142      	cbz	r2, 80851de <_findenv_r+0x32>
 80851cc:	2a3d      	cmp	r2, #61	; 0x3d
 80851ce:	461c      	mov	r4, r3
 80851d0:	d1f8      	bne.n	80851c4 <_findenv_r+0x18>
 80851d2:	4638      	mov	r0, r7
 80851d4:	f000 f8c9 	bl	808536a <__env_unlock>
 80851d8:	2000      	movs	r0, #0
 80851da:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80851de:	ebcb 0404 	rsb	r4, fp, r4
 80851e2:	46a9      	mov	r9, r5
 80851e4:	f859 0b04 	ldr.w	r0, [r9], #4
 80851e8:	2800      	cmp	r0, #0
 80851ea:	d0f2      	beq.n	80851d2 <_findenv_r+0x26>
 80851ec:	4622      	mov	r2, r4
 80851ee:	4659      	mov	r1, fp
 80851f0:	f7ff fc6b 	bl	8084aca <strncmp>
 80851f4:	b988      	cbnz	r0, 808521a <_findenv_r+0x6e>
 80851f6:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80851fa:	191e      	adds	r6, r3, r4
 80851fc:	5d1b      	ldrb	r3, [r3, r4]
 80851fe:	2b3d      	cmp	r3, #61	; 0x3d
 8085200:	d10b      	bne.n	808521a <_findenv_r+0x6e>
 8085202:	f8da 3000 	ldr.w	r3, [sl]
 8085206:	4638      	mov	r0, r7
 8085208:	1aed      	subs	r5, r5, r3
 808520a:	10ad      	asrs	r5, r5, #2
 808520c:	f8c8 5000 	str.w	r5, [r8]
 8085210:	f000 f8ab 	bl	808536a <__env_unlock>
 8085214:	1c70      	adds	r0, r6, #1
 8085216:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 808521a:	464d      	mov	r5, r9
 808521c:	e7e1      	b.n	80851e2 <_findenv_r+0x36>
 808521e:	bf00      	nop
 8085220:	2000054c 	.word	0x2000054c

08085224 <_getenv_r>:
 8085224:	b507      	push	{r0, r1, r2, lr}
 8085226:	aa01      	add	r2, sp, #4
 8085228:	f7ff ffc0 	bl	80851ac <_findenv_r>
 808522c:	b003      	add	sp, #12
 808522e:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08085234 <__gettzinfo>:
 8085234:	4800      	ldr	r0, [pc, #0]	; (8085238 <__gettzinfo+0x4>)
 8085236:	4770      	bx	lr
 8085238:	2000050c 	.word	0x2000050c

0808523c <gmtime_r>:
 808523c:	6802      	ldr	r2, [r0, #0]
 808523e:	4b46      	ldr	r3, [pc, #280]	; (8085358 <gmtime_r+0x11c>)
 8085240:	b5f0      	push	{r4, r5, r6, r7, lr}
 8085242:	fb92 f4f3 	sdiv	r4, r2, r3
 8085246:	fb03 2214 	mls	r2, r3, r4, r2
 808524a:	2a00      	cmp	r2, #0
 808524c:	bfbc      	itt	lt
 808524e:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 8085252:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 8085256:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 808525a:	fb92 f3f0 	sdiv	r3, r2, r0
 808525e:	fb00 2213 	mls	r2, r0, r3, r2
 8085262:	f04f 003c 	mov.w	r0, #60	; 0x3c
 8085266:	608b      	str	r3, [r1, #8]
 8085268:	fb92 f3f0 	sdiv	r3, r2, r0
 808526c:	fb00 2213 	mls	r2, r0, r3, r2
 8085270:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 8085274:	bfac      	ite	ge
 8085276:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 808527a:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 808527e:	604b      	str	r3, [r1, #4]
 8085280:	600a      	str	r2, [r1, #0]
 8085282:	2307      	movs	r3, #7
 8085284:	1ce2      	adds	r2, r4, #3
 8085286:	fb92 f3f3 	sdiv	r3, r2, r3
 808528a:	4d34      	ldr	r5, [pc, #208]	; (808535c <gmtime_r+0x120>)
 808528c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8085290:	fb94 f5f5 	sdiv	r5, r4, r5
 8085294:	1ad3      	subs	r3, r2, r3
 8085296:	f648 62ac 	movw	r2, #36524	; 0x8eac
 808529a:	f240 57b4 	movw	r7, #1460	; 0x5b4
 808529e:	618b      	str	r3, [r1, #24]
 80852a0:	4b2f      	ldr	r3, [pc, #188]	; (8085360 <gmtime_r+0x124>)
 80852a2:	4830      	ldr	r0, [pc, #192]	; (8085364 <gmtime_r+0x128>)
 80852a4:	fb03 4405 	mla	r4, r3, r5, r4
 80852a8:	fbb4 f2f2 	udiv	r2, r4, r2
 80852ac:	fbb4 f3f7 	udiv	r3, r4, r7
 80852b0:	fbb4 f0f0 	udiv	r0, r4, r0
 80852b4:	4422      	add	r2, r4
 80852b6:	1ad2      	subs	r2, r2, r3
 80852b8:	f648 6694 	movw	r6, #36500	; 0x8e94
 80852bc:	1a13      	subs	r3, r2, r0
 80852be:	f240 126d 	movw	r2, #365	; 0x16d
 80852c2:	fbb3 f6f6 	udiv	r6, r3, r6
 80852c6:	fbb3 f0f2 	udiv	r0, r3, r2
 80852ca:	fbb3 f3f7 	udiv	r3, r3, r7
 80852ce:	4434      	add	r4, r6
 80852d0:	1ae3      	subs	r3, r4, r3
 80852d2:	fb02 3310 	mls	r3, r2, r0, r3
 80852d6:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80852da:	2499      	movs	r4, #153	; 0x99
 80852dc:	3202      	adds	r2, #2
 80852de:	fbb2 f2f4 	udiv	r2, r2, r4
 80852e2:	4354      	muls	r4, r2
 80852e4:	1ca6      	adds	r6, r4, #2
 80852e6:	2405      	movs	r4, #5
 80852e8:	fbb6 f4f4 	udiv	r4, r6, r4
 80852ec:	2a0a      	cmp	r2, #10
 80852ee:	bf34      	ite	cc
 80852f0:	2602      	movcc	r6, #2
 80852f2:	f06f 0609 	mvncs.w	r6, #9
 80852f6:	4416      	add	r6, r2
 80852f8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80852fc:	fb02 0505 	mla	r5, r2, r5, r0
 8085300:	1c5f      	adds	r7, r3, #1
 8085302:	2e01      	cmp	r6, #1
 8085304:	bf98      	it	ls
 8085306:	3501      	addls	r5, #1
 8085308:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 808530c:	eba7 0704 	sub.w	r7, r7, r4
 8085310:	d302      	bcc.n	8085318 <gmtime_r+0xdc>
 8085312:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 8085316:	e014      	b.n	8085342 <gmtime_r+0x106>
 8085318:	0782      	lsls	r2, r0, #30
 808531a:	d105      	bne.n	8085328 <gmtime_r+0xec>
 808531c:	2464      	movs	r4, #100	; 0x64
 808531e:	fbb0 f2f4 	udiv	r2, r0, r4
 8085322:	fb04 0212 	mls	r2, r4, r2, r0
 8085326:	b94a      	cbnz	r2, 808533c <gmtime_r+0x100>
 8085328:	f44f 72c8 	mov.w	r2, #400	; 0x190
 808532c:	fbb0 f4f2 	udiv	r4, r0, r2
 8085330:	fb02 0014 	mls	r0, r2, r4, r0
 8085334:	fab0 f280 	clz	r2, r0
 8085338:	0952      	lsrs	r2, r2, #5
 808533a:	e000      	b.n	808533e <gmtime_r+0x102>
 808533c:	2201      	movs	r2, #1
 808533e:	333b      	adds	r3, #59	; 0x3b
 8085340:	441a      	add	r2, r3
 8085342:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 8085346:	2300      	movs	r3, #0
 8085348:	61ca      	str	r2, [r1, #28]
 808534a:	614d      	str	r5, [r1, #20]
 808534c:	610e      	str	r6, [r1, #16]
 808534e:	60cf      	str	r7, [r1, #12]
 8085350:	620b      	str	r3, [r1, #32]
 8085352:	4608      	mov	r0, r1
 8085354:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8085356:	bf00      	nop
 8085358:	00015180 	.word	0x00015180
 808535c:	00023ab1 	.word	0x00023ab1
 8085360:	fffdc54f 	.word	0xfffdc54f
 8085364:	00023ab0 	.word	0x00023ab0

08085368 <__env_lock>:
 8085368:	4770      	bx	lr

0808536a <__env_unlock>:
 808536a:	4770      	bx	lr

0808536c <dynalib_user>:
 808536c:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 808537c:	0000 0000 7453 7261 7574 2070 7553 6363     ....Startup Succ
 808538c:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...
 80853c0:	6925 6320 006d 7325 5320 253a 2e32 6630     %i cm.%s S:%2.0f
 80853d0:	2525 202c 3a51 3225 302e 2566 2025 2500     %%, Q:%2.0f%% .%
 80853e0:	2e33 6631 4420 6765 6572 7365 4320 2500     3.1f Degrees C.%
 80853f0:	2069 2525 4100 2b54 4643 4e55 313d 0d36     i %%.AT+CFUN=16.
 8085400:	000a 227b 6554 706d 7265 7461 7275 2265     ..{"Temperature"
 8085410:	253a 2e34 6631 202c 4422 7369 6174 636e     :%4.1f, "Distanc
 8085420:	2265 253a 2c69 2220 6142 7474 7265 2279     e":%i, "Battery"
 8085430:	253a 2c69 2220 6552 6573 7374 3a22 6925     :%i, "Resets":%i
 8085440:	202c 4122 656c 7472 2273 253a 7d69 4300     , "Alerts":%i}.C
 8085450:	6c65 756c 616c 5f72 694d 6b6c 485f 6f6f     ellular_Milk_Hoo
 8085460:	006b 6f4e 4420 7461 0061 6255 6469 746f     k.No Data.Ubidot
 8085470:	2073 6f48 6b6f 5200 7365 6f70 736e 2065     s Hook.Response 
 8085480:	6552 6563 7669 6465 5300 6174 6574 5300     Received.State.S
 8085490:	7465 5320 6c6f 7261 5020 776f 7265 6465     et Solar Powered
 80854a0:	4d20 646f 0065 0030 6c43 6165 6572 2064      Mode.0.Cleared 
 80854b0:	6f53 616c 2072 6f50 6577 6572 2064 6f4d     Solar Powered Mo
 80854c0:	6564 5300 7465 5620 7265 6f62 6573 4d20     de.Set Verbose M
 80854d0:	646f 0065 6c43 6165 6572 2064 6556 6272     ode.Cleared Verb
 80854e0:	736f 2065 6f4d 6564 5400 6d69 2065 6f7a     ose Mode.Time zo
 80854f0:	656e 6f20 6666 6573 2074 6925 5400 6d69     ne offset %i.Tim
 8085500:	0065 6f4c 2077 6f50 6577 0072 6f4e 6d72     e.Low Power.Norm
 8085510:	6c61 4f20 6570 6172 6974 6e6f 0073 7246     al Operations.Fr
 8085520:	6d6f 2520 2073 6f74 2520 0073 7453 7461     om %s to %s.Stat
 8085530:	2065 7254 6e61 6973 6974 6e6f 4500 7272     e Transition.Err
 8085540:	726f 7420 6b61 6e69 2067 654d 7361 7275     or taking Measur
 8085550:	6d65 6e65 7374 7300 6170 6b72 642f 7665     ements.spark/dev
 8085560:	6369 2f65 6573 7373 6f69 2f6e 6e65 0064     ice/session/end.
 8085570:	6f47 6e69 2067 6f74 5320 656c 7065 4c00     Going to Sleep.L
 8085580:	776f 4220 7461 6574 7972 2d20 5320 656c     ow Battery - Sle
 8085590:	7065 6e69 0067 7245 6f72 2072 7453 7461     eping.Error Stat
 80855a0:	2065 202d 6552 6573 0074 7245 6f72 2072     e - Reset.Error 
 80855b0:	7453 7461 2065 202d 6f50 6577 2072 7943     State - Power Cy
 80855c0:	6c63 0065 7245 6f72 2072 7453 7461 2065     cle.Error State 
 80855d0:	202d 7546 6c6c 4d20 646f 6d65 5220 7365     - Full Modem Res
 80855e0:	7465 5300 6769 616e 006c 6552 6573 4374     et.Signal.ResetC
 80855f0:	756f 746e 5200 6c65 6165 6573 7300 6174     ount.Release.sta
 8085600:	6574 664f 6843 0067 6f6c 5077 776f 7265     teOfChg.lowPower
 8085610:	6f4d 6564 7400 6d65 6570 6172 7574 6572     Mode.temperature
 8085620:	6400 7369 6174 636e 0065 654d 7361 7275     .distance.Measur
 8085630:	2d65 6f4e 0077 6f4c 5077 776f 7265 6f4d     e-Now.LowPowerMo
 8085640:	6564 5300 6c6f 7261 4d2d 646f 0065 6556     de.Solar-Mode.Ve
 8085650:	6272 736f 2d65 6f4d 6564 5300 7465 6954     rbose-Mode.SetTi
 8085660:	656d 6f5a 656e 4600 6961 656c 2064 6f74     meZone.Failed to
 8085670:	6320 6e6f 656e 7463 5300 6174 7472 7075      connect.Startup
 8085680:	5500 6b6e 6f6e 6e77 4e00 6e6f 0065 6957     .Unknown.None.Wi
 8085690:	6946 4700 4d53 5500 544d 0053 4443 414d     Fi.GSM.UMTS.CDMA
 80856a0:	4c00 4554 4900 4545 3845 3230 3531 0034     .LTE.IEEE802154.
 80856b0:	2e31 3330 0000 0000                         1.03....

080856b8 <_ZTVN5spark13CellularClassE>:
	...
 80856c0:	1dcb 0808 1dc1 0808 1db7 0808 1d29 0808     ............)...
 80856d0:	1dab 0808 1d9f 0808 1d93 0808 1d8b 0808     ................
 80856e0:	1d81 0808 1d77 0808 1d33 0808               ....w...3...

080856ec <_ZTV14CellularSignal>:
	...
 80856f4:	1e89 0808 1f0b 0808 1e8b 0808 1f49 0808     ............I...
 8085704:	1e91 0808 1f19 0808 1eb5 0808 1ed9 0808     ................
 8085714:	fffc ffff 0000 0000 1f03 0808               ............

08085720 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8085728:	1f91 0808 1f97 0808 1fbf 0808 1fa3 0808     ................
 8085738:	1f93 0808                                   ....

0808573c <_ZTV7TwoWire>:
	...
 8085744:	2611 0808 265b 0808 2633 0808 2613 0808     .&..[&..3&...&..
 8085754:	263b 0808 2643 0808 264b 0808 2653 0808     ;&..C&..K&..S&..

08085764 <_ZTV9IPAddress>:
	...
 808576c:	2763 0808 2755 0808 2757 0808 0066 6e6c     c'..U'..W'..f.ln
 808577c:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 808578c:	3025 3031 2075 5d00 0020 6425 2c00 0020     %010u .] .%d., .
 808579c:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
 80857ac:	6564 6174 6c69 2073 203d 6200 7561 0064     details = .baud.
 80857bc:	6553 6972 6c61 5500 4253 6553 6972 6c61     Serial.USBSerial
 80857cc:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
 80857dc:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
 80857ec:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
 80857fc:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
 808580c:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
 808581c:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 808582c:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
 808583c:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
 808584c:	6170 696e 0063 6c61 006c 0000               panic.all...

08085858 <_ZTVN5spark12NetworkClassE>:
	...
 8085860:	2801 0808 280b 0808 2815 0808 281f 0808     .(...(...(...(..
 8085870:	2829 0808 2835 0808 2841 0808 284d 0808     )(..5(..A(..M(..
 8085880:	2855 0808 285f 0808 2869 0808               U(.._(..i(..

0808588c <_ZTV8SPIClass>:
	...
 8085894:	2d99 0808 2d9b 0808 2b25 3330 3a64 3025     .-...-..%+03d:%0
 80858a4:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80858b4:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080858c4 <_ZTV11USARTSerial>:
	...
 80858cc:	3109 0808 312d 0808 3139 0808 2c51 0808     .1..-1..91..Q,..
 80858dc:	3115 0808 3121 0808 311b 0808 3127 0808     .1..!1...1..'1..
 80858ec:	310b 0808 310f 0808                         .1...1..

080858f4 <_ZTV9USBSerial>:
	...
 80858fc:	31e1 0808 3225 0808 31ff 0808 2c51 0808     .1..%2...1..Q,..
 808590c:	31f9 0808 31e3 0808 31eb 0808 321f 0808     .1...1...1...2..
 808591c:	31f3 0808 31dd 0808                         .1...1..

08085924 <day_name.4723>:
 8085924:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 8085934:	6972 6153 4a74                                   riSat

08085939 <mon_name.4724>:
 8085939:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8085949:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8085959:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8085969:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 8085979:	6425 000a                                   %d..

0808597d <_ctype_>:
 808597d:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 808598d:	2020 2020 2020 2020 2020 2020 2020 2020                     
 808599d:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80859ad:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80859bd:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80859cd:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 80859dd:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 80859ed:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 80859fd:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

08085a80 <__sf_fake_stdin>:
	...

08085aa0 <__sf_fake_stdout>:
	...

08085ac0 <__sf_fake_stderr>:
	...

08085ae0 <__month_lengths>:
 8085ae0:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8085af0:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8085b00:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8085b10:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8085b20:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8085b30:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8085b40:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 8085b50:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 8085b60:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 8085b70:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

08085b7c <link_const_variable_data_end>:
 8085b7c:	080810c9 	.word	0x080810c9
 8085b80:	080813c7 	.word	0x080813c7
 8085b84:	080816ef 	.word	0x080816ef
 8085b88:	08081e49 	.word	0x08081e49
 8085b8c:	080827f1 	.word	0x080827f1
 8085b90:	080828b5 	.word	0x080828b5
 8085b94:	08082d7d 	.word	0x08082d7d
 8085b98:	08082f55 	.word	0x08082f55
 8085b9c:	080830f5 	.word	0x080830f5
 8085ba0:	08083609 	.word	0x08083609
 8085ba4:	08083639 	.word	0x08083639
 8085ba8:	080836a5 	.word	0x080836a5
 8085bac:	08083769 	.word	0x08083769
 8085bb0:	080837ed 	.word	0x080837ed
 8085bb4:	08083871 	.word	0x08083871

08085bb8 <link_constructors_end>:
	...
