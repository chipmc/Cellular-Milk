
/Users/chipmc/Documents/Maker/Particle/Projects/Cellular-Milk/target/Cellular-Milk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  08080000  08080000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ac8  08080018  08080018  00010018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .backup       00000004  40024000  08085ae0  00024000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  3 .data         00000150  20000400  08085ae4  00030400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000750  20000550  20000550  00040550  2**2
                  ALLOC
  5 .module_info_suffix 00000028  08085c34  08085c34  00035c34  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .module_info_crc 00000004  08085c5c  08085c5c  00035c5c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .debug_info   000bb05a  00000000  00000000  00035c60  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00011fb3  00000000  00000000  000f0cba  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000173db  00000000  00000000  00102c6d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_aranges 000023e8  00000000  00000000  0011a048  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00003958  00000000  00000000  0011c430  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_macro  00028379  00000000  00000000  0011fd88  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_line   0002a5fb  00000000  00000000  00148101  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000a6aaf  00000000  00000000  001726fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_frame  0000c968  00000000  00000000  002191ac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08080018 <user_part_module>:
 8080018:	64 52 08 08                                         dR..

0808001c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 808001c:	4809      	ldr	r0, [pc, #36]	; (8080044 <module_user_pre_init+0x28>)
 808001e:	490a      	ldr	r1, [pc, #40]	; (8080048 <module_user_pre_init+0x2c>)
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
 8080020:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
 8080022:	4288      	cmp	r0, r1
 8080024:	d005      	beq.n	8080032 <module_user_pre_init+0x16>
 8080026:	4a09      	ldr	r2, [pc, #36]	; (808004c <module_user_pre_init+0x30>)
 8080028:	4282      	cmp	r2, r0
 808002a:	d002      	beq.n	8080032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
 808002c:	1a12      	subs	r2, r2, r0
 808002e:	f004 fc57 	bl	80848e0 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
 8080032:	4807      	ldr	r0, [pc, #28]	; (8080050 <module_user_pre_init+0x34>)
 8080034:	4a07      	ldr	r2, [pc, #28]	; (8080054 <module_user_pre_init+0x38>)
 8080036:	2100      	movs	r1, #0
 8080038:	1a12      	subs	r2, r2, r0
 808003a:	f004 fc5c 	bl	80848f6 <memset>
    return &link_heap_start;
}
 808003e:	4806      	ldr	r0, [pc, #24]	; (8080058 <module_user_pre_init+0x3c>)
 8080040:	bd08      	pop	{r3, pc}
 8080042:	bf00      	nop
 8080044:	20000400 	.word	0x20000400
 8080048:	08085ae4 	.word	0x08085ae4
 808004c:	20000550 	.word	0x20000550
 8080050:	20000550 	.word	0x20000550
 8080054:	20000ca0 	.word	0x20000ca0
 8080058:	20000ca0 	.word	0x20000ca0

0808005c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
 808005c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
 808005e:	f003 f96d 	bl	808333c <module_user_init_hook>
 8080062:	4b07      	ldr	r3, [pc, #28]	; (8080080 <module_user_init+0x24>)
 8080064:	4c07      	ldr	r4, [pc, #28]	; (8080084 <module_user_init+0x28>)
 8080066:	461e      	mov	r6, r3
 8080068:	1ae4      	subs	r4, r4, r3
 808006a:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 808006c:	2500      	movs	r5, #0
 808006e:	42a5      	cmp	r5, r4
 8080070:	d004      	beq.n	808007c <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
 8080072:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8080076:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
 8080078:	3501      	adds	r5, #1
 808007a:	e7f8      	b.n	808006e <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
 808007c:	bd70      	pop	{r4, r5, r6, pc}
 808007e:	bf00      	nop
 8080080:	08085aa4 	.word	0x08085aa4
 8080084:	08085ae0 	.word	0x08085ae0

08080088 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
 8080088:	f000 be38 	b.w	8080cfc <setup>

0808008c <module_user_loop>:
}

void module_user_loop() {
 808008c:	b508      	push	{r3, lr}
    loop();
 808008e:	f000 fc3b 	bl	8080908 <loop>
    _post_loop();
}
 8080092:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
 8080096:	f003 b913 	b.w	80832c0 <_post_loop>

0808009a <_Znwj>:
 808009a:	f001 bd6d 	b.w	8081b78 <malloc>

0808009e <_ZdlPv>:
 808009e:	f001 bd73 	b.w	8081b88 <free>

080800a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
 80800a2:	7800      	ldrb	r0, [r0, #0]
 80800a4:	fab0 f080 	clz	r0, r0
 80800a8:	0940      	lsrs	r0, r0, #5
 80800aa:	4770      	bx	lr

080800ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
 80800ac:	2301      	movs	r3, #1
 80800ae:	7003      	strb	r3, [r0, #0]
 80800b0:	4770      	bx	lr
	...

080800b4 <_Z11watchdogISRv>:
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
}

void watchdogISR() {
  watchDogFlag = true;
 80800b4:	4b01      	ldr	r3, [pc, #4]	; (80800bc <_Z11watchdogISRv+0x8>)
 80800b6:	2201      	movs	r2, #1
 80800b8:	701a      	strb	r2, [r3, #0]
 80800ba:	4770      	bx	lr
 80800bc:	20000604 	.word	0x20000604

080800c0 <_Z10measureNow6String>:
// They are intended to allow for customization and control during installations
// and to allow for management.


int measureNow(String command) // Function to force sending data in current hour
{
 80800c0:	b508      	push	{r3, lr}
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80800c2:	4904      	ldr	r1, [pc, #16]	; (80800d4 <_Z10measureNow6String+0x14>)
 80800c4:	f002 fe79 	bl	8082dba <_ZNK6String6equalsEPKc>
  if (command == "1")
 80800c8:	b118      	cbz	r0, 80800d2 <_Z10measureNow6String+0x12>
  {
    state = MEASURING_STATE;
 80800ca:	4b03      	ldr	r3, [pc, #12]	; (80800d8 <_Z10measureNow6String+0x18>)
 80800cc:	2203      	movs	r2, #3
 80800ce:	701a      	strb	r2, [r3, #0]
    return 1;
 80800d0:	2001      	movs	r0, #1
  }
  else return 0;
}
 80800d2:	bd08      	pop	{r3, pc}
 80800d4:	080856f4 	.word	0x080856f4
 80800d8:	20000582 	.word	0x20000582

080800dc <_ZN11EEPROMClass4readEi.isra.14>:

    EERef( const int index )
        : index( index )                 {}

    //Access/read members.
    uint8_t operator*() const            { return HAL_EEPROM_Read(index); }
 80800dc:	f001 baf0 	b.w	80816c0 <HAL_EEPROM_Read>

080800e0 <_ZN11EEPROMClass5writeEih.isra.15>:
    operator const uint8_t() const       { return **this; }

    //Assignment/write members.
    EERef &operator=( const EERef &ref ) { return *this = *ref; }
    EERef &operator=( uint8_t in )       { return HAL_EEPROM_Write(index, in), *this;  }
 80800e0:	f001 baf6 	b.w	80816d0 <HAL_EEPROM_Write>

080800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>:
    inline particle::Future<bool> publish(const char *eventName, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, NULL, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
 80800e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80800e6:	4605      	mov	r5, r0
 80800e8:	f89d 4018 	ldrb.w	r4, [sp, #24]
 80800ec:	4323      	orrs	r3, r4
        return publish(eventName, eventData, 60, flags1, flags2);
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, int ttl, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish_event(eventName, eventData, ttl, flags1 | flags2);
 80800ee:	f88d 3000 	strb.w	r3, [sp]
 80800f2:	233c      	movs	r3, #60	; 0x3c
 80800f4:	f002 f836 	bl	8082164 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>
    }

    inline particle::Future<bool> publish(const char *eventName, const char *eventData, PublishFlags flags1, PublishFlags flags2 = PublishFlags())
    {
        return publish(eventName, eventData, 60, flags1, flags2);
    }
 80800f8:	4628      	mov	r0, r5
 80800fa:	b003      	add	sp, #12
 80800fc:	bd30      	pop	{r4, r5, pc}
	...

08080100 <_Z17getSignalStrengthv>:

  return 1;
}

void getSignalStrength()
{
 8080100:	b530      	push	{r4, r5, lr}
 8080102:	b08f      	sub	sp, #60	; 0x3c
  // New Boron capability - https://community.particle.io/t/boron-lte-and-cellular-rssi-funny-values/45299/8
  CellularSignal sig = Cellular.RSSI();
 8080104:	4910      	ldr	r1, [pc, #64]	; (8080148 <_Z17getSignalStrengthv+0x48>)
 8080106:	a804      	add	r0, sp, #16
 8080108:	f001 fde2 	bl	8081cd0 <_ZN5spark13CellularClass4RSSIEv>

  auto rat = sig.getAccessTechnology();
 808010c:	a804      	add	r0, sp, #16
 808010e:	f001 fe3a 	bl	8081d86 <_ZNK14CellularSignal19getAccessTechnologyEv>
 8080112:	4604      	mov	r4, r0

  //float strengthVal = sig.getStrengthValue();
  float strengthPercentage = sig.getStrength();
 8080114:	a804      	add	r0, sp, #16
 8080116:	f001 fe95 	bl	8081e44 <_ZNK14CellularSignal11getStrengthEv>
 808011a:	4605      	mov	r5, r0

  //float qualityVal = sig.getQualityValue();
  float qualityPercentage = sig.getQuality();
 808011c:	a804      	add	r0, sp, #16
 808011e:	f001 fe79 	bl	8081e14 <_ZNK14CellularSignal10getQualityEv>

  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
 8080122:	f003 fce7 	bl	8083af4 <__aeabi_f2d>
 8080126:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808012a:	4628      	mov	r0, r5
 808012c:	f003 fce2 	bl	8083af4 <__aeabi_f2d>
 8080130:	e9cd 0100 	strd	r0, r1, [sp]
 8080134:	4b05      	ldr	r3, [pc, #20]	; (808014c <_Z17getSignalStrengthv+0x4c>)
 8080136:	4a06      	ldr	r2, [pc, #24]	; (8080150 <_Z17getSignalStrengthv+0x50>)
 8080138:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 808013c:	2140      	movs	r1, #64	; 0x40
 808013e:	4805      	ldr	r0, [pc, #20]	; (8080154 <_Z17getSignalStrengthv+0x54>)
 8080140:	f001 fd42 	bl	8081bc8 <snprintf>
}
 8080144:	b00f      	add	sp, #60	; 0x3c
 8080146:	bd30      	pop	{r4, r5, pc}
 8080148:	2000064c 	.word	0x2000064c
 808014c:	20000478 	.word	0x20000478
 8080150:	080852b8 	.word	0x080852b8
 8080154:	2000059c 	.word	0x2000059c

08080158 <_Z16takeMeasurementsv>:
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}

// These are the functions that are part of the takeMeasurements call

bool takeMeasurements() {
 8080158:	b507      	push	{r0, r1, r2, lr}

  if (sensor.read()) {
 808015a:	4815      	ldr	r0, [pc, #84]	; (80801b0 <_Z16takeMeasurementsv+0x58>)
 808015c:	f001 f892 	bl	8081284 <_ZN4DS184readEv>
 8080160:	b158      	cbz	r0, 808017a <_Z16takeMeasurementsv+0x22>
    snprintf(temperatureString, sizeof(temperatureString), "%3.1f Degrees C", sensor.celsius());  // Ensures you get the size right and prevent memory overflow2
 8080162:	4813      	ldr	r0, [pc, #76]	; (80801b0 <_Z16takeMeasurementsv+0x58>)
 8080164:	f001 f8b3 	bl	80812ce <_ZN4DS187celsiusEv>
 8080168:	f003 fcc4 	bl	8083af4 <__aeabi_f2d>
 808016c:	4a11      	ldr	r2, [pc, #68]	; (80801b4 <_Z16takeMeasurementsv+0x5c>)
 808016e:	e9cd 0100 	strd	r0, r1, [sp]
 8080172:	2110      	movs	r1, #16
 8080174:	4810      	ldr	r0, [pc, #64]	; (80801b8 <_Z16takeMeasurementsv+0x60>)
 8080176:	f001 fd27 	bl	8081bc8 <snprintf>
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 808017a:	4b10      	ldr	r3, [pc, #64]	; (80801bc <_Z16takeMeasurementsv+0x64>)
 808017c:	2200      	movs	r2, #0
 808017e:	4611      	mov	r1, r2
 8080180:	6858      	ldr	r0, [r3, #4]
 8080182:	f001 fcc1 	bl	8081b08 <network_ready>
  }

  if (Cellular.ready()) getSignalStrength();                          // Test signal strength if the cellular modem is on and ready
 8080186:	b108      	cbz	r0, 808018c <_Z16takeMeasurementsv+0x34>
 8080188:	f7ff ffba 	bl	8080100 <_Z17getSignalStrengthv>
  stateOfCharge = int(batteryMonitor.getSoC());                       // Percentage of full charge
 808018c:	480c      	ldr	r0, [pc, #48]	; (80801c0 <_Z16takeMeasurementsv+0x68>)
 808018e:	f002 f999 	bl	80824c4 <_ZN9FuelGauge6getSoCEv>
 8080192:	f004 fa39 	bl	8084608 <__aeabi_f2iz>
 8080196:	4a0b      	ldr	r2, [pc, #44]	; (80801c4 <_Z16takeMeasurementsv+0x6c>)
 8080198:	4603      	mov	r3, r0
 808019a:	6010      	str	r0, [r2, #0]
  snprintf(batteryString, sizeof(batteryString), "%i %%", stateOfCharge);
 808019c:	2110      	movs	r1, #16
 808019e:	4a0a      	ldr	r2, [pc, #40]	; (80801c8 <_Z16takeMeasurementsv+0x70>)
 80801a0:	480a      	ldr	r0, [pc, #40]	; (80801cc <_Z16takeMeasurementsv+0x74>)
 80801a2:	f001 fd11 	bl	8081bc8 <snprintf>

  return 1;
}
 80801a6:	2001      	movs	r0, #1
 80801a8:	b003      	add	sp, #12
 80801aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80801ae:	bf00      	nop
 80801b0:	20000618 	.word	0x20000618
 80801b4:	080852d1 	.word	0x080852d1
 80801b8:	20000554 	.word	0x20000554
 80801bc:	2000064c 	.word	0x2000064c
 80801c0:	20000578 	.word	0x20000578
 80801c4:	20000594 	.word	0x20000594
 80801c8:	080852e1 	.word	0x080852e1
 80801cc:	20000606 	.word	0x20000606

080801d0 <_Z17connectToParticlev>:
  snprintf(SignalString,sizeof(SignalString), "%s S:%2.0f%%, Q:%2.0f%% ", radioTech[rat], strengthPercentage, qualityPercentage);
}


// These functions control the connection and disconnection from Particle
bool connectToParticle() {
 80801d0:	e92d 43d0 	stmdb	sp!, {r4, r6, r7, r8, r9, lr}

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 80801d4:	481a      	ldr	r0, [pc, #104]	; (8080240 <_Z17connectToParticlev+0x70>)
 80801d6:	2300      	movs	r3, #0
 80801d8:	461a      	mov	r2, r3
 80801da:	4619      	mov	r1, r3
 80801dc:	6840      	ldr	r0, [r0, #4]
 80801de:	f001 fc9b 	bl	8081b18 <network_on>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80801e2:	f240 36e7 	movw	r6, #999	; 0x3e7
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
 80801e6:	f001 fc2f 	bl	8081a48 <spark_cloud_flag_connect>
 80801ea:	f44f 7496 	mov.w	r4, #300	; 0x12c
 80801ee:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80801f0:	2000      	movs	r0, #0
 80801f2:	f001 fa85 	bl	8081700 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 80801f6:	4680      	mov	r8, r0
 80801f8:	f04f 0900 	mov.w	r9, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 80801fc:	2000      	movs	r0, #0
 80801fe:	f001 fa7f 	bl	8081700 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080202:	ebb0 0008 	subs.w	r0, r0, r8
 8080206:	eb61 0109 	sbc.w	r1, r1, r9
 808020a:	428f      	cmp	r7, r1
 808020c:	bf08      	it	eq
 808020e:	4286      	cmpeq	r6, r0
 8080210:	d305      	bcc.n	808021e <_Z17connectToParticlev+0x4e>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080212:	f001 fc29 	bl	8081a68 <spark_cloud_flag_connected>
 8080216:	b910      	cbnz	r0, 808021e <_Z17connectToParticlev+0x4e>
            spark_process();
 8080218:	f001 fc0e 	bl	8081a38 <spark_process>
 808021c:	e7ee      	b.n	80801fc <_Z17connectToParticlev+0x2c>
 808021e:	f001 fc23 	bl	8081a68 <spark_cloud_flag_connected>
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 8080222:	b118      	cbz	r0, 808022c <_Z17connectToParticlev+0x5c>
    Particle.process();
  }
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}
 8080224:	e8bd 43d0 	ldmia.w	sp!, {r4, r6, r7, r8, r9, lr}
 8080228:	f001 bc1e 	b.w	8081a68 <spark_cloud_flag_connected>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 808022c:	f001 fa30 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 8080230:	4b04      	ldr	r3, [pc, #16]	; (8080244 <_Z17connectToParticlev+0x74>)
 8080232:	6018      	str	r0, [r3, #0]
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
    static void process(void) {
    		application_checkin();
    		spark_process();
 8080234:	f001 fc00 	bl	8081a38 <spark_process>
// These functions control the connection and disconnection from Particle
bool connectToParticle() {
  Cellular.on();
  Particle.connect();
  // wait for *up to* 5 minutes
  for (int retry = 0; retry < 300 && !waitFor(Particle.connected,1000); retry++) {
 8080238:	3c01      	subs	r4, #1
 808023a:	d0f3      	beq.n	8080224 <_Z17connectToParticlev+0x54>
 808023c:	e7d8      	b.n	80801f0 <_Z17connectToParticlev+0x20>
 808023e:	bf00      	nop
 8080240:	2000064c 	.word	0x2000064c
 8080244:	20000b64 	.word	0x20000b64

08080248 <_Z12notConnectedv>:
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
  return true;
}

bool notConnected() {                                             // Companion function for disconnectFromParticle
 8080248:	b508      	push	{r3, lr}
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 808024a:	f001 fc0d 	bl	8081a68 <spark_cloud_flag_connected>
    return !Particle.connected();
 808024e:	f080 0001 	eor.w	r0, r0, #1
}
 8080252:	b2c0      	uxtb	r0, r0
 8080254:	bd08      	pop	{r3, pc}
	...

08080258 <_Z22disconnectFromParticlev>:
  if (Particle.connected()) return 1;                               // Were able to connect successfully
  else return 0;                                                    // Failed to connect
}

bool disconnectFromParticle()                                     // Ensures we disconnect cleanly from Particle
{
 8080258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    static bool disconnected(void) { return !connected(); }
    static void connect(void) {
        spark_cloud_flag_connect();
    }
    static void disconnect(void) { spark_cloud_flag_disconnect(); }
 808025a:	f001 fbfd 	bl	8081a58 <spark_cloud_flag_disconnect>
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 808025e:	2000      	movs	r0, #0
 8080260:	f001 fa4e 	bl	8081700 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080264:	f643 2697 	movw	r6, #14999	; 0x3a97
 8080268:	4604      	mov	r4, r0
 808026a:	2500      	movs	r5, #0
 808026c:	2700      	movs	r7, #0
        HAL_Core_Button_Mirror_Pin_Disable((uint8_t)bootloader, 0, NULL);
    }

    // This function is similar to the global millis() but returns a 64-bit value
    static uint64_t millis() {
        return hal_timer_millis(nullptr);
 808026e:	2000      	movs	r0, #0
 8080270:	f001 fa46 	bl	8081700 <hal_timer_millis>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8080274:	1b00      	subs	r0, r0, r4
 8080276:	eb61 0105 	sbc.w	r1, r1, r5
 808027a:	428f      	cmp	r7, r1
 808027c:	bf08      	it	eq
 808027e:	4286      	cmpeq	r6, r0
 8080280:	d305      	bcc.n	808028e <_Z22disconnectFromParticlev+0x36>
  Particle.disconnect();
  waitFor(notConnected, 15000);                                   // make sure before turning off the cellular modem                              
 8080282:	f7ff ffe1 	bl	8080248 <_Z12notConnectedv>
 8080286:	b910      	cbnz	r0, 808028e <_Z22disconnectFromParticlev+0x36>
            spark_process();
 8080288:	f001 fbd6 	bl	8081a38 <spark_process>
 808028c:	e7ef      	b.n	808026e <_Z22disconnectFromParticlev+0x16>
 808028e:	f7ff ffdb 	bl	8080248 <_Z12notConnectedv>
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8080292:	4806      	ldr	r0, [pc, #24]	; (80802ac <_Z22disconnectFromParticlev+0x54>)
 8080294:	2300      	movs	r3, #0
 8080296:	461a      	mov	r2, r3
 8080298:	4619      	mov	r1, r3
 808029a:	6840      	ldr	r0, [r0, #4]
 808029c:	f001 fc44 	bl	8081b28 <network_off>
  Cellular.off();
  delay(2000);                                                    // Bummer but only should happen once an hour
 80802a0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80802a4:	f001 fca8 	bl	8081bf8 <delay>
  return true;
}
 80802a8:	2001      	movs	r0, #1
 80802aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80802ac:	2000064c 	.word	0x2000064c

080802b0 <_Z9PMICresetv>:
bool notConnected() {                                             // Companion function for disconnectFromParticle
    return !Particle.connected();
}

// Power Management function
void PMICreset() {
 80802b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  power.begin();                                            // Settings for Solar powered power management
 80802b2:	481f      	ldr	r0, [pc, #124]	; (8080330 <_Z9PMICresetv+0x80>)
 80802b4:	f002 fa86 	bl	80827c4 <_ZN4PMIC5beginEv>
  power.disableWatchdog();
 80802b8:	481d      	ldr	r0, [pc, #116]	; (8080330 <_Z9PMICresetv+0x80>)
 80802ba:	f002 fc30 	bl	8082b1e <_ZN4PMIC15disableWatchdogEv>
  if (solarPowerMode) {
 80802be:	4b1d      	ldr	r3, [pc, #116]	; (8080334 <_Z9PMICresetv+0x84>)
 80802c0:	781c      	ldrb	r4, [r3, #0]
 80802c2:	4b1d      	ldr	r3, [pc, #116]	; (8080338 <_Z9PMICresetv+0x88>)
 80802c4:	b1bc      	cbz	r4, 80802f6 <_Z9PMICresetv+0x46>
    lowBattLimit = 20;                                      // Trigger for Low Batt State
 80802c6:	2214      	movs	r2, #20
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
 80802c8:	f241 21e8 	movw	r1, #4840	; 0x12e8
 80802cc:	4818      	ldr	r0, [pc, #96]	; (8080330 <_Z9PMICresetv+0x80>)
// Power Management function
void PMICreset() {
  power.begin();                                            // Settings for Solar powered power management
  power.disableWatchdog();
  if (solarPowerMode) {
    lowBattLimit = 20;                                      // Trigger for Low Batt State
 80802ce:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4840);                       // Set the lowest input voltage to 4.84 volts best setting for 6V solar panels
 80802d0:	f002 fafa 	bl	80828c8 <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(900);                        // default is 900mA
 80802d4:	f44f 7161 	mov.w	r1, #900	; 0x384
 80802d8:	4815      	ldr	r0, [pc, #84]	; (8080330 <_Z9PMICresetv+0x80>)
 80802da:	f002 fb7f 	bl	80829dc <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
 80802de:	2200      	movs	r2, #0
 80802e0:	4611      	mov	r1, r2
 80802e2:	9202      	str	r2, [sp, #8]
 80802e4:	9201      	str	r2, [sp, #4]
 80802e6:	9200      	str	r2, [sp, #0]
 80802e8:	2301      	movs	r3, #1
 80802ea:	4811      	ldr	r0, [pc, #68]	; (8080330 <_Z9PMICresetv+0x80>)
 80802ec:	f002 fbbe 	bl	8082a6c <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
 80802f0:	f241 0170 	movw	r1, #4208	; 0x1070
 80802f4:	e016      	b.n	8080324 <_Z9PMICresetv+0x74>
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
 80802f6:	221e      	movs	r2, #30
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
 80802f8:	f241 0170 	movw	r1, #4208	; 0x1070
 80802fc:	480c      	ldr	r0, [pc, #48]	; (8080330 <_Z9PMICresetv+0x80>)
    power.setInputCurrentLimit(900);                        // default is 900mA
    power.setChargeCurrent(0,0,1,0,0,0);                    // default is 512mA matches my 3W panel
    power.setChargeVoltage(4208);                           // Allows us to charge cloe to 100% - battery can't go over 45 celcius
  }
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
 80802fe:	601a      	str	r2, [r3, #0]
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
 8080300:	f002 fae2 	bl	80828c8 <_ZN4PMIC20setInputVoltageLimitEt>
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
 8080304:	f240 51dc 	movw	r1, #1500	; 0x5dc
 8080308:	4809      	ldr	r0, [pc, #36]	; (8080330 <_Z9PMICresetv+0x80>)
 808030a:	f002 fb67 	bl	80829dc <_ZN4PMIC20setInputCurrentLimitEt>
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
 808030e:	2301      	movs	r3, #1
 8080310:	4621      	mov	r1, r4
 8080312:	9402      	str	r4, [sp, #8]
 8080314:	9401      	str	r4, [sp, #4]
 8080316:	9400      	str	r4, [sp, #0]
 8080318:	461a      	mov	r2, r3
 808031a:	4805      	ldr	r0, [pc, #20]	; (8080330 <_Z9PMICresetv+0x80>)
 808031c:	f002 fba6 	bl	8082a6c <_ZN4PMIC16setChargeCurrentEbbbbbb>
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
 8080320:	f241 0110 	movw	r1, #4112	; 0x1010
 8080324:	4802      	ldr	r0, [pc, #8]	; (8080330 <_Z9PMICresetv+0x80>)
  }
}
 8080326:	b004      	add	sp, #16
 8080328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  else  {
    lowBattLimit = 30;                                      // Trigger for Low Batt State
    power.setInputVoltageLimit(4208);                       // This is the default value for the Electron
    power.setInputCurrentLimit(1500);                       // default is 900mA this let's me charge faster
    power.setChargeCurrent(0,1,1,0,0,0);                    // default is 2048mA (011000) = 512mA+1024mA+512mA)
    power.setChargeVoltage(4112);                           // default is 4.112V termination voltage
 808032c:	f002 bbd1 	b.w	8082ad2 <_ZN4PMIC16setChargeVoltageEt>
 8080330:	20000583 	.word	0x20000583
 8080334:	20000605 	.word	0x20000605
 8080338:	20000564 	.word	0x20000564

0808033c <_Z20meterParticlePublishv>:
  }
  Serial.println(stateTransitionString);
}

bool meterParticlePublish(void)
{
 808033c:	b508      	push	{r3, lr}
#endif

#include "timer_hal.h"
#include "delay_hal.h"

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
 808033e:	f001 f9a7 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>
  if(millis() - lastPublish >= publishFrequency) return 1;
 8080342:	4b04      	ldr	r3, [pc, #16]	; (8080354 <_Z20meterParticlePublishv+0x18>)
 8080344:	681b      	ldr	r3, [r3, #0]
 8080346:	1ac0      	subs	r0, r0, r3
  else return 0;
}
 8080348:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 808034c:	bf34      	ite	cc
 808034e:	2000      	movcc	r0, #0
 8080350:	2001      	movcs	r0, #1
 8080352:	bd08      	pop	{r3, pc}
 8080354:	20000588 	.word	0x20000588

08080358 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.31>:
        }
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
 8080358:	b508      	push	{r3, lr}
{
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
  oldState = state;
  if(Particle.connected()) {
    waitUntil(meterParticlePublish);
 808035a:	f7ff ffef 	bl	808033c <_Z20meterParticlePublishv>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 808035e:	b118      	cbz	r0, 8080368 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.31+0x10>
        return _condition();
    }

    template<typename Condition> static bool waitCondition(Condition _condition) {
        return waitConditionWhile(_condition, []{ return true; });
    }
 8080360:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8080364:	f7ff bfea 	b.w	808033c <_Z20meterParticlePublishv>

    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
            spark_process();
 8080368:	f001 fb66 	bl	8081a38 <spark_process>
 808036c:	e7f5      	b.n	808035a <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.31+0x2>
	...

08080370 <_Z14fullModemResetv>:
{
  if(millis() - lastPublish >= publishFrequency) return 1;
  else return 0;
}

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample
 8080370:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8080372:	f001 fb71 	bl	8081a58 <spark_cloud_flag_disconnect>
 8080376:	f001 f98b 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 808037a:	f643 2597 	movw	r5, #14999	; 0x3a97
 808037e:	4604      	mov	r4, r0
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080380:	f001 fb72 	bl	8081a68 <spark_cloud_flag_connected>
 8080384:	b140      	cbz	r0, 8080398 <_Z14fullModemResetv+0x28>
 8080386:	f001 f983 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>
 808038a:	1b00      	subs	r0, r0, r4
 808038c:	42a8      	cmp	r0, r5
 808038e:	d803      	bhi.n	8080398 <_Z14fullModemResetv+0x28>
		delay(100);
 8080390:	2064      	movs	r0, #100	; 0x64
 8080392:	f001 fc31 	bl	8081bf8 <delay>

void fullModemReset() {  // Adapted form Rikkas7's https://github.com/rickkas7/electronsample

	Particle.disconnect(); 	                                         // Disconnect from the cloud
	unsigned long startTime = millis();  	                           // Wait up to 15 seconds to disconnect
	while(Particle.connected() && millis() - startTime < 15000) {
 8080396:	e7f3      	b.n	8080380 <_Z14fullModemResetv+0x10>
    }

    template<typename... Targs>
    inline int command(system_tick_t timeout_ms, const char* format, Targs... Fargs)
    {
        return cellular_command(NULL, NULL, timeout_ms, format, Fargs...);
 8080398:	2100      	movs	r1, #0
 808039a:	4b09      	ldr	r3, [pc, #36]	; (80803c0 <_Z14fullModemResetv+0x50>)
 808039c:	f247 5230 	movw	r2, #30000	; 0x7530
 80803a0:	4608      	mov	r0, r1
 80803a2:	f001 f93d 	bl	8081620 <cellular_command>
		delay(100);
	}
	// Reset the modem and SIM card
	// 16:MT silent reset (with detach from network and saving of NVM parameters), with reset of the SIM card
	Cellular.command(30000, "AT+CFUN=16\r\n");
	delay(1000);
 80803a6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80803aa:	f001 fc25 	bl	8081bf8 <delay>
	// Go into deep sleep for 10 seconds to try to reset everything. This turns off the modem as well.
	System.sleep(SLEEP_MODE_DEEP, 10);
 80803ae:	4b05      	ldr	r3, [pc, #20]	; (80803c4 <_Z14fullModemResetv+0x54>)
 80803b0:	220a      	movs	r2, #10
 80803b2:	681b      	ldr	r3, [r3, #0]
 80803b4:	2101      	movs	r1, #1
 80803b6:	4668      	mov	r0, sp
 80803b8:	f002 fd32 	bl	8082e20 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
}
 80803bc:	b003      	add	sp, #12
 80803be:	bd30      	pop	{r4, r5, pc}
 80803c0:	080852e7 	.word	0x080852e7
 80803c4:	200005ec 	.word	0x200005ec

080803c8 <_Z11petWatchdogv>:

void watchdogISR() {
  watchDogFlag = true;
}

void petWatchdog() {
 80803c8:	b508      	push	{r3, lr}
  digitalWrite(donePin,HIGH);
 80803ca:	2101      	movs	r1, #1
 80803cc:	2006      	movs	r0, #6
 80803ce:	f003 f816 	bl	80833fe <digitalWrite>
  digitalWrite(donePin,LOW);
 80803d2:	2100      	movs	r1, #0
 80803d4:	2006      	movs	r0, #6
 80803d6:	f003 f812 	bl	80833fe <digitalWrite>
  watchDogFlag = false;
 80803da:	4b02      	ldr	r3, [pc, #8]	; (80803e4 <_Z11petWatchdogv+0x1c>)
 80803dc:	2200      	movs	r2, #0
 80803de:	701a      	strb	r2, [r3, #0]
 80803e0:	bd08      	pop	{r3, pc}
 80803e2:	bf00      	nop
 80803e4:	20000604 	.word	0x20000604

080803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80803e8:	b538      	push	{r3, r4, r5, lr}
      {
	if (_M_pi != nullptr)
 80803ea:	6804      	ldr	r4, [r0, #0]
      explicit __shared_count(const __weak_count<_Lp>& __r);

      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
 80803ec:	4605      	mov	r5, r0
      {
	if (_M_pi != nullptr)
 80803ee:	b17c      	cbz	r4, 8080410 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_release() noexcept
    {
      if (--_M_use_count == 0)
 80803f0:	6863      	ldr	r3, [r4, #4]
 80803f2:	3b01      	subs	r3, #1
 80803f4:	6063      	str	r3, [r4, #4]
 80803f6:	b95b      	cbnz	r3, 8080410 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
        {
          _M_dispose();
 80803f8:	6823      	ldr	r3, [r4, #0]
 80803fa:	4620      	mov	r0, r4
 80803fc:	689b      	ldr	r3, [r3, #8]
 80803fe:	4798      	blx	r3
          if (--_M_weak_count == 0)
 8080400:	68a3      	ldr	r3, [r4, #8]
 8080402:	3b01      	subs	r3, #1
 8080404:	60a3      	str	r3, [r4, #8]
 8080406:	b91b      	cbnz	r3, 8080410 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev+0x28>
            _M_destroy();
 8080408:	6823      	ldr	r3, [r4, #0]
 808040a:	4620      	mov	r0, r4
 808040c:	68db      	ldr	r3, [r3, #12]
 808040e:	4798      	blx	r3

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }
 8080410:	4628      	mov	r0, r5
 8080412:	bd38      	pop	{r3, r4, r5, pc}

08080414 <_Z9sendEventv>:
    break;
  }
}

void sendEvent()
{
 8080414:	b500      	push	{lr}
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Soilconductivity\":%4.1f, \"Soiltemp\":%4.1f, \"Soilmoisture\":%4.1f, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, soilConductivity, soilTempInC, soilVolumetricWater, stateOfCharge,resetCount, alertCount);
 8080416:	4b26      	ldr	r3, [pc, #152]	; (80804b0 <_Z9sendEventv+0x9c>)
    break;
  }
}

void sendEvent()
{
 8080418:	b0d1      	sub	sp, #324	; 0x144
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Soilconductivity\":%4.1f, \"Soiltemp\":%4.1f, \"Soilmoisture\":%4.1f, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, soilConductivity, soilTempInC, soilVolumetricWater, stateOfCharge,resetCount, alertCount);
 808041a:	681b      	ldr	r3, [r3, #0]
 808041c:	930c      	str	r3, [sp, #48]	; 0x30
 808041e:	4b25      	ldr	r3, [pc, #148]	; (80804b4 <_Z9sendEventv+0xa0>)
 8080420:	681b      	ldr	r3, [r3, #0]
 8080422:	930b      	str	r3, [sp, #44]	; 0x2c
 8080424:	4b24      	ldr	r3, [pc, #144]	; (80804b8 <_Z9sendEventv+0xa4>)
 8080426:	681b      	ldr	r3, [r3, #0]
 8080428:	930a      	str	r3, [sp, #40]	; 0x28
 808042a:	4b24      	ldr	r3, [pc, #144]	; (80804bc <_Z9sendEventv+0xa8>)
 808042c:	6818      	ldr	r0, [r3, #0]
 808042e:	f003 fb61 	bl	8083af4 <__aeabi_f2d>
 8080432:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8080436:	4b22      	ldr	r3, [pc, #136]	; (80804c0 <_Z9sendEventv+0xac>)
 8080438:	6818      	ldr	r0, [r3, #0]
 808043a:	f003 fb5b 	bl	8083af4 <__aeabi_f2d>
 808043e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8080442:	4b20      	ldr	r3, [pc, #128]	; (80804c4 <_Z9sendEventv+0xb0>)
 8080444:	6818      	ldr	r0, [r3, #0]
 8080446:	f003 fb55 	bl	8083af4 <__aeabi_f2d>
 808044a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 808044e:	4b1e      	ldr	r3, [pc, #120]	; (80804c8 <_Z9sendEventv+0xb4>)
 8080450:	6818      	ldr	r0, [r3, #0]
 8080452:	f003 fb4f 	bl	8083af4 <__aeabi_f2d>
 8080456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 808045a:	4b1c      	ldr	r3, [pc, #112]	; (80804cc <_Z9sendEventv+0xb8>)
 808045c:	6818      	ldr	r0, [r3, #0]
 808045e:	f003 fb49 	bl	8083af4 <__aeabi_f2d>
 8080462:	4a1b      	ldr	r2, [pc, #108]	; (80804d0 <_Z9sendEventv+0xbc>)
 8080464:	e9cd 0100 	strd	r0, r1, [sp]
 8080468:	f44f 7180 	mov.w	r1, #256	; 0x100
 808046c:	a810      	add	r0, sp, #64	; 0x40
 808046e:	f001 fbab 	bl	8081bc8 <snprintf>
 8080472:	4b18      	ldr	r3, [pc, #96]	; (80804d4 <_Z9sendEventv+0xc0>)
  Particle.publish("Cellular_Soil_Hook", data, PRIVATE);
 8080474:	2200      	movs	r2, #0
 8080476:	4918      	ldr	r1, [pc, #96]	; (80804d8 <_Z9sendEventv+0xc4>)
        val_(0) {
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080478:	781b      	ldrb	r3, [r3, #0]
 808047a:	a80e      	add	r0, sp, #56	; 0x38
 808047c:	f88d 2000 	strb.w	r2, [sp]
 8080480:	aa10      	add	r2, sp, #64	; 0x40
 8080482:	f7ff fe2f 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8080486:	a80f      	add	r0, sp, #60	; 0x3c
 8080488:	f7ff ffae 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  currentHourlyPeriod = Time.hour();                                      // Change the time period
 808048c:	f002 fd92 	bl	8082fb4 <_ZN9TimeClass4hourEv>
 8080490:	4b12      	ldr	r3, [pc, #72]	; (80804dc <_Z9sendEventv+0xc8>)
 8080492:	7018      	strb	r0, [r3, #0]
  currentDailyPeriod = Time.day();
 8080494:	f002 fda2 	bl	8082fdc <_ZN9TimeClass3dayEv>
 8080498:	4b11      	ldr	r3, [pc, #68]	; (80804e0 <_Z9sendEventv+0xcc>)
  dataInFlight = true;                                                // set the data inflight flag
 808049a:	2201      	movs	r2, #1
{
  char data[256];                                                         // Store the date in this character array - not global
  snprintf(data, sizeof(data), "{\"Temperature\":%4.1f, \"Humidity\":%4.1f, \"Soilconductivity\":%4.1f, \"Soiltemp\":%4.1f, \"Soilmoisture\":%4.1f, \"Battery\":%i, \"Resets\":%i, \"Alerts\":%i}", temperatureInC, relativeHumidity, soilConductivity, soilTempInC, soilVolumetricWater, stateOfCharge,resetCount, alertCount);
  Particle.publish("Cellular_Soil_Hook", data, PRIVATE);
  currentHourlyPeriod = Time.hour();                                      // Change the time period
  currentDailyPeriod = Time.day();
 808049c:	7018      	strb	r0, [r3, #0]
  dataInFlight = true;                                                // set the data inflight flag
 808049e:	4b11      	ldr	r3, [pc, #68]	; (80804e4 <_Z9sendEventv+0xd0>)
 80804a0:	701a      	strb	r2, [r3, #0]
 80804a2:	f001 f8f5 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>
  webhookTimeStamp = millis();
 80804a6:	4b10      	ldr	r3, [pc, #64]	; (80804e8 <_Z9sendEventv+0xd4>)
 80804a8:	6018      	str	r0, [r3, #0]
}
 80804aa:	b051      	add	sp, #324	; 0x144
 80804ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80804b0:	20000590 	.word	0x20000590
 80804b4:	200005dc 	.word	0x200005dc
 80804b8:	20000594 	.word	0x20000594
 80804bc:	20000570 	.word	0x20000570
 80804c0:	2000058c 	.word	0x2000058c
 80804c4:	200005e4 	.word	0x200005e4
 80804c8:	20000598 	.word	0x20000598
 80804cc:	200005fc 	.word	0x200005fc
 80804d0:	080852f4 	.word	0x080852f4
 80804d4:	2000056d 	.word	0x2000056d
 80804d8:	08085386 	.word	0x08085386
 80804dc:	200005e0 	.word	0x200005e0
 80804e0:	20000584 	.word	0x20000584
 80804e4:	20000474 	.word	0x20000474
 80804e8:	20000568 	.word	0x20000568

080804ec <_Z14UbidotsHandlerPKcS0_>:

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
 80804ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80804ee:	b085      	sub	sp, #20
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
 80804f0:	4608      	mov	r0, r1
  dataInFlight = true;                                                // set the data inflight flag
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
 80804f2:	af02      	add	r7, sp, #8
 80804f4:	460e      	mov	r6, r1
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
 80804f6:	f004 fa5c 	bl	80849b2 <strlen>
 80804fa:	f100 0308 	add.w	r3, r0, #8
 80804fe:	f023 0307 	bic.w	r3, r3, #7
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
    lastPublish = millis();
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
 8080502:	466d      	mov	r5, sp
  webhookTimeStamp = millis();
}

void UbidotsHandler(const char *event, const char *data)              // Looks at the response from Ubidots - Will reset Photon if no successful response
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
 8080504:	ebad 0d03 	sub.w	sp, sp, r3
 8080508:	ac02      	add	r4, sp, #8
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
 808050a:	1c42      	adds	r2, r0, #1
 808050c:	4631      	mov	r1, r6
 808050e:	4620      	mov	r0, r4
 8080510:	f004 fa6c 	bl	80849ec <strncpy>
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
 8080514:	f89d 6008 	ldrb.w	r6, [sp, #8]
 8080518:	b94e      	cbnz	r6, 808052e <_Z14UbidotsHandlerPKcS0_+0x42>
 808051a:	f001 faa5 	bl	8081a68 <spark_cloud_flag_connected>
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
 808051e:	2800      	cmp	r0, #0
 8080520:	d03b      	beq.n	808059a <_Z14UbidotsHandlerPKcS0_+0xae>
 8080522:	4b20      	ldr	r3, [pc, #128]	; (80805a4 <_Z14UbidotsHandlerPKcS0_+0xb8>)
 8080524:	4a20      	ldr	r2, [pc, #128]	; (80805a8 <_Z14UbidotsHandlerPKcS0_+0xbc>)
 8080526:	781b      	ldrb	r3, [r3, #0]
 8080528:	f88d 6000 	strb.w	r6, [sp]
 808052c:	e02e      	b.n	808058c <_Z14UbidotsHandlerPKcS0_+0xa0>
    return;
  }
  int responseCode = atoi(dataCopy);                                  // Response is only a single number thanks to Template
 808052e:	4620      	mov	r0, r4
 8080530:	f004 f8cc 	bl	80846cc <atoi>
  if ((responseCode == 200) || (responseCode == 201))
 8080534:	38c8      	subs	r0, #200	; 0xc8
 8080536:	2801      	cmp	r0, #1
 8080538:	d81f      	bhi.n	808057a <_Z14UbidotsHandlerPKcS0_+0x8e>
 808053a:	f001 fa95 	bl	8081a68 <spark_cloud_flag_connected>
  {
    if (Particle.connected()) Particle.publish("State","Response Received", PRIVATE);
 808053e:	b160      	cbz	r0, 808055a <_Z14UbidotsHandlerPKcS0_+0x6e>
 8080540:	4b18      	ldr	r3, [pc, #96]	; (80805a4 <_Z14UbidotsHandlerPKcS0_+0xb8>)
 8080542:	2200      	movs	r2, #0
 8080544:	781b      	ldrb	r3, [r3, #0]
 8080546:	4638      	mov	r0, r7
 8080548:	f88d 2000 	strb.w	r2, [sp]
 808054c:	4917      	ldr	r1, [pc, #92]	; (80805ac <_Z14UbidotsHandlerPKcS0_+0xc0>)
 808054e:	4a18      	ldr	r2, [pc, #96]	; (80805b0 <_Z14UbidotsHandlerPKcS0_+0xc4>)
 8080550:	f7ff fdc8 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 8080554:	1d38      	adds	r0, r7, #4
 8080556:	f7ff ff47 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 808055a:	f001 f899 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 808055e:	4b15      	ldr	r3, [pc, #84]	; (80805b4 <_Z14UbidotsHandlerPKcS0_+0xc8>)
 8080560:	6018      	str	r0, [r3, #0]
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
 8080562:	f002 ff79 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 8080566:	f002 fd1e 	bl	8082fa6 <_ZN9TimeClass3nowEv>
 808056a:	b2c1      	uxtb	r1, r0
 808056c:	2005      	movs	r0, #5
 808056e:	f7ff fdb7 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
    dataInFlight = false;                                             // Data has been received
 8080572:	4b11      	ldr	r3, [pc, #68]	; (80805b8 <_Z14UbidotsHandlerPKcS0_+0xcc>)
 8080574:	2200      	movs	r2, #0
 8080576:	701a      	strb	r2, [r3, #0]
 8080578:	e00f      	b.n	808059a <_Z14UbidotsHandlerPKcS0_+0xae>
 808057a:	f001 fa75 	bl	8081a68 <spark_cloud_flag_connected>
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
 808057e:	b160      	cbz	r0, 808059a <_Z14UbidotsHandlerPKcS0_+0xae>
 8080580:	4b08      	ldr	r3, [pc, #32]	; (80805a4 <_Z14UbidotsHandlerPKcS0_+0xb8>)
 8080582:	2200      	movs	r2, #0
 8080584:	781b      	ldrb	r3, [r3, #0]
 8080586:	f88d 2000 	strb.w	r2, [sp]
 808058a:	4622      	mov	r2, r4
 808058c:	4638      	mov	r0, r7
 808058e:	490b      	ldr	r1, [pc, #44]	; (80805bc <_Z14UbidotsHandlerPKcS0_+0xd0>)
 8080590:	f7ff fda8 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 8080594:	1d38      	adds	r0, r7, #4
 8080596:	f7ff ff27 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
{                                                                     // Response Template: "{{hourly.0.status_code}}" so, I should only get a 3 digit number back
  char dataCopy[strlen(data)+1];                                      // data needs to be copied since if (Particle.connected()) Particle.publish() will clear it
  strncpy(dataCopy, data, sizeof(dataCopy));                          // Copy - overflow safe
  if (!strlen(dataCopy)) {                                            // First check to see if there is any data
    if (Particle.connected()) Particle.publish("Ubidots Hook", "No Data", PRIVATE);
    return;
 808059a:	46ad      	mov	sp, r5
    lastPublish = millis();
    EEPROM.write(MEM_MAP::currentCountsTimeAddr,Time.now());          // Record the last successful Webhook Response
    dataInFlight = false;                                             // Data has been received
  }
  else if (Particle.connected()) Particle.publish("Ubidots Hook", dataCopy, PRIVATE);                    // Publish the response code
}
 808059c:	370c      	adds	r7, #12
 808059e:	46bd      	mov	sp, r7
 80805a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80805a2:	bf00      	nop
 80805a4:	2000056d 	.word	0x2000056d
 80805a8:	08085399 	.word	0x08085399
 80805ac:	080853c0 	.word	0x080853c0
 80805b0:	080853ae 	.word	0x080853ae
 80805b4:	20000588 	.word	0x20000588
 80805b8:	20000474 	.word	0x20000474
 80805bc:	080853a1 	.word	0x080853a1

080805c0 <_Z12setSolarMode6String>:
  }
  else return 0;
}

int setSolarMode(String command) // Function to force sending data in current hour
{
 80805c0:	b530      	push	{r4, r5, lr}
 80805c2:	4924      	ldr	r1, [pc, #144]	; (8080654 <_Z12setSolarMode6String+0x94>)
 80805c4:	b085      	sub	sp, #20
 80805c6:	4605      	mov	r5, r0
 80805c8:	f002 fbf7 	bl	8082dba <_ZNK6String6equalsEPKc>
  if (command == "1")
 80805cc:	4604      	mov	r4, r0
 80805ce:	b1d0      	cbz	r0, 8080606 <_Z12setSolarMode6String+0x46>
  {
    solarPowerMode = true;
 80805d0:	4b21      	ldr	r3, [pc, #132]	; (8080658 <_Z12setSolarMode6String+0x98>)
 80805d2:	2401      	movs	r4, #1
 80805d4:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80805d6:	f002 ff3f 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 80805da:	2004      	movs	r0, #4
 80805dc:	f7ff fd7e 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
    controlRegister = (0b00000100 | controlRegister);          // Turn on solarPowerMode
 80805e0:	4d1e      	ldr	r5, [pc, #120]	; (808065c <_Z12setSolarMode6String+0x9c>)
 80805e2:	f040 0004 	orr.w	r0, r0, #4
 80805e6:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister);// Write it to the register
 80805e8:	f002 ff36 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 80805ec:	7829      	ldrb	r1, [r5, #0]
 80805ee:	2004      	movs	r0, #4
 80805f0:	f7ff fd76 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
    PMICreset();                                               // Change the power management Settings
 80805f4:	f7ff fe5c 	bl	80802b0 <_Z9PMICresetv>
 80805f8:	4b19      	ldr	r3, [pc, #100]	; (8080660 <_Z12setSolarMode6String+0xa0>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
 80805fa:	2200      	movs	r2, #0
 80805fc:	781b      	ldrb	r3, [r3, #0]
 80805fe:	f88d 2000 	strb.w	r2, [sp]
 8080602:	4a18      	ldr	r2, [pc, #96]	; (8080664 <_Z12setSolarMode6String+0xa4>)
 8080604:	e01c      	b.n	8080640 <_Z12setSolarMode6String+0x80>
 8080606:	4918      	ldr	r1, [pc, #96]	; (8080668 <_Z12setSolarMode6String+0xa8>)
 8080608:	4628      	mov	r0, r5
 808060a:	f002 fbd6 	bl	8082dba <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 808060e:	b1f8      	cbz	r0, 8080650 <_Z12setSolarMode6String+0x90>
  {
    solarPowerMode = false;
 8080610:	4b11      	ldr	r3, [pc, #68]	; (8080658 <_Z12setSolarMode6String+0x98>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
 8080612:	4d12      	ldr	r5, [pc, #72]	; (808065c <_Z12setSolarMode6String+0x9c>)
    Particle.publish("Mode","Set Solar Powered Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    solarPowerMode = false;
 8080614:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 8080616:	f002 ff1f 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 808061a:	2004      	movs	r0, #4
 808061c:	f7ff fd5e 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
    controlRegister = (0b11111011 & controlRegister);           // Turn off solarPowerMode
 8080620:	f020 0004 	bic.w	r0, r0, #4
 8080624:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8080626:	f002 ff17 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 808062a:	7829      	ldrb	r1, [r5, #0]
 808062c:	2004      	movs	r0, #4
 808062e:	f7ff fd57 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
    PMICreset();                                                // Change the power management settings
 8080632:	f7ff fe3d 	bl	80802b0 <_Z9PMICresetv>
 8080636:	4b0a      	ldr	r3, [pc, #40]	; (8080660 <_Z12setSolarMode6String+0xa0>)
    Particle.publish("Mode","Cleared Solar Powered Mode",PRIVATE);
 8080638:	4a0c      	ldr	r2, [pc, #48]	; (808066c <_Z12setSolarMode6String+0xac>)
 808063a:	781b      	ldrb	r3, [r3, #0]
 808063c:	f88d 4000 	strb.w	r4, [sp]
 8080640:	490b      	ldr	r1, [pc, #44]	; (8080670 <_Z12setSolarMode6String+0xb0>)
 8080642:	a802      	add	r0, sp, #8
 8080644:	f7ff fd4e 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 8080648:	a803      	add	r0, sp, #12
 808064a:	f7ff fecd 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 808064e:	2001      	movs	r0, #1
  }
  else return 0;
}
 8080650:	b005      	add	sp, #20
 8080652:	bd30      	pop	{r4, r5, pc}
 8080654:	080856f4 	.word	0x080856f4
 8080658:	20000605 	.word	0x20000605
 808065c:	20000616 	.word	0x20000616
 8080660:	2000056d 	.word	0x2000056d
 8080664:	080853c6 	.word	0x080853c6
 8080668:	080855de 	.word	0x080855de
 808066c:	080853dd 	.word	0x080853dd
 8080670:	080853f3 	.word	0x080853f3

08080674 <_Z14setVerboseMode6String>:

int setVerboseMode(String command) // Function to force sending data in current hour
{
 8080674:	b530      	push	{r4, r5, lr}
 8080676:	4922      	ldr	r1, [pc, #136]	; (8080700 <_Z14setVerboseMode6String+0x8c>)
 8080678:	b085      	sub	sp, #20
 808067a:	4605      	mov	r5, r0
 808067c:	f002 fb9d 	bl	8082dba <_ZNK6String6equalsEPKc>
  if (command == "1")
 8080680:	4604      	mov	r4, r0
 8080682:	b1c0      	cbz	r0, 80806b6 <_Z14setVerboseMode6String+0x42>
  {
    verboseMode = true;
 8080684:	4b1f      	ldr	r3, [pc, #124]	; (8080704 <_Z14setVerboseMode6String+0x90>)
 8080686:	2401      	movs	r4, #1
 8080688:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 808068a:	f002 fee5 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 808068e:	2004      	movs	r0, #4
 8080690:	f7ff fd24 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
    controlRegister = (0b00001000 | controlRegister);                    // Turn on verboseMode
 8080694:	4d1c      	ldr	r5, [pc, #112]	; (8080708 <_Z14setVerboseMode6String+0x94>)
 8080696:	f040 0008 	orr.w	r0, r0, #8
 808069a:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 808069c:	f002 fedc 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 80806a0:	7829      	ldrb	r1, [r5, #0]
 80806a2:	2004      	movs	r0, #4
 80806a4:	f7ff fd1c 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
 80806a8:	4b18      	ldr	r3, [pc, #96]	; (808070c <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
 80806aa:	2200      	movs	r2, #0
 80806ac:	781b      	ldrb	r3, [r3, #0]
 80806ae:	f88d 2000 	strb.w	r2, [sp]
 80806b2:	4a17      	ldr	r2, [pc, #92]	; (8080710 <_Z14setVerboseMode6String+0x9c>)
 80806b4:	e01a      	b.n	80806ec <_Z14setVerboseMode6String+0x78>
 80806b6:	4917      	ldr	r1, [pc, #92]	; (8080714 <_Z14setVerboseMode6String+0xa0>)
 80806b8:	4628      	mov	r0, r5
 80806ba:	f002 fb7e 	bl	8082dba <_ZNK6String6equalsEPKc>
    return 1;
  }
  else if (command == "0")
 80806be:	b1e8      	cbz	r0, 80806fc <_Z14setVerboseMode6String+0x88>
  {
    verboseMode = false;
 80806c0:	4b10      	ldr	r3, [pc, #64]	; (8080704 <_Z14setVerboseMode6String+0x90>)
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 80806c2:	4d11      	ldr	r5, [pc, #68]	; (8080708 <_Z14setVerboseMode6String+0x94>)
    Particle.publish("Mode","Set Verbose Mode",PRIVATE);
    return 1;
  }
  else if (command == "0")
  {
    verboseMode = false;
 80806c4:	701c      	strb	r4, [r3, #0]
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80806c6:	f002 fec7 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 80806ca:	2004      	movs	r0, #4
 80806cc:	f7ff fd06 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
    controlRegister = (0b11110111 & controlRegister);                    // Turn off verboseMode
 80806d0:	f020 0008 	bic.w	r0, r0, #8
 80806d4:	7028      	strb	r0, [r5, #0]
    EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 80806d6:	f002 febf 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 80806da:	7829      	ldrb	r1, [r5, #0]
 80806dc:	2004      	movs	r0, #4
 80806de:	f7ff fcff 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
 80806e2:	4b0a      	ldr	r3, [pc, #40]	; (808070c <_Z14setVerboseMode6String+0x98>)
    Particle.publish("Mode","Cleared Verbose Mode",PRIVATE);
 80806e4:	4a0c      	ldr	r2, [pc, #48]	; (8080718 <_Z14setVerboseMode6String+0xa4>)
 80806e6:	781b      	ldrb	r3, [r3, #0]
 80806e8:	f88d 4000 	strb.w	r4, [sp]
 80806ec:	490b      	ldr	r1, [pc, #44]	; (808071c <_Z14setVerboseMode6String+0xa8>)
 80806ee:	a802      	add	r0, sp, #8
 80806f0:	f7ff fcf8 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 80806f4:	a803      	add	r0, sp, #12
 80806f6:	f7ff fe77 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    return 1;
 80806fa:	2001      	movs	r0, #1
  }
  else return 0;
}
 80806fc:	b005      	add	sp, #20
 80806fe:	bd30      	pop	{r4, r5, pc}
 8080700:	080856f4 	.word	0x080856f4
 8080704:	200005f7 	.word	0x200005f7
 8080708:	20000616 	.word	0x20000616
 808070c:	2000056d 	.word	0x2000056d
 8080710:	080853f8 	.word	0x080853f8
 8080714:	080855de 	.word	0x080855de
 8080718:	08085409 	.word	0x08085409
 808071c:	080853f3 	.word	0x080853f3

08080720 <_Z11setTimeZone6String>:

int setTimeZone(String command)
{
 8080720:	b570      	push	{r4, r5, r6, lr}
 8080722:	b0cc      	sub	sp, #304	; 0x130
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 8080724:	220a      	movs	r2, #10
 8080726:	a905      	add	r1, sp, #20
 8080728:	6800      	ldr	r0, [r0, #0]
 808072a:	f004 f9f9 	bl	8084b20 <strtol>
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 808072e:	b2c5      	uxtb	r5, r0
 8080730:	f105 030c 	add.w	r3, r5, #12
 8080734:	b2db      	uxtb	r3, r3
 8080736:	2b18      	cmp	r3, #24
 8080738:	d83d      	bhi.n	80807b6 <_Z11setTimeZone6String+0x96>

int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
 808073a:	b244      	sxtb	r4, r0
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
 808073c:	4620      	mov	r0, r4
 808073e:	f003 fd49 	bl	80841d4 <__aeabi_i2f>
 8080742:	f002 fbd1 	bl	8082ee8 <_ZN9TimeClass4zoneEf>
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
 8080746:	f002 fe87 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 808074a:	4629      	mov	r1, r5
 808074c:	2003      	movs	r0, #3
 808074e:	f7ff fcc7 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
  t = Time.now();
 8080752:	f002 fc28 	bl	8082fa6 <_ZN9TimeClass3nowEv>
 8080756:	4e19      	ldr	r6, [pc, #100]	; (80807bc <_Z11setTimeZone6String+0x9c>)
 8080758:	4d19      	ldr	r5, [pc, #100]	; (80807c0 <_Z11setTimeZone6String+0xa0>)
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 808075a:	4623      	mov	r3, r4
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
  Time.zone((float)tempTimeZoneOffset);
  EEPROM.write(MEM_MAP::timeZoneAddr,tempTimeZoneOffset);                             // Store the new value in FRAMwrite8
  t = Time.now();
 808075c:	6030      	str	r0, [r6, #0]
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
 808075e:	4a19      	ldr	r2, [pc, #100]	; (80807c4 <_Z11setTimeZone6String+0xa4>)
 8080760:	f44f 7180 	mov.w	r1, #256	; 0x100
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080764:	2400      	movs	r4, #0
 8080766:	a80c      	add	r0, sp, #48	; 0x30
 8080768:	f001 fa2e 	bl	8081bc8 <snprintf>
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 808076c:	782b      	ldrb	r3, [r5, #0]
  Particle.publish("Time",data,PRIVATE);
 808076e:	aa0c      	add	r2, sp, #48	; 0x30
 8080770:	4915      	ldr	r1, [pc, #84]	; (80807c8 <_Z11setTimeZone6String+0xa8>)
 8080772:	a808      	add	r0, sp, #32
 8080774:	f88d 4000 	strb.w	r4, [sp]
 8080778:	f7ff fcb4 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 808077c:	a809      	add	r0, sp, #36	; 0x24
 808077e:	f7ff fe33 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
  delay(1000);
 8080782:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080786:	f001 fa37 	bl	8081bf8 <delay>
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
 808078a:	6831      	ldr	r1, [r6, #0]
 808078c:	a808      	add	r0, sp, #32
 808078e:	f002 fbc7 	bl	8082f20 <_ZN9TimeClass7timeStrEl>
 8080792:	9b08      	ldr	r3, [sp, #32]
 8080794:	490c      	ldr	r1, [pc, #48]	; (80807c8 <_Z11setTimeZone6String+0xa8>)
 8080796:	9303      	str	r3, [sp, #12]
 8080798:	9a03      	ldr	r2, [sp, #12]
 808079a:	782b      	ldrb	r3, [r5, #0]
 808079c:	a806      	add	r0, sp, #24
 808079e:	f88d 4000 	strb.w	r4, [sp]
 80807a2:	f7ff fc9f 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 80807a6:	a807      	add	r0, sp, #28
 80807a8:	f7ff fe1e 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80807ac:	a808      	add	r0, sp, #32
 80807ae:	f002 fa90 	bl	8082cd2 <_ZN6StringD1Ev>
  return 1;
 80807b2:	2001      	movs	r0, #1
 80807b4:	e000      	b.n	80807b8 <_Z11setTimeZone6String+0x98>
int setTimeZone(String command)
{
  char * pEND;
  char data[256];
  int8_t tempTimeZoneOffset = strtol(command,&pEND,10);                       // Looks for the first integer and interprets it
  if ((tempTimeZoneOffset < -12) | (tempTimeZoneOffset > 12)) return 0;   // Make sure it falls in a valid range or send a "fail" result
 80807b6:	2000      	movs	r0, #0
  snprintf(data, sizeof(data), "Time zone offset %i",tempTimeZoneOffset);
  Particle.publish("Time",data,PRIVATE);
  delay(1000);
  Particle.publish("Time",Time.timeStr(t),PRIVATE);
  return 1;
}
 80807b8:	b04c      	add	sp, #304	; 0x130
 80807ba:	bd70      	pop	{r4, r5, r6, pc}
 80807bc:	20000574 	.word	0x20000574
 80807c0:	2000056d 	.word	0x2000056d
 80807c4:	0808541e 	.word	0x0808541e
 80807c8:	08085432 	.word	0x08085432

080807cc <_Z15setLowPowerMode6String>:


int setLowPowerMode(String command)                                   // This is where we can put the device into low power mode if needed
{
 80807cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	unsigned char operator != (const String &rhs) const {return !equals(rhs);}
	unsigned char operator != (const char *cstr) const {return !equals(cstr);}
 80807ce:	4926      	ldr	r1, [pc, #152]	; (8080868 <_Z15setLowPowerMode6String+0x9c>)
 80807d0:	4605      	mov	r5, r0
 80807d2:	f002 faf2 	bl	8082dba <_ZNK6String6equalsEPKc>
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
 80807d6:	b928      	cbnz	r0, 80807e4 <_Z15setLowPowerMode6String+0x18>
 80807d8:	4924      	ldr	r1, [pc, #144]	; (808086c <_Z15setLowPowerMode6String+0xa0>)
 80807da:	4628      	mov	r0, r5
 80807dc:	f002 faed 	bl	8082dba <_ZNK6String6equalsEPKc>
 80807e0:	2800      	cmp	r0, #0
 80807e2:	d03f      	beq.n	8080864 <_Z15setLowPowerMode6String+0x98>
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
 80807e4:	f002 fe38 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 80807e8:	2004      	movs	r0, #4
 80807ea:	f7ff fc77 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
 80807ee:	4c20      	ldr	r4, [pc, #128]	; (8080870 <_Z15setLowPowerMode6String+0xa4>)
	operator StringIfHelperType() const { return buffer ? &String::StringIfHelper : 0; }
	int compareTo(const String &s) const;
	unsigned char equals(const String &s) const;
	unsigned char equals(const char *cstr) const;
	unsigned char operator == (const String &rhs) const {return equals(rhs);}
	unsigned char operator == (const char *cstr) const {return equals(cstr);}
 80807f0:	491d      	ldr	r1, [pc, #116]	; (8080868 <_Z15setLowPowerMode6String+0x9c>)
 80807f2:	7020      	strb	r0, [r4, #0]
 80807f4:	4628      	mov	r0, r5
 80807f6:	f002 fae0 	bl	8082dba <_ZNK6String6equalsEPKc>
  if (command == "1")                                                 // Command calls for setting lowPowerMode
 80807fa:	4606      	mov	r6, r0
 80807fc:	b1a0      	cbz	r0, 8080828 <_Z15setLowPowerMode6String+0x5c>
 80807fe:	4b1d      	ldr	r3, [pc, #116]	; (8080874 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Low Power",PRIVATE);
 8080800:	2200      	movs	r2, #0
 8080802:	781b      	ldrb	r3, [r3, #0]
 8080804:	491c      	ldr	r1, [pc, #112]	; (8080878 <_Z15setLowPowerMode6String+0xac>)
 8080806:	f88d 2000 	strb.w	r2, [sp]
 808080a:	a802      	add	r0, sp, #8
 808080c:	4a1b      	ldr	r2, [pc, #108]	; (808087c <_Z15setLowPowerMode6String+0xb0>)
 808080e:	f7ff fc69 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 8080812:	a803      	add	r0, sp, #12
 8080814:	f7ff fde8 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 8080818:	7823      	ldrb	r3, [r4, #0]
    lowPowerMode = true;
 808081a:	2201      	movs	r2, #1
  if (command != "1" && command != "0") return 0;                     // Before we begin, let's make sure we have a valid input
    controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);
  if (command == "1")                                                 // Command calls for setting lowPowerMode
  {
    Particle.publish("Mode","Low Power",PRIVATE);
    controlRegister = (0b00000001 | controlRegister);                  // If so, flip the lowPowerMode bit
 808081c:	f043 0301 	orr.w	r3, r3, #1
 8080820:	7023      	strb	r3, [r4, #0]
    lowPowerMode = true;
 8080822:	4b17      	ldr	r3, [pc, #92]	; (8080880 <_Z15setLowPowerMode6String+0xb4>)
 8080824:	701a      	strb	r2, [r3, #0]
 8080826:	e016      	b.n	8080856 <_Z15setLowPowerMode6String+0x8a>
 8080828:	4910      	ldr	r1, [pc, #64]	; (808086c <_Z15setLowPowerMode6String+0xa0>)
 808082a:	4628      	mov	r0, r5
 808082c:	f002 fac5 	bl	8082dba <_ZNK6String6equalsEPKc>
  }
  else if (command == "0")                                            // Command calls for clearing lowPowerMode
 8080830:	b188      	cbz	r0, 8080856 <_Z15setLowPowerMode6String+0x8a>
 8080832:	4b10      	ldr	r3, [pc, #64]	; (8080874 <_Z15setLowPowerMode6String+0xa8>)
  {
    Particle.publish("Mode","Normal Operations",PRIVATE);
 8080834:	4a13      	ldr	r2, [pc, #76]	; (8080884 <_Z15setLowPowerMode6String+0xb8>)
 8080836:	781b      	ldrb	r3, [r3, #0]
 8080838:	490f      	ldr	r1, [pc, #60]	; (8080878 <_Z15setLowPowerMode6String+0xac>)
 808083a:	a802      	add	r0, sp, #8
 808083c:	f88d 6000 	strb.w	r6, [sp]
 8080840:	f7ff fc50 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 8080844:	a803      	add	r0, sp, #12
 8080846:	f7ff fdcf 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    controlRegister = (0b1111110 & controlRegister);                  // If so, flip the lowPowerMode bit
 808084a:	7823      	ldrb	r3, [r4, #0]
 808084c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8080850:	7023      	strb	r3, [r4, #0]
    lowPowerMode = false;
 8080852:	4b0b      	ldr	r3, [pc, #44]	; (8080880 <_Z15setLowPowerMode6String+0xb4>)
 8080854:	701e      	strb	r6, [r3, #0]
  }
  EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
 8080856:	f002 fdff 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 808085a:	2004      	movs	r0, #4
 808085c:	7821      	ldrb	r1, [r4, #0]
 808085e:	f7ff fc3f 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
 8080862:	2001      	movs	r0, #1
  return 1;
}
 8080864:	b004      	add	sp, #16
 8080866:	bd70      	pop	{r4, r5, r6, pc}
 8080868:	080856f4 	.word	0x080856f4
 808086c:	080855de 	.word	0x080855de
 8080870:	20000616 	.word	0x20000616
 8080874:	2000056d 	.word	0x2000056d
 8080878:	080853f3 	.word	0x080853f3
 808087c:	08085437 	.word	0x08085437
 8080880:	200005f6 	.word	0x200005f6
 8080884:	08085441 	.word	0x08085441

08080888 <_Z22publishStateTransitionv>:

void publishStateTransition(void)
{
 8080888:	b530      	push	{r4, r5, lr}
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 808088a:	4d18      	ldr	r5, [pc, #96]	; (80808ec <_Z22publishStateTransitionv+0x64>)
 808088c:	4918      	ldr	r1, [pc, #96]	; (80808f0 <_Z22publishStateTransitionv+0x68>)
 808088e:	782a      	ldrb	r2, [r5, #0]
 8080890:	230e      	movs	r3, #14
 8080892:	fb03 1202 	mla	r2, r3, r2, r1
 8080896:	4c17      	ldr	r4, [pc, #92]	; (80808f4 <_Z22publishStateTransitionv+0x6c>)
  EEPROM.write(MEM_MAP::controlRegisterAddr,controlRegister); // Write it to the register
  return 1;
}

void publishStateTransition(void)
{
 8080898:	b08f      	sub	sp, #60	; 0x3c
  char stateTransitionString[40];
  snprintf(stateTransitionString, sizeof(stateTransitionString), "From %s to %s", stateNames[oldState],stateNames[state]);
 808089a:	7820      	ldrb	r0, [r4, #0]
 808089c:	9200      	str	r2, [sp, #0]
 808089e:	fb03 1300 	mla	r3, r3, r0, r1
 80808a2:	4a15      	ldr	r2, [pc, #84]	; (80808f8 <_Z22publishStateTransitionv+0x70>)
 80808a4:	2128      	movs	r1, #40	; 0x28
 80808a6:	a804      	add	r0, sp, #16
 80808a8:	f001 f98e 	bl	8081bc8 <snprintf>
  oldState = state;
 80808ac:	782b      	ldrb	r3, [r5, #0]
 80808ae:	7023      	strb	r3, [r4, #0]
 80808b0:	f001 f8da 	bl	8081a68 <spark_cloud_flag_connected>
  if(Particle.connected()) {
 80808b4:	b190      	cbz	r0, 80808dc <_Z22publishStateTransitionv+0x54>
    waitUntil(meterParticlePublish);
 80808b6:	f7ff fd4f 	bl	8080358 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.31>
 80808ba:	4b10      	ldr	r3, [pc, #64]	; (80808fc <_Z22publishStateTransitionv+0x74>)
    Particle.publish("State Transition",stateTransitionString, PRIVATE);
 80808bc:	2200      	movs	r2, #0
 80808be:	781b      	ldrb	r3, [r3, #0]
 80808c0:	490f      	ldr	r1, [pc, #60]	; (8080900 <_Z22publishStateTransitionv+0x78>)
 80808c2:	f88d 2000 	strb.w	r2, [sp]
 80808c6:	a802      	add	r0, sp, #8
 80808c8:	aa04      	add	r2, sp, #16
 80808ca:	f7ff fc0b 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 80808ce:	a803      	add	r0, sp, #12
 80808d0:	f7ff fd8a 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80808d4:	f000 fedc 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>
    lastPublish = millis();
 80808d8:	4b0a      	ldr	r3, [pc, #40]	; (8080904 <_Z22publishStateTransitionv+0x7c>)
 80808da:	6018      	str	r0, [r3, #0]
  }
  Serial.println(stateTransitionString);
 80808dc:	f002 fc50 	bl	8083180 <_Z16_fetch_usbserialv>
 80808e0:	a904      	add	r1, sp, #16
 80808e2:	f002 f968 	bl	8082bb6 <_ZN5Print7printlnEPKc>
}
 80808e6:	b00f      	add	sp, #60	; 0x3c
 80808e8:	bd30      	pop	{r4, r5, pc}
 80808ea:	bf00      	nop
 80808ec:	20000582 	.word	0x20000582
 80808f0:	20000404 	.word	0x20000404
 80808f4:	20000581 	.word	0x20000581
 80808f8:	08085453 	.word	0x08085453
 80808fc:	2000056d 	.word	0x2000056d
 8080900:	08085461 	.word	0x08085461
 8080904:	20000588 	.word	0x20000588

08080908 <loop>:
  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  lastPublish = millis();
}

void loop()
{
 8080908:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

  switch(state) {
 808090a:	4c97      	ldr	r4, [pc, #604]	; (8080b68 <loop+0x260>)
 808090c:	7823      	ldrb	r3, [r4, #0]
 808090e:	3b01      	subs	r3, #1
 8080910:	2b06      	cmp	r3, #6
 8080912:	f200 81d5 	bhi.w	8080cc0 <loop+0x3b8>
 8080916:	e8df f013 	tbh	[pc, r3, lsl #1]
 808091a:	015b      	.short	0x015b
 808091c:	00330007 	.word	0x00330007
 8080920:	0074005c 	.word	0x0074005c
 8080924:	00eb00a7 	.word	0x00eb00a7
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 8080928:	4b90      	ldr	r3, [pc, #576]	; (8080b6c <loop+0x264>)
 808092a:	781b      	ldrb	r3, [r3, #0]
 808092c:	b12b      	cbz	r3, 808093a <loop+0x32>
 808092e:	4b90      	ldr	r3, [pc, #576]	; (8080b70 <loop+0x268>)
 8080930:	781b      	ldrb	r3, [r3, #0]
 8080932:	2b02      	cmp	r3, #2
 8080934:	d001      	beq.n	808093a <loop+0x32>
 8080936:	f7ff ffa7 	bl	8080888 <_Z22publishStateTransitionv>
    if (watchDogFlag) petWatchdog();
 808093a:	4b8e      	ldr	r3, [pc, #568]	; (8080b74 <loop+0x26c>)
 808093c:	781b      	ldrb	r3, [r3, #0]
 808093e:	b10b      	cbz	r3, 8080944 <loop+0x3c>
 8080940:	f7ff fd42 	bl	80803c8 <_Z11petWatchdogv>
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;
 8080944:	4b8c      	ldr	r3, [pc, #560]	; (8080b78 <loop+0x270>)
 8080946:	781b      	ldrb	r3, [r3, #0]
 8080948:	b14b      	cbz	r3, 808095e <loop+0x56>
 808094a:	f000 fea1 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>
 808094e:	4b8b      	ldr	r3, [pc, #556]	; (8080b7c <loop+0x274>)
 8080950:	681b      	ldr	r3, [r3, #0]
 8080952:	1ac0      	subs	r0, r0, r3
 8080954:	4b8a      	ldr	r3, [pc, #552]	; (8080b80 <loop+0x278>)
 8080956:	681b      	ldr	r3, [r3, #0]
 8080958:	4298      	cmp	r0, r3
 808095a:	f200 81ae 	bhi.w	8080cba <loop+0x3b2>
    if (Time.hour() != currentHourlyPeriod) state = MEASURING_STATE;     // We want to report on the hour but not after bedtime
 808095e:	f002 fb29 	bl	8082fb4 <_ZN9TimeClass4hourEv>
 8080962:	4b88      	ldr	r3, [pc, #544]	; (8080b84 <loop+0x27c>)
 8080964:	781b      	ldrb	r3, [r3, #0]
 8080966:	4298      	cmp	r0, r3
 8080968:	bf1c      	itt	ne
 808096a:	2303      	movne	r3, #3
 808096c:	7023      	strbne	r3, [r4, #0]
    if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;        // The battery is low - sleep
 808096e:	4b86      	ldr	r3, [pc, #536]	; (8080b88 <loop+0x280>)
 8080970:	681a      	ldr	r2, [r3, #0]
 8080972:	4b86      	ldr	r3, [pc, #536]	; (8080b8c <loop+0x284>)
 8080974:	681b      	ldr	r3, [r3, #0]
 8080976:	429a      	cmp	r2, r3
 8080978:	f300 81a2 	bgt.w	8080cc0 <loop+0x3b8>
 808097c:	2307      	movs	r3, #7
 808097e:	e026      	b.n	80809ce <loop+0xc6>
    break;

  case MEASURING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 8080980:	4b7a      	ldr	r3, [pc, #488]	; (8080b6c <loop+0x264>)
 8080982:	781a      	ldrb	r2, [r3, #0]
 8080984:	461d      	mov	r5, r3
 8080986:	b12a      	cbz	r2, 8080994 <loop+0x8c>
 8080988:	4b79      	ldr	r3, [pc, #484]	; (8080b70 <loop+0x268>)
 808098a:	781b      	ldrb	r3, [r3, #0]
 808098c:	2b03      	cmp	r3, #3
 808098e:	d001      	beq.n	8080994 <loop+0x8c>
 8080990:	f7ff ff7a 	bl	8080888 <_Z22publishStateTransitionv>
    if (!takeMeasurements())
 8080994:	f7ff fbe0 	bl	8080158 <_Z16takeMeasurementsv>
 8080998:	4606      	mov	r6, r0
 808099a:	b9b8      	cbnz	r0, 80809cc <loop+0xc4>
    {
      state = ERROR_STATE;
 808099c:	2301      	movs	r3, #1
 808099e:	7023      	strb	r3, [r4, #0]
      if (verboseMode) {
 80809a0:	782b      	ldrb	r3, [r5, #0]
 80809a2:	2b00      	cmp	r3, #0
 80809a4:	f000 818c 	beq.w	8080cc0 <loop+0x3b8>
        waitUntil(meterParticlePublish);
 80809a8:	f7ff fcd6 	bl	8080358 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.31>
 80809ac:	4b78      	ldr	r3, [pc, #480]	; (8080b90 <loop+0x288>)
        Particle.publish("State","Error taking Measurements",PRIVATE);
 80809ae:	4a79      	ldr	r2, [pc, #484]	; (8080b94 <loop+0x28c>)
 80809b0:	781b      	ldrb	r3, [r3, #0]
 80809b2:	4979      	ldr	r1, [pc, #484]	; (8080b98 <loop+0x290>)
 80809b4:	a802      	add	r0, sp, #8
 80809b6:	f88d 6000 	strb.w	r6, [sp]
 80809ba:	f7ff fb93 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 80809be:	a803      	add	r0, sp, #12
 80809c0:	f7ff fd12 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 80809c4:	f000 fe64 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 80809c8:	4b74      	ldr	r3, [pc, #464]	; (8080b9c <loop+0x294>)
 80809ca:	e02e      	b.n	8080a2a <loop+0x122>
      }
    }
    else state = REPORTING_STATE;
 80809cc:	2304      	movs	r3, #4
 80809ce:	7023      	strb	r3, [r4, #0]
 80809d0:	e176      	b.n	8080cc0 <loop+0x3b8>
    break;

  case REPORTING_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 80809d2:	4b66      	ldr	r3, [pc, #408]	; (8080b6c <loop+0x264>)
 80809d4:	781b      	ldrb	r3, [r3, #0]
 80809d6:	b12b      	cbz	r3, 80809e4 <loop+0xdc>
 80809d8:	4b65      	ldr	r3, [pc, #404]	; (8080b70 <loop+0x268>)
 80809da:	781b      	ldrb	r3, [r3, #0]
 80809dc:	2b04      	cmp	r3, #4
 80809de:	d001      	beq.n	80809e4 <loop+0xdc>
 80809e0:	f7ff ff52 	bl	8080888 <_Z22publishStateTransitionv>
 80809e4:	f001 f840 	bl	8081a68 <spark_cloud_flag_connected>
    if (Particle.connected()) {
 80809e8:	2800      	cmp	r0, #0
 80809ea:	d03b      	beq.n	8080a64 <loop+0x15c>
      if (Time.hour() == 12) Particle.syncTime();                         // Set the clock each day at noon
 80809ec:	f002 fae2 	bl	8082fb4 <_ZN9TimeClass4hourEv>
 80809f0:	280c      	cmp	r0, #12
 80809f2:	d102      	bne.n	80809fa <loop+0xf2>
        CLOUD_FN(spark_unsubscribe(NULL), (void)0);
    }

    bool syncTime(void)
    {
        return CLOUD_FN(spark_sync_time(NULL), false);
 80809f4:	2000      	movs	r0, #0
 80809f6:	f001 f857 	bl	8081aa8 <spark_sync_time>
      sendEvent();                                                        // Send data to Ubidots
 80809fa:	f7ff fd0b 	bl	8080414 <_Z9sendEventv>
      state = RESP_WAIT_STATE;                                            // Wait for Response
 80809fe:	2305      	movs	r3, #5
 8080a00:	e7e5      	b.n	80809ce <loop+0xc6>
    }
    else state = ERROR_STATE;
    break;

  case RESP_WAIT_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
 8080a02:	4b5a      	ldr	r3, [pc, #360]	; (8080b6c <loop+0x264>)
 8080a04:	781b      	ldrb	r3, [r3, #0]
 8080a06:	b12b      	cbz	r3, 8080a14 <loop+0x10c>
 8080a08:	4b59      	ldr	r3, [pc, #356]	; (8080b70 <loop+0x268>)
 8080a0a:	781b      	ldrb	r3, [r3, #0]
 8080a0c:	2b05      	cmp	r3, #5
 8080a0e:	d001      	beq.n	8080a14 <loop+0x10c>
 8080a10:	f7ff ff3a 	bl	8080888 <_Z22publishStateTransitionv>
    if (!dataInFlight)                                                // Response received back to IDLE state
 8080a14:	4b62      	ldr	r3, [pc, #392]	; (8080ba0 <loop+0x298>)
 8080a16:	781b      	ldrb	r3, [r3, #0]
 8080a18:	b94b      	cbnz	r3, 8080a2e <loop+0x126>
    {
      state = IDLE_STATE;
 8080a1a:	2302      	movs	r3, #2
 8080a1c:	7023      	strb	r3, [r4, #0]
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
 8080a1e:	4a61      	ldr	r2, [pc, #388]	; (8080ba4 <loop+0x29c>)
 8080a20:	4b57      	ldr	r3, [pc, #348]	; (8080b80 <loop+0x278>)
 8080a22:	601a      	str	r2, [r3, #0]
 8080a24:	f000 fe34 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>
      stayAwakeTimeStamp = millis();
 8080a28:	4b54      	ldr	r3, [pc, #336]	; (8080b7c <loop+0x274>)
 8080a2a:	6018      	str	r0, [r3, #0]
 8080a2c:	e148      	b.n	8080cc0 <loop+0x3b8>
 8080a2e:	f000 fe2f 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
 8080a32:	4b5d      	ldr	r3, [pc, #372]	; (8080ba8 <loop+0x2a0>)
 8080a34:	681b      	ldr	r3, [r3, #0]
 8080a36:	1ac0      	subs	r0, r0, r3
 8080a38:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 8080a3c:	4298      	cmp	r0, r3
 8080a3e:	f240 813f 	bls.w	8080cc0 <loop+0x3b8>
 8080a42:	f000 fe25 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>
      resetTimeStamp = millis();
 8080a46:	4b59      	ldr	r3, [pc, #356]	; (8080bac <loop+0x2a4>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 8080a48:	2200      	movs	r2, #0
      state = IDLE_STATE;
      stayAwake = stayAwakeLong;                                      // Keeps Electron awake after reboot - helps with recovery
      stayAwakeTimeStamp = millis();
    }
    else if (millis() - webhookTimeStamp > webhookWait) {             // If it takes too long - will need to reset
      resetTimeStamp = millis();
 8080a4a:	6018      	str	r0, [r3, #0]
 8080a4c:	4b50      	ldr	r3, [pc, #320]	; (8080b90 <loop+0x288>)
      Particle.publish("spark/device/session/end", "", PRIVATE);      // If the device times out on the Webhook response, it will ensure a new session is started on next connect
 8080a4e:	a802      	add	r0, sp, #8
 8080a50:	781b      	ldrb	r3, [r3, #0]
 8080a52:	4957      	ldr	r1, [pc, #348]	; (8080bb0 <loop+0x2a8>)
 8080a54:	f88d 2000 	strb.w	r2, [sp]
 8080a58:	4a56      	ldr	r2, [pc, #344]	; (8080bb4 <loop+0x2ac>)
 8080a5a:	f7ff fb43 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 8080a5e:	a803      	add	r0, sp, #12
 8080a60:	f7ff fcc2 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      state = ERROR_STATE;                                            // Response timed out
 8080a64:	2301      	movs	r3, #1
 8080a66:	e7b2      	b.n	80809ce <loop+0xc6>
    }
    break;

  case SLEEPING_STATE: {                                                // This state is triggered once the park closes and runs until it opens
    if (verboseMode && state != oldState) publishStateTransition();
 8080a68:	4b40      	ldr	r3, [pc, #256]	; (8080b6c <loop+0x264>)
 8080a6a:	781a      	ldrb	r2, [r3, #0]
 8080a6c:	461c      	mov	r4, r3
 8080a6e:	b12a      	cbz	r2, 8080a7c <loop+0x174>
 8080a70:	4b3f      	ldr	r3, [pc, #252]	; (8080b70 <loop+0x268>)
 8080a72:	781b      	ldrb	r3, [r3, #0]
 8080a74:	2b06      	cmp	r3, #6
 8080a76:	d001      	beq.n	8080a7c <loop+0x174>
 8080a78:	f7ff ff06 	bl	8080888 <_Z22publishStateTransitionv>
    if (!readyForBed)                                                   // Only do these things once - at bedtime
 8080a7c:	4b4e      	ldr	r3, [pc, #312]	; (8080bb8 <loop+0x2b0>)
 8080a7e:	781d      	ldrb	r5, [r3, #0]
 8080a80:	461e      	mov	r6, r3
 8080a82:	bb5d      	cbnz	r5, 8080adc <loop+0x1d4>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080a84:	f000 fff0 	bl	8081a68 <spark_cloud_flag_connected>
    {
      if (Particle.connected()) {
 8080a88:	b1c8      	cbz	r0, 8080abe <loop+0x1b6>
        if (verboseMode) {
 8080a8a:	7823      	ldrb	r3, [r4, #0]
 8080a8c:	b18b      	cbz	r3, 8080ab2 <loop+0x1aa>
          waitUntil(meterParticlePublish);
 8080a8e:	f7ff fc63 	bl	8080358 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.31>
 8080a92:	4b3f      	ldr	r3, [pc, #252]	; (8080b90 <loop+0x288>)
          Particle.publish("State","Going to Sleep",PRIVATE);
 8080a94:	4a49      	ldr	r2, [pc, #292]	; (8080bbc <loop+0x2b4>)
 8080a96:	781b      	ldrb	r3, [r3, #0]
 8080a98:	493f      	ldr	r1, [pc, #252]	; (8080b98 <loop+0x290>)
 8080a9a:	a802      	add	r0, sp, #8
 8080a9c:	f88d 5000 	strb.w	r5, [sp]
 8080aa0:	f7ff fb20 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 8080aa4:	a803      	add	r0, sp, #12
 8080aa6:	f7ff fc9f 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080aaa:	f000 fdf1 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>
          lastPublish = millis();
 8080aae:	4b3b      	ldr	r3, [pc, #236]	; (8080b9c <loop+0x294>)
 8080ab0:	6018      	str	r0, [r3, #0]
        }
        delay(1000);                                                    // Time to send last update
 8080ab2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080ab6:	f001 f89f 	bl	8081bf8 <delay>
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 8080aba:	f7ff fbcd 	bl	8080258 <_Z22disconnectFromParticlev>
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
 8080abe:	f002 fccb 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 8080ac2:	4b3f      	ldr	r3, [pc, #252]	; (8080bc0 <loop+0x2b8>)
 8080ac4:	2002      	movs	r0, #2
 8080ac6:	7819      	ldrb	r1, [r3, #0]
 8080ac8:	f7ff fb0a 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
      ledState = false;
 8080acc:	4b3d      	ldr	r3, [pc, #244]	; (8080bc4 <loop+0x2bc>)
 8080ace:	2100      	movs	r1, #0
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080ad0:	2007      	movs	r0, #7
        }
        delay(1000);                                                    // Time to send last update
        disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
      }
      EEPROM.write(MEM_MAP::resetCountAddr,resetCount);
      ledState = false;
 8080ad2:	7019      	strb	r1, [r3, #0]
      digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080ad4:	f002 fc93 	bl	80833fe <digitalWrite>
      readyForBed = true;                                               // Set the flag for the night
 8080ad8:	2301      	movs	r3, #1
 8080ada:	7033      	strb	r3, [r6, #0]
    }
    int secondsToHour = (60*(60 - Time.minute()));                      // Time till the top of the hour
 8080adc:	f002 fa74 	bl	8082fc8 <_ZN9TimeClass6minuteEv>
    System.sleep(SLEEP_MODE_SOFTPOWEROFF,secondsToHour);                // Very deep sleep till the next hour - then resets
 8080ae0:	4b39      	ldr	r3, [pc, #228]	; (8080bc8 <loop+0x2c0>)
 8080ae2:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8080ae6:	223c      	movs	r2, #60	; 0x3c
 8080ae8:	681b      	ldr	r3, [r3, #0]
 8080aea:	4342      	muls	r2, r0
 8080aec:	2102      	movs	r1, #2
 8080aee:	e036      	b.n	8080b5e <loop+0x256>
    } break;


  case LOW_BATTERY_STATE: {                                             // Sleep state but leaves the fuel gauge on
    if (verboseMode && state != oldState) publishStateTransition();
 8080af0:	4b1e      	ldr	r3, [pc, #120]	; (8080b6c <loop+0x264>)
 8080af2:	781a      	ldrb	r2, [r3, #0]
 8080af4:	461c      	mov	r4, r3
 8080af6:	b12a      	cbz	r2, 8080b04 <loop+0x1fc>
 8080af8:	4b1d      	ldr	r3, [pc, #116]	; (8080b70 <loop+0x268>)
 8080afa:	781b      	ldrb	r3, [r3, #0]
 8080afc:	2b07      	cmp	r3, #7
 8080afe:	d001      	beq.n	8080b04 <loop+0x1fc>
 8080b00:	f7ff fec2 	bl	8080888 <_Z22publishStateTransitionv>
 8080b04:	f000 ffb0 	bl	8081a68 <spark_cloud_flag_connected>
    if (Particle.connected()) {
 8080b08:	b1d0      	cbz	r0, 8080b40 <loop+0x238>
      if (verboseMode) {
 8080b0a:	7823      	ldrb	r3, [r4, #0]
 8080b0c:	b193      	cbz	r3, 8080b34 <loop+0x22c>
        waitUntil(meterParticlePublish);
 8080b0e:	f7ff fc23 	bl	8080358 <_ZN11SystemClass13waitConditionIZ22publishStateTransitionvEUlvE_EEbT_.isra.31>
 8080b12:	4b1f      	ldr	r3, [pc, #124]	; (8080b90 <loop+0x288>)
}

// particle::Flags<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags() :
        val_(0) {
 8080b14:	2200      	movs	r2, #0
}

template<typename TagT, typename ValueT>
inline particle::Flags<TagT, ValueT>::Flags(Flag<TagT, ValueT> flag) :
        val_(flag.value()) {
 8080b16:	781b      	ldrb	r3, [r3, #0]
        Particle.publish("State","Low Battery - Sleeping",PRIVATE);
 8080b18:	491f      	ldr	r1, [pc, #124]	; (8080b98 <loop+0x290>)
 8080b1a:	f88d 2000 	strb.w	r2, [sp]
 8080b1e:	a802      	add	r0, sp, #8
 8080b20:	4a2a      	ldr	r2, [pc, #168]	; (8080bcc <loop+0x2c4>)
 8080b22:	f7ff fadf 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 8080b26:	a803      	add	r0, sp, #12
 8080b28:	f7ff fc5e 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080b2c:	f000 fdb0 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>
        lastPublish = millis();
 8080b30:	4b1a      	ldr	r3, [pc, #104]	; (8080b9c <loop+0x294>)
 8080b32:	6018      	str	r0, [r3, #0]
      }
      delay(1000);                                                    // Time to send last update
 8080b34:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8080b38:	f001 f85e 	bl	8081bf8 <delay>
      disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
 8080b3c:	f7ff fb8c 	bl	8080258 <_Z22disconnectFromParticlev>
    }
    ledState = false;
 8080b40:	4b20      	ldr	r3, [pc, #128]	; (8080bc4 <loop+0x2bc>)
 8080b42:	2100      	movs	r1, #0
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080b44:	2007      	movs	r0, #7
        lastPublish = millis();
      }
      delay(1000);                                                    // Time to send last update
      disconnectFromParticle();                                       // If connected, we need to disconned and power down the modem
    }
    ledState = false;
 8080b46:	7019      	strb	r1, [r3, #0]
    digitalWrite(blueLED,LOW);                                        // Turn off the LED
 8080b48:	f002 fc59 	bl	80833fe <digitalWrite>
    int secondsToHour = (60*(60 - Time.minute()));                    // Time till the top of the hour
 8080b4c:	f002 fa3c 	bl	8082fc8 <_ZN9TimeClass6minuteEv>
    System.sleep(SLEEP_MODE_DEEP,secondsToHour);                      // Very deep sleep till the next hour - then resets
 8080b50:	223c      	movs	r2, #60	; 0x3c
 8080b52:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
 8080b56:	4b1c      	ldr	r3, [pc, #112]	; (8080bc8 <loop+0x2c0>)
 8080b58:	4342      	muls	r2, r0
 8080b5a:	681b      	ldr	r3, [r3, #0]
 8080b5c:	2101      	movs	r1, #1
 8080b5e:	a802      	add	r0, sp, #8
 8080b60:	f002 f95e 	bl	8082e20 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>
    } break;
 8080b64:	e0ac      	b.n	8080cc0 <loop+0x3b8>
 8080b66:	bf00      	nop
 8080b68:	20000582 	.word	0x20000582
 8080b6c:	200005f7 	.word	0x200005f7
 8080b70:	20000581 	.word	0x20000581
 8080b74:	20000604 	.word	0x20000604
 8080b78:	200005f6 	.word	0x200005f6
 8080b7c:	200005f8 	.word	0x200005f8
 8080b80:	200005e8 	.word	0x200005e8
 8080b84:	200005e0 	.word	0x200005e0
 8080b88:	20000594 	.word	0x20000594
 8080b8c:	20000564 	.word	0x20000564
 8080b90:	2000056d 	.word	0x2000056d
 8080b94:	08085472 	.word	0x08085472
 8080b98:	080853c0 	.word	0x080853c0
 8080b9c:	20000588 	.word	0x20000588
 8080ba0:	20000474 	.word	0x20000474
 8080ba4:	00015f90 	.word	0x00015f90
 8080ba8:	20000568 	.word	0x20000568
 8080bac:	20000600 	.word	0x20000600
 8080bb0:	0808548c 	.word	0x0808548c
 8080bb4:	080852f3 	.word	0x080852f3
 8080bb8:	2000056c 	.word	0x2000056c
 8080bbc:	080854a5 	.word	0x080854a5
 8080bc0:	200005dc 	.word	0x200005dc
 8080bc4:	20000580 	.word	0x20000580
 8080bc8:	200005ec 	.word	0x200005ec
 8080bcc:	080854b4 	.word	0x080854b4

  case ERROR_STATE:                                                   // To be enhanced - where we deal with errors
    if (verboseMode && state != oldState) publishStateTransition();
 8080bd0:	4b3c      	ldr	r3, [pc, #240]	; (8080cc4 <loop+0x3bc>)
 8080bd2:	781b      	ldrb	r3, [r3, #0]
 8080bd4:	b12b      	cbz	r3, 8080be2 <loop+0x2da>
 8080bd6:	4b3c      	ldr	r3, [pc, #240]	; (8080cc8 <loop+0x3c0>)
 8080bd8:	781b      	ldrb	r3, [r3, #0]
 8080bda:	2b01      	cmp	r3, #1
 8080bdc:	d001      	beq.n	8080be2 <loop+0x2da>
 8080bde:	f7ff fe53 	bl	8080888 <_Z22publishStateTransitionv>
 8080be2:	f000 fd55 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>
    if (millis() > resetTimeStamp + resetWait)
 8080be6:	4b39      	ldr	r3, [pc, #228]	; (8080ccc <loop+0x3c4>)
 8080be8:	681b      	ldr	r3, [r3, #0]
 8080bea:	f503 43ea 	add.w	r3, r3, #29952	; 0x7500
 8080bee:	3330      	adds	r3, #48	; 0x30
 8080bf0:	4298      	cmp	r0, r3
 8080bf2:	d965      	bls.n	8080cc0 <loop+0x3b8>
    {
      if (resetCount <= 3) {                                          // First try simple reset
 8080bf4:	4b36      	ldr	r3, [pc, #216]	; (8080cd0 <loop+0x3c8>)
 8080bf6:	681b      	ldr	r3, [r3, #0]
 8080bf8:	2b03      	cmp	r3, #3
 8080bfa:	dc16      	bgt.n	8080c2a <loop+0x322>
 8080bfc:	f000 ff34 	bl	8081a68 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Reset", PRIVATE);    // Brodcast Reset Action
 8080c00:	b160      	cbz	r0, 8080c1c <loop+0x314>
 8080c02:	4b34      	ldr	r3, [pc, #208]	; (8080cd4 <loop+0x3cc>)
 8080c04:	2200      	movs	r2, #0
 8080c06:	781b      	ldrb	r3, [r3, #0]
 8080c08:	a802      	add	r0, sp, #8
 8080c0a:	f88d 2000 	strb.w	r2, [sp]
 8080c0e:	4932      	ldr	r1, [pc, #200]	; (8080cd8 <loop+0x3d0>)
 8080c10:	4a32      	ldr	r2, [pc, #200]	; (8080cdc <loop+0x3d4>)
 8080c12:	f7ff fa67 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 8080c16:	a803      	add	r0, sp, #12
 8080c18:	f7ff fbe6 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8080c1c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080c20:	f000 ffea 	bl	8081bf8 <delay>
        System.reset();
 8080c24:	f002 f8f8 	bl	8082e18 <_ZN11SystemClass5resetEv>
 8080c28:	e04a      	b.n	8080cc0 <loop+0x3b8>
      }
      else if (Time.now() - EEPROM.read(MEM_MAP::currentCountsTimeAddr) > 7200L) { //It has been more than two hours since a sucessful hook response
 8080c2a:	f002 f9bc 	bl	8082fa6 <_ZN9TimeClass3nowEv>
 8080c2e:	4604      	mov	r4, r0
 8080c30:	f002 fc12 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 8080c34:	2005      	movs	r0, #5
 8080c36:	f7ff fa51 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
 8080c3a:	1a20      	subs	r0, r4, r0
 8080c3c:	f5b0 5fe1 	cmp.w	r0, #7200	; 0x1c20
 8080c40:	dd1e      	ble.n	8080c80 <loop+0x378>
 8080c42:	f000 ff11 	bl	8081a68 <spark_cloud_flag_connected>
        if (Particle.connected()) Particle.publish("State","Error State - Power Cycle", PRIVATE);  // Broadcast Reset Action
 8080c46:	b160      	cbz	r0, 8080c62 <loop+0x35a>
 8080c48:	4b22      	ldr	r3, [pc, #136]	; (8080cd4 <loop+0x3cc>)
 8080c4a:	2200      	movs	r2, #0
 8080c4c:	781b      	ldrb	r3, [r3, #0]
 8080c4e:	a802      	add	r0, sp, #8
 8080c50:	f88d 2000 	strb.w	r2, [sp]
 8080c54:	4920      	ldr	r1, [pc, #128]	; (8080cd8 <loop+0x3d0>)
 8080c56:	4a22      	ldr	r2, [pc, #136]	; (8080ce0 <loop+0x3d8>)
 8080c58:	f7ff fa44 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 8080c5c:	a803      	add	r0, sp, #12
 8080c5e:	f7ff fbc3 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8080c62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080c66:	f000 ffc7 	bl	8081bf8 <delay>
        EEPROM.write(MEM_MAP::resetCountAddr,0);                           // Zero the ResetCount
 8080c6a:	f002 fbf5 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 8080c6e:	2100      	movs	r1, #0
 8080c70:	2002      	movs	r0, #2
 8080c72:	f7ff fa35 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
        digitalWrite(hardResetPin,HIGH);                              // This will cut all power to the Electron AND the carrier board
 8080c76:	2101      	movs	r1, #1
 8080c78:	2004      	movs	r0, #4
 8080c7a:	f002 fbc0 	bl	80833fe <digitalWrite>
 8080c7e:	e01f      	b.n	8080cc0 <loop+0x3b8>
 8080c80:	f000 fef2 	bl	8081a68 <spark_cloud_flag_connected>
      }
      else {                                                          // If we have had 3 resets - time to do something more
        if (Particle.connected()) Particle.publish("State","Error State - Full Modem Reset", PRIVATE);            // Brodcase Reset Action
 8080c84:	b160      	cbz	r0, 8080ca0 <loop+0x398>
 8080c86:	4b13      	ldr	r3, [pc, #76]	; (8080cd4 <loop+0x3cc>)
 8080c88:	2200      	movs	r2, #0
 8080c8a:	781b      	ldrb	r3, [r3, #0]
 8080c8c:	a802      	add	r0, sp, #8
 8080c8e:	f88d 2000 	strb.w	r2, [sp]
 8080c92:	4911      	ldr	r1, [pc, #68]	; (8080cd8 <loop+0x3d0>)
 8080c94:	4a13      	ldr	r2, [pc, #76]	; (8080ce4 <loop+0x3dc>)
 8080c96:	f7ff fa25 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 8080c9a:	a803      	add	r0, sp, #12
 8080c9c:	f7ff fba4 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delay(2000);
 8080ca0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8080ca4:	f000 ffa8 	bl	8081bf8 <delay>
        EEPROM.write(MEM_MAP::resetCountAddr,0);                           // Zero the ResetCount
 8080ca8:	f002 fbd6 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 8080cac:	2100      	movs	r1, #0
 8080cae:	2002      	movs	r0, #2
 8080cb0:	f7ff fa16 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
        fullModemReset();                                             // Full Modem reset and reboots
 8080cb4:	f7ff fb5c 	bl	8080370 <_Z14fullModemResetv>
      }
    }
    break;
  }
}
 8080cb8:	e002      	b.n	8080cc0 <loop+0x3b8>

  switch(state) {
  case IDLE_STATE:
    if (verboseMode && state != oldState) publishStateTransition();
    if (watchDogFlag) petWatchdog();
    if (lowPowerMode && (millis() - stayAwakeTimeStamp) > stayAwake) state = SLEEPING_STATE;
 8080cba:	2306      	movs	r3, #6
 8080cbc:	7023      	strb	r3, [r4, #0]
 8080cbe:	e64e      	b.n	808095e <loop+0x56>
        fullModemReset();                                             // Full Modem reset and reboots
      }
    }
    break;
  }
}
 8080cc0:	b004      	add	sp, #16
 8080cc2:	bd70      	pop	{r4, r5, r6, pc}
 8080cc4:	200005f7 	.word	0x200005f7
 8080cc8:	20000581 	.word	0x20000581
 8080ccc:	20000600 	.word	0x20000600
 8080cd0:	200005dc 	.word	0x200005dc
 8080cd4:	2000056d 	.word	0x2000056d
 8080cd8:	080853c0 	.word	0x080853c0
 8080cdc:	080854cb 	.word	0x080854cb
 8080ce0:	080854df 	.word	0x080854df
 8080ce4:	080854f9 	.word	0x080854f9

08080ce8 <_ZN10CloudClass8variableIA12_cIA16_cEEEbRKT_DpRKT0_>:
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080ce8:	2300      	movs	r3, #0
 8080cea:	2204      	movs	r2, #4
 8080cec:	f000 be94 	b.w	8081a18 <spark_variable>

08080cf0 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>:
        return _function(name, args...);
    }

    static bool _function(const char *funcKey, user_function_int_str_t* func)
    {
        return CLOUD_FN(register_function(call_raw_user_function, (void*)func, funcKey), false);
 8080cf0:	4602      	mov	r2, r0
 8080cf2:	4801      	ldr	r0, [pc, #4]	; (8080cf8 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_+0x8>)
 8080cf4:	f001 b916 	b.w	8081f24 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>
 8080cf8:	08081ef9 	.word	0x08081ef9

08080cfc <setup>:
float soilTempInC = 0;
float soilVolumetricWater = 0;


void setup()                                                      // Note: Disconnected Setup()
{
 8080cfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8080d00:	b0b8      	sub	sp, #224	; 0xe0
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
 8080d02:	aa08      	add	r2, sp, #32
 8080d04:	4616      	mov	r6, r2
 8080d06:	4b92      	ldr	r3, [pc, #584]	; (8080f50 <setup+0x254>)
 8080d08:	f103 0510 	add.w	r5, r3, #16
 8080d0c:	4614      	mov	r4, r2
 8080d0e:	6818      	ldr	r0, [r3, #0]
 8080d10:	6859      	ldr	r1, [r3, #4]
 8080d12:	3308      	adds	r3, #8
 8080d14:	c403      	stmia	r4!, {r0, r1}
 8080d16:	42ab      	cmp	r3, r5
 8080d18:	4622      	mov	r2, r4
 8080d1a:	d1f7      	bne.n	8080d0c <setup+0x10>
 8080d1c:	8819      	ldrh	r1, [r3, #0]
 8080d1e:	789b      	ldrb	r3, [r3, #2]
 8080d20:	222d      	movs	r2, #45	; 0x2d
 8080d22:	70a3      	strb	r3, [r4, #2]
 8080d24:	8021      	strh	r1, [r4, #0]
 8080d26:	f10d 0033 	add.w	r0, sp, #51	; 0x33
 8080d2a:	2100      	movs	r1, #0
  state = IDLE_STATE;
 8080d2c:	4f89      	ldr	r7, [pc, #548]	; (8080f54 <setup+0x258>)
float soilVolumetricWater = 0;


void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
 8080d2e:	f003 fde2 	bl	80848f6 <memset>
  state = IDLE_STATE;
 8080d32:	2502      	movs	r5, #2

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080d34:	2101      	movs	r1, #1
 8080d36:	2007      	movs	r0, #7


void setup()                                                      // Note: Disconnected Setup()
{
  char StartupMessage[64] = "Startup Successful";                 // Messages from Initialization
  state = IDLE_STATE;
 8080d38:	703d      	strb	r5, [r7, #0]

  pinMode(blueLED, OUTPUT);                                       // declare the Blue LED Pin as an output
 8080d3a:	f002 fb4f 	bl	80833dc <pinMode>
  pinMode(userSwitch,INPUT);                                      // Momentary contact button on board for direct user input
 8080d3e:	2100      	movs	r1, #0
 8080d40:	2005      	movs	r0, #5
 8080d42:	f002 fb4b 	bl	80833dc <pinMode>
  pinMode(donePin,OUTPUT);                                        // To pet the watchdog
 8080d46:	2101      	movs	r1, #1
 8080d48:	2006      	movs	r0, #6
 8080d4a:	f002 fb47 	bl	80833dc <pinMode>
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
 8080d4e:	2100      	movs	r1, #0
 8080d50:	2011      	movs	r0, #17
 8080d52:	f002 fb43 	bl	80833dc <pinMode>
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH
 8080d56:	2101      	movs	r1, #1
 8080d58:	2004      	movs	r0, #4
 8080d5a:	f002 fb3f 	bl	80833dc <pinMode>
    }
    inline static SleepResult sleep(const pin_t* pins, size_t pinsSize, const InterruptMode* edgeTriggerMode, size_t edgeTriggerModeSize, SleepOptionFlags flag, long seconds = 0) {
        return sleep(pins, pinsSize, edgeTriggerMode, edgeTriggerModeSize, seconds, flag);
    }

    static String deviceID(void) { return spark_deviceID(); }
 8080d5e:	a804      	add	r0, sp, #16
    particle::Future<bool> publish(const char* name, const char* data) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;
    particle::Future<bool> publish(const char* name, const char* data, int ttl) PARTICLE_DEPRECATED_API_DEFAULT_PUBLISH_SCOPE;

    inline bool subscribe(const char *eventName, EventHandler handler, Spark_Subscription_Scope_TypeDef scope)
    {
        return CLOUD_FN(spark_subscribe(eventName, handler, NULL, scope, NULL, NULL), false);
 8080d60:	2400      	movs	r4, #0
 8080d62:	f000 fe89 	bl	8081a78 <spark_deviceID>
	void setCharAt(unsigned int index, char c);
	char operator [] (unsigned int index) const;
	char& operator [] (unsigned int index);
	void getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index=0) const;
	void toCharArray(char *buf, unsigned int bufsize, unsigned int index=0) const
		{getBytes((unsigned char *)buf, bufsize, index);}
 8080d66:	2300      	movs	r3, #0
 8080d68:	227d      	movs	r2, #125	; 0x7d
 8080d6a:	a918      	add	r1, sp, #96	; 0x60
 8080d6c:	a804      	add	r0, sp, #16
 8080d6e:	f002 f836 	bl	8082dde <_ZNK6String8getBytesEPhjj>
 8080d72:	4623      	mov	r3, r4
 8080d74:	4622      	mov	r2, r4
 8080d76:	4978      	ldr	r1, [pc, #480]	; (8080f58 <setup+0x25c>)
 8080d78:	9401      	str	r4, [sp, #4]
 8080d7a:	9400      	str	r4, [sp, #0]
 8080d7c:	a818      	add	r0, sp, #96	; 0x60
 8080d7e:	f000 fe8b 	bl	8081a98 <spark_subscribe>
  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
  deviceID.toCharArray(responseTopic,125);
  Particle.subscribe(responseTopic, UbidotsHandler, MY_DEVICES);  // Subscribe to the integration response event

  Particle.variable("Signal", SignalString);                      // Particle variables that enable monitoring using the mobile app
 8080d82:	4976      	ldr	r1, [pc, #472]	; (8080f5c <setup+0x260>)
 8080d84:	4876      	ldr	r0, [pc, #472]	; (8080f60 <setup+0x264>)
 8080d86:	f7ff ffaf 	bl	8080ce8 <_ZN10CloudClass8variableIA12_cIA16_cEEEbRKT_DpRKT0_>
        return _variable(varKey, (const char*)userVar, userVarType);
    }

    template<typename T> static inline bool _variable(const char *varKey, const typename T::varref userVar, const T& userVarType)
    {
        return CLOUD_FN(spark_variable(varKey, (const void*)userVar, T::value(), NULL), false);
 8080d8a:	4623      	mov	r3, r4
 8080d8c:	462a      	mov	r2, r5
 8080d8e:	4975      	ldr	r1, [pc, #468]	; (8080f64 <setup+0x268>)
 8080d90:	4875      	ldr	r0, [pc, #468]	; (8080f68 <setup+0x26c>)
 8080d92:	f000 fe41 	bl	8081a18 <spark_variable>
 8080d96:	4975      	ldr	r1, [pc, #468]	; (8080f6c <setup+0x270>)
 8080d98:	4623      	mov	r3, r4
 8080d9a:	2204      	movs	r2, #4
 8080d9c:	6809      	ldr	r1, [r1, #0]
 8080d9e:	4874      	ldr	r0, [pc, #464]	; (8080f70 <setup+0x274>)
 8080da0:	f000 fe3a 	bl	8081a18 <spark_variable>
  Particle.variable("ResetCount", resetCount);
  Particle.variable("Release",releaseNumber);
  Particle.variable("stateOfChg", batteryString);
 8080da4:	4973      	ldr	r1, [pc, #460]	; (8080f74 <setup+0x278>)
 8080da6:	4874      	ldr	r0, [pc, #464]	; (8080f78 <setup+0x27c>)
 8080da8:	f7ff ff9e 	bl	8080ce8 <_ZN10CloudClass8variableIA12_cIA16_cEEEbRKT_DpRKT0_>
 8080dac:	4623      	mov	r3, r4
 8080dae:	2201      	movs	r2, #1
 8080db0:	4972      	ldr	r1, [pc, #456]	; (8080f7c <setup+0x280>)
 8080db2:	4873      	ldr	r0, [pc, #460]	; (8080f80 <setup+0x284>)
 8080db4:	f000 fe30 	bl	8081a18 <spark_variable>
  Particle.variable("lowPowerMode",lowPowerMode);
  Particle.variable("temperature", temperatureString);
 8080db8:	4972      	ldr	r1, [pc, #456]	; (8080f84 <setup+0x288>)
 8080dba:	4873      	ldr	r0, [pc, #460]	; (8080f88 <setup+0x28c>)
 8080dbc:	f7ff ff94 	bl	8080ce8 <_ZN10CloudClass8variableIA12_cIA16_cEEEbRKT_DpRKT0_>

  
  Particle.function("Measure-Now",measureNow);
 8080dc0:	4972      	ldr	r1, [pc, #456]	; (8080f8c <setup+0x290>)
 8080dc2:	4873      	ldr	r0, [pc, #460]	; (8080f90 <setup+0x294>)
 8080dc4:	f7ff ff94 	bl	8080cf0 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("LowPowerMode",setLowPowerMode);
 8080dc8:	4972      	ldr	r1, [pc, #456]	; (8080f94 <setup+0x298>)
 8080dca:	4873      	ldr	r0, [pc, #460]	; (8080f98 <setup+0x29c>)
 8080dcc:	f7ff ff90 	bl	8080cf0 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Solar-Mode",setSolarMode);
 8080dd0:	4972      	ldr	r1, [pc, #456]	; (8080f9c <setup+0x2a0>)
 8080dd2:	4873      	ldr	r0, [pc, #460]	; (8080fa0 <setup+0x2a4>)
 8080dd4:	f7ff ff8c 	bl	8080cf0 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("Verbose-Mode",setVerboseMode);
 8080dd8:	4972      	ldr	r1, [pc, #456]	; (8080fa4 <setup+0x2a8>)
 8080dda:	4873      	ldr	r0, [pc, #460]	; (8080fa8 <setup+0x2ac>)
 8080ddc:	f7ff ff88 	bl	8080cf0 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>
  Particle.function("SetTimeZone",setTimeZone);
 8080de0:	4972      	ldr	r1, [pc, #456]	; (8080fac <setup+0x2b0>)
 8080de2:	4873      	ldr	r0, [pc, #460]	; (8080fb0 <setup+0x2b4>)
 8080de4:	f7ff ff84 	bl	8080cf0 <_ZN10CloudClass8functionIA11_cIPFi6StringEEEEbRKT_DpT0_>

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
 8080de8:	f002 fb36 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 8080dec:	4620      	mov	r0, r4
 8080dee:	f7ff f975 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
 8080df2:	2801      	cmp	r0, #1
 8080df4:	d119      	bne.n	8080e2a <setup+0x12e>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
    }
  }

  resetCount = EEPROM.read(MEM_MAP::resetCountAddr);                    // Retrive system recount data from FRAM
 8080df6:	f002 fb2f 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 8080dfa:	2002      	movs	r0, #2
 8080dfc:	f7ff f96e 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
 8080e00:	4c58      	ldr	r4, [pc, #352]	; (8080f64 <setup+0x268>)
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080e02:	2200      	movs	r2, #0
 8080e04:	6020      	str	r0, [r4, #0]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080e06:	4611      	mov	r1, r2
 8080e08:	a802      	add	r0, sp, #8
        return get_flag(flag) != 0;
    }

    inline int resetReason() const
    {
        int reason = RESET_REASON_NONE;
 8080e0a:	9202      	str	r2, [sp, #8]
        HAL_Core_Get_Last_Reset_Info(&reason, nullptr, nullptr);
 8080e0c:	f000 fc28 	bl	8081660 <HAL_Core_Get_Last_Reset_Info>
        return reason;
 8080e10:	9b02      	ldr	r3, [sp, #8]
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
 8080e12:	2b14      	cmp	r3, #20
 8080e14:	d11e      	bne.n	8080e54 <setup+0x158>
  {
    resetCount++;
 8080e16:	6823      	ldr	r3, [r4, #0]
 8080e18:	3301      	adds	r3, #1
 8080e1a:	6023      	str	r3, [r4, #0]
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                  // If so, store incremented number - watchdog must have done This
 8080e1c:	f002 fb1c 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 8080e20:	7821      	ldrb	r1, [r4, #0]
 8080e22:	2002      	movs	r0, #2
 8080e24:	f7ff f95c 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
 8080e28:	e014      	b.n	8080e54 <setup+0x158>
  Particle.function("Solar-Mode",setSolarMode);
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
 8080e2a:	f002 fb15 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 8080e2e:	2501      	movs	r5, #1
        return t;
    }

    template <typename T> const T &put( int idx, const T &t )
    {
        HAL_EEPROM_Put(idx, &t, sizeof(T));
 8080e30:	2204      	movs	r2, #4
 8080e32:	a902      	add	r1, sp, #8
 8080e34:	4620      	mov	r0, r4
 8080e36:	9502      	str	r5, [sp, #8]
 8080e38:	f000 fc52 	bl	80816e0 <HAL_EEPROM_Put>
    for (int i=1; i < 10; i++) {
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
 8080e3c:	f002 fb0c 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 8080e40:	4628      	mov	r0, r5
 8080e42:	2204      	movs	r2, #4
 8080e44:	a902      	add	r1, sp, #8
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
 8080e46:	3501      	adds	r5, #1
      EEPROM.put(i,0);                                                  // Zero out the memory - new map or new device
 8080e48:	9402      	str	r4, [sp, #8]
 8080e4a:	f000 fc49 	bl	80816e0 <HAL_EEPROM_Put>
  Particle.function("Verbose-Mode",setVerboseMode);
  Particle.function("SetTimeZone",setTimeZone);

  if (MEMORYMAPVERSION != EEPROM.read(MEM_MAP::versionAddr)) {          // Check to see if the memory map is the right version
    EEPROM.put(MEM_MAP::versionAddr,MEMORYMAPVERSION);
    for (int i=1; i < 10; i++) {
 8080e4e:	2d0a      	cmp	r5, #10
 8080e50:	d1f4      	bne.n	8080e3c <setup+0x140>
 8080e52:	e7d0      	b.n	8080df6 <setup+0xfa>
  if (System.resetReason() == RESET_REASON_PIN_RESET)                   // Check to see if we are starting from a pin reset
  {
    resetCount++;
    EEPROM.write(MEM_MAP::resetCountAddr, resetCount);                  // If so, store incremented number - watchdog must have done This
  }
  if (resetCount >=6) {                                                 // If we get to resetCount 4, we are resetting without entering the main loop
 8080e54:	6823      	ldr	r3, [r4, #0]
 8080e56:	2b05      	cmp	r3, #5
 8080e58:	dd07      	ble.n	8080e6a <setup+0x16e>
    EEPROM.write(MEM_MAP::resetCountAddr,4);                            // The hope here is to get to the main loop and report a value of 4 which will indicate this issue is occuring
 8080e5a:	f002 fafd 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 8080e5e:	2104      	movs	r1, #4
 8080e60:	2002      	movs	r0, #2
 8080e62:	f7ff f93d 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
    fullModemReset();                                                   // This will reset the modem and the device will reboot
 8080e66:	f7ff fa83 	bl	8080370 <_Z14fullModemResetv>
  }

  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
 8080e6a:	f002 faf5 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 8080e6e:	2003      	movs	r0, #3
 8080e70:	f7ff f934 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
 8080e74:	f100 030c 	add.w	r3, r0, #12
 8080e78:	b2db      	uxtb	r3, r3
 8080e7a:	2b18      	cmp	r3, #24
 8080e7c:	d803      	bhi.n	8080e86 <setup+0x18a>
 8080e7e:	b240      	sxtb	r0, r0
 8080e80:	f003 f9a8 	bl	80841d4 <__aeabi_i2f>
 8080e84:	e000      	b.n	8080e88 <setup+0x18c>
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM
 8080e86:	2000      	movs	r0, #0
 8080e88:	f002 f82e 	bl	8082ee8 <_ZN9TimeClass4zoneEf>

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8080e8c:	f002 fae4 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 8080e90:	2004      	movs	r0, #4
 8080e92:	f7ff f923 	bl	80800dc <_ZN11EEPROMClass4readEi.isra.14>
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8080e96:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8080f7c <setup+0x280>
 8080e9a:	f000 0301 	and.w	r3, r0, #1
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8080e9e:	4d45      	ldr	r5, [pc, #276]	; (8080fb4 <setup+0x2b8>)
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
 8080ea0:	f888 3000 	strb.w	r3, [r8]
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode                                           
 8080ea4:	4c44      	ldr	r4, [pc, #272]	; (8080fb8 <setup+0x2bc>)
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
 8080ea6:	4b45      	ldr	r3, [pc, #276]	; (8080fbc <setup+0x2c0>)
 8080ea8:	f3c0 0280 	ubfx	r2, r0, #2, #1
  int8_t tempTimeZoneOffset = EEPROM.read(MEM_MAP::timeZoneAddr);       // Load Time zone data from FRAM
  if (tempTimeZoneOffset <= 12 && tempTimeZoneOffset >= -12)  Time.zone((float)tempTimeZoneOffset);  // Load Timezone from FRAM
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
 8080eac:	7028      	strb	r0, [r5, #0]
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode                                           
 8080eae:	f3c0 00c0 	ubfx	r0, r0, #3, #1
  else Time.zone(0);                                                    // Default is GMT in case proper value not in EEPROM

  // And set the flags from the control register
  controlRegister = EEPROM.read(MEM_MAP::controlRegisterAddr);          // Read the Control Register for system modes so they stick even after reset
  lowPowerMode    = (0b00000001 & controlRegister);                     // Set the lowPowerMode
  solarPowerMode  = (0b00000100 & controlRegister);                     // Set the solarPowerMode
 8080eb2:	701a      	strb	r2, [r3, #0]
  verboseMode     = (0b00001000 & controlRegister);                     // Set the verboseMode                                           
 8080eb4:	7020      	strb	r0, [r4, #0]

  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode
 8080eb6:	f7ff f9fb 	bl	80802b0 <_Z9PMICresetv>

  takeMeasurements();                                                   // For the benefit of monitoring the device
 8080eba:	f7ff f94d 	bl	8080158 <_Z16takeMeasurementsv>

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
 8080ebe:	2005      	movs	r0, #5
 8080ec0:	f002 fab6 	bl	8083430 <digitalRead>
 8080ec4:	b958      	cbnz	r0, 8080ede <setup+0x1e2>
    lowPowerMode = false;                                               // Press the user switch while resetting the device
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
 8080ec6:	782b      	ldrb	r3, [r5, #0]
  PMICreset();                                                          // Executes commands that set up the PMIC for Solar charging - once we know the Solar Mode

  takeMeasurements();                                                   // For the benefit of monitoring the device

  if (!digitalRead(userSwitch)) {                                       // Rescue mode to locally take lowPowerMode so you can connect to device
    lowPowerMode = false;                                               // Press the user switch while resetting the device
 8080ec8:	f888 0000 	strb.w	r0, [r8]
    controlRegister = (0b11111110 & controlRegister);                   // Turn off Low power mode
 8080ecc:	f023 0301 	bic.w	r3, r3, #1
 8080ed0:	702b      	strb	r3, [r5, #0]
    EEPROM.write(controlRegister,MEM_MAP::controlRegisterAddr);         // Write to the EEMPROM
 8080ed2:	f002 fac1 	bl	8083458 <_Z21__fetch_global_EEPROMv>
 8080ed6:	2104      	movs	r1, #4
 8080ed8:	7828      	ldrb	r0, [r5, #0]
 8080eda:	f7ff f901 	bl	80800e0 <_ZN11EEPROMClass5writeEih.isra.15>
  }

  if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
 8080ede:	4b38      	ldr	r3, [pc, #224]	; (8080fc0 <setup+0x2c4>)
 8080ee0:	681a      	ldr	r2, [r3, #0]
 8080ee2:	4b38      	ldr	r3, [pc, #224]	; (8080fc4 <setup+0x2c8>)
 8080ee4:	681b      	ldr	r3, [r3, #0]
 8080ee6:	429a      	cmp	r2, r3
 8080ee8:	dc02      	bgt.n	8080ef0 <setup+0x1f4>
 8080eea:	2307      	movs	r3, #7
 8080eec:	703b      	strb	r3, [r7, #0]
 8080eee:	e008      	b.n	8080f02 <setup+0x206>
  else if(!connectToParticle()) {
 8080ef0:	f7ff f96e 	bl	80801d0 <_Z17connectToParticlev>
 8080ef4:	b928      	cbnz	r0, 8080f02 <setup+0x206>
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
 8080ef6:	2301      	movs	r3, #1
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
 8080ef8:	4933      	ldr	r1, [pc, #204]	; (8080fc8 <setup+0x2cc>)
 8080efa:	4630      	mov	r0, r6
    EEPROM.write(controlRegister,MEM_MAP::controlRegisterAddr);         // Write to the EEMPROM
  }

  if (stateOfCharge <= lowBattLimit) state = LOW_BATTERY_STATE;         // Only connect if we have battery
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
 8080efc:	703b      	strb	r3, [r7, #0]
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
 8080efe:	f003 fd35 	bl	808496c <strcpy>
  }

  petWatchdog();                                                        // Need to pet the watchdog as we are waking from sleep
  attachInterrupt(wakeUpPin,watchdogISR,RISING);                        // Interrupt from watchdog - need to pet when triggered
 8080f02:	2500      	movs	r5, #0
  else if(!connectToParticle()) {
    state = ERROR_STATE;                                                // We failed to connect can reset here or go to the ERROR state for remediation
    snprintf(StartupMessage, sizeof(StartupMessage), "Failed to connect");
  }

  petWatchdog();                                                        // Need to pet the watchdog as we are waking from sleep
 8080f04:	f7ff fa60 	bl	80803c8 <_Z11petWatchdogv>
  attachInterrupt(wakeUpPin,watchdogISR,RISING);                        // Interrupt from watchdog - need to pet when triggered
 8080f08:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8080f0c:	2201      	movs	r2, #1
 8080f0e:	492f      	ldr	r1, [pc, #188]	; (8080fcc <setup+0x2d0>)
 8080f10:	9500      	str	r5, [sp, #0]
 8080f12:	2011      	movs	r0, #17
 8080f14:	f001 fb6e 	bl	80825f4 <_Z15attachInterrupttPFvvE13InterruptModeah>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8080f18:	f000 fda6 	bl	8081a68 <spark_cloud_flag_connected>

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
 8080f1c:	b108      	cbz	r0, 8080f22 <setup+0x226>
 8080f1e:	7823      	ldrb	r3, [r4, #0]
 8080f20:	b94b      	cbnz	r3, 8080f36 <setup+0x23a>
 8080f22:	f000 fbb5 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>
  lastPublish = millis();
 8080f26:	4b2a      	ldr	r3, [pc, #168]	; (8080fd0 <setup+0x2d4>)
 8080f28:	6018      	str	r0, [r3, #0]
  pinMode(donePin,OUTPUT);                                        // To pet the watchdog
  pinMode(wakeUpPin,INPUT);                                       // This pin is active HIGH
  pinMode(hardResetPin,OUTPUT);                                   // For a hard reset active HIGH

  char responseTopic[125];
  String deviceID = System.deviceID();                            // Multiple Electrons share the same hook - keeps things straight
 8080f2a:	a804      	add	r0, sp, #16
 8080f2c:	f001 fed1 	bl	8082cd2 <_ZN6StringD1Ev>
  petWatchdog();                                                        // Need to pet the watchdog as we are waking from sleep
  attachInterrupt(wakeUpPin,watchdogISR,RISING);                        // Interrupt from watchdog - need to pet when triggered

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
  lastPublish = millis();
}
 8080f30:	b038      	add	sp, #224	; 0xe0
 8080f32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8080f36:	4b27      	ldr	r3, [pc, #156]	; (8080fd4 <setup+0x2d8>)
  }

  petWatchdog();                                                        // Need to pet the watchdog as we are waking from sleep
  attachInterrupt(wakeUpPin,watchdogISR,RISING);                        // Interrupt from watchdog - need to pet when triggered

  if(Particle.connected() && verboseMode) Particle.publish("Startup",StartupMessage,PRIVATE);   // Let Particle know how the startup process went
 8080f38:	a802      	add	r0, sp, #8
 8080f3a:	781b      	ldrb	r3, [r3, #0]
 8080f3c:	4632      	mov	r2, r6
 8080f3e:	f88d 5000 	strb.w	r5, [sp]
 8080f42:	4925      	ldr	r1, [pc, #148]	; (8080fd8 <setup+0x2dc>)
 8080f44:	f7ff f8ce 	bl	80800e4 <_ZN10CloudClass7publishEPKcS1_N8particle5FlagsI15PublishFlagTypehEES5_.isra.37.constprop.43>
 8080f48:	a803      	add	r0, sp, #12
 8080f4a:	f7ff fa4d 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8080f4e:	e7e8      	b.n	8080f22 <setup+0x226>
 8080f50:	08085278 	.word	0x08085278
 8080f54:	20000582 	.word	0x20000582
 8080f58:	080804ed 	.word	0x080804ed
 8080f5c:	2000059c 	.word	0x2000059c
 8080f60:	08085518 	.word	0x08085518
 8080f64:	200005dc 	.word	0x200005dc
 8080f68:	0808551f 	.word	0x0808551f
 8080f6c:	20000400 	.word	0x20000400
 8080f70:	0808552a 	.word	0x0808552a
 8080f74:	20000606 	.word	0x20000606
 8080f78:	08085532 	.word	0x08085532
 8080f7c:	200005f6 	.word	0x200005f6
 8080f80:	0808553d 	.word	0x0808553d
 8080f84:	20000554 	.word	0x20000554
 8080f88:	0808554a 	.word	0x0808554a
 8080f8c:	080800c1 	.word	0x080800c1
 8080f90:	08085556 	.word	0x08085556
 8080f94:	080807cd 	.word	0x080807cd
 8080f98:	08085562 	.word	0x08085562
 8080f9c:	080805c1 	.word	0x080805c1
 8080fa0:	0808556f 	.word	0x0808556f
 8080fa4:	08080675 	.word	0x08080675
 8080fa8:	0808557a 	.word	0x0808557a
 8080fac:	08080721 	.word	0x08080721
 8080fb0:	08085587 	.word	0x08085587
 8080fb4:	20000616 	.word	0x20000616
 8080fb8:	200005f7 	.word	0x200005f7
 8080fbc:	20000605 	.word	0x20000605
 8080fc0:	20000594 	.word	0x20000594
 8080fc4:	20000564 	.word	0x20000564
 8080fc8:	08085593 	.word	0x08085593
 8080fcc:	080800b5 	.word	0x080800b5
 8080fd0:	20000588 	.word	0x20000588
 8080fd4:	2000056d 	.word	0x2000056d
 8080fd8:	080855a5 	.word	0x080855a5

08080fdc <_GLOBAL__sub_I_sensor>:
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
 8080fdc:	4b1a      	ldr	r3, [pc, #104]	; (8081048 <_GLOBAL__sub_I_sensor+0x6c>)

void petWatchdog() {
  digitalWrite(donePin,HIGH);
  digitalWrite(donePin,LOW);
  watchDogFlag = false;
}
 8080fde:	b570      	push	{r4, r5, r6, lr}
 8080fe0:	2400      	movs	r4, #0
 8080fe2:	601c      	str	r4, [r3, #0]
 8080fe4:	4b19      	ldr	r3, [pc, #100]	; (808104c <_GLOBAL__sub_I_sensor+0x70>)
 8080fe6:	2501      	movs	r5, #1
 8080fe8:	701d      	strb	r5, [r3, #0]
inline int32_t pinReadFast(pin_t _pin)
{
	return ((PIN_MAP[_pin].gpio_peripheral->IDR & PIN_MAP[_pin].gpio_pin) == 0 ? LOW : HIGH);
}
#elif defined(STM32F2XX)
static STM32_Pin_Info* PIN_MAP = HAL_Pin_Map();
 8080fea:	f000 fb91 	bl	8081710 <HAL_Pin_Map>


#include "DS18.h"

// Initialize modules here
DS18 sensor(D3);                       // Initialize sensor object
 8080fee:	4622      	mov	r2, r4
 8080ff0:	2103      	movs	r1, #3
 8080ff2:	4817      	ldr	r0, [pc, #92]	; (8081050 <_GLOBAL__sub_I_sensor+0x74>)
 8080ff4:	f000 f84b 	bl	808108e <_ZN4DS18C1Etb>
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8080ff8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8080ffc:	4b15      	ldr	r3, [pc, #84]	; (8081054 <_GLOBAL__sub_I_sensor+0x78>)

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8080ffe:	2002      	movs	r0, #2
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8081000:	701c      	strb	r4, [r3, #0]
 8081002:	805c      	strh	r4, [r3, #2]
 8081004:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8081006:	f000 fcbb 	bl	8081980 <set_system_mode>
#define SEALEVELPRESSURE_HPA (1013.25)              // Universal variables
#define MEMORYMAPVERSION 1                          // Lets us know if we need to reinitialize the memory map

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
 808100a:	4621      	mov	r1, r4
 808100c:	4628      	mov	r0, r5
 808100e:	f000 fccf 	bl	80819b0 <system_thread_set_state>
        return HAL_Feature_Get(feature);
    }

    inline int enableFeature(HAL_Feature feature)
    {
        return HAL_Feature_Set(feature, true);
 8081012:	4629      	mov	r1, r5
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 8081014:	4d10      	ldr	r5, [pc, #64]	; (8081058 <_GLOBAL__sub_I_sensor+0x7c>)
 8081016:	2004      	movs	r0, #4
 8081018:	f000 fb12 	bl	8081640 <HAL_Feature_Set>
 808101c:	4e0f      	ldr	r6, [pc, #60]	; (808105c <_GLOBAL__sub_I_sensor+0x80>)
 808101e:	4621      	mov	r1, r4
 8081020:	4628      	mov	r0, r5
 8081022:	f001 fa0f 	bl	8082444 <_ZN9FuelGaugeC1Eb>
 8081026:	4628      	mov	r0, r5
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 8081028:	4d0d      	ldr	r5, [pc, #52]	; (8081060 <_GLOBAL__sub_I_sensor+0x84>)

// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
 808102a:	4632      	mov	r2, r6
 808102c:	490d      	ldr	r1, [pc, #52]	; (8081064 <_GLOBAL__sub_I_sensor+0x88>)
 808102e:	f002 faad 	bl	808358c <__aeabi_atexit>
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 8081032:	4621      	mov	r1, r4
 8081034:	4628      	mov	r0, r5
 8081036:	f001 fbdc 	bl	80827f2 <_ZN4PMICC1Eb>
 808103a:	4632      	mov	r2, r6
 808103c:	4628      	mov	r0, r5

void petWatchdog() {
  digitalWrite(donePin,HIGH);
  digitalWrite(donePin,LOW);
  watchDogFlag = false;
}
 808103e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
// Prototypes and System Mode calls
SYSTEM_MODE(SEMI_AUTOMATIC);          // This will enable user code to start executing automatically.
SYSTEM_THREAD(ENABLED);               // Means my code will not be held up by Particle processes.
STARTUP(System.enableFeature(FEATURE_RESET_INFO));
FuelGauge batteryMonitor;             // Prototype for the fuel gauge (included in Particle core library)
PMIC power;                           // Initalize the PMIC class so you can call the Power Management functions below.
 8081042:	4909      	ldr	r1, [pc, #36]	; (8081068 <_GLOBAL__sub_I_sensor+0x8c>)
 8081044:	f002 baa2 	b.w	808358c <__aeabi_atexit>
 8081048:	200005ec 	.word	0x200005ec
 808104c:	2000056d 	.word	0x2000056d
 8081050:	20000618 	.word	0x20000618
 8081054:	200005f0 	.word	0x200005f0
 8081058:	20000578 	.word	0x20000578
 808105c:	20000550 	.word	0x20000550
 8081060:	20000583 	.word	0x20000583
 8081064:	08082463 	.word	0x08082463
 8081068:	08082811 	.word	0x08082811

0808106c <_ZN4DS184initEv>:
{
  init();
}

void DS18::init() {
  _raw = 0;
 808106c:	2300      	movs	r3, #0
  _celsius = 0;
 808106e:	2200      	movs	r2, #0
{
  init();
}

void DS18::init() {
  _raw = 0;
 8081070:	8303      	strh	r3, [r0, #24]
  _celsius = 0;
 8081072:	61c2      	str	r2, [r0, #28]
  memset(_addr, 0, sizeof(_addr));
 8081074:	6203      	str	r3, [r0, #32]
 8081076:	6243      	str	r3, [r0, #36]	; 0x24
  memset(_data, 0, sizeof(_data));
 8081078:	6283      	str	r3, [r0, #40]	; 0x28
 808107a:	62c3      	str	r3, [r0, #44]	; 0x2c
 808107c:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
  _type = WIRE_UNKNOWN;
 8081080:	f880 3031 	strb.w	r3, [r0, #49]	; 0x31
  _searchDone = false;
 8081084:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
  _crcError = false;
 8081088:	f880 3033 	strb.w	r3, [r0, #51]	; 0x33
 808108c:	4770      	bx	lr

0808108e <_ZN4DS18C1Etb>:
#include "DS18.h"
#include <string.h>

DS18::DS18(uint16_t pin, bool parasitic)
 808108e:	b538      	push	{r3, r4, r5, lr}
 8081090:	4604      	mov	r4, r0
 8081092:	4615      	mov	r5, r2
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
 8081094:	f000 f928 	bl	80812e8 <_ZN7OneWireC1Et>
 8081098:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
{
  init();
 808109c:	4620      	mov	r0, r4
DS18::DS18(uint16_t pin, bool parasitic)
  :
  _wire{pin},
  _parasitic{parasitic},
   // maybe 750ms is enough, maybe not, wait 1 sec for conversion
  _conversionTime{1000}
 808109e:	7525      	strb	r5, [r4, #20]
 80810a0:	82e3      	strh	r3, [r4, #22]
{
  init();
 80810a2:	f7ff ffe3 	bl	808106c <_ZN4DS184initEv>
}
 80810a6:	4620      	mov	r0, r4
 80810a8:	bd38      	pop	{r3, r4, r5, pc}
	...

080810ac <_ZN4DS184readEPh>:

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
 80810ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
 80810b0:	680b      	ldr	r3, [r1, #0]
 80810b2:	f100 0520 	add.w	r5, r0, #32
 80810b6:	6203      	str	r3, [r0, #32]
 80810b8:	684b      	ldr	r3, [r1, #4]

  // Read the temperature from that chip
  return read(_addr);
}

bool DS18::read(uint8_t addr[8]) {
 80810ba:	4604      	mov	r4, r0
  // Save the chip ROM information for later
  memcpy(_addr, addr, sizeof(_addr));
 80810bc:	606b      	str	r3, [r5, #4]

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
 80810be:	780b      	ldrb	r3, [r1, #0]
 80810c0:	2b22      	cmp	r3, #34	; 0x22
 80810c2:	d00a      	beq.n	80810da <_ZN4DS184readEPh+0x2e>
 80810c4:	d803      	bhi.n	80810ce <_ZN4DS184readEPh+0x22>
 80810c6:	2b10      	cmp	r3, #16
 80810c8:	d142      	bne.n	8081150 <_ZN4DS184readEPh+0xa4>
    case 0x10: _type = WIRE_DS1820; break;
 80810ca:	2301      	movs	r3, #1
 80810cc:	e008      	b.n	80810e0 <_ZN4DS184readEPh+0x34>

  // Identify the type of chip

  // the first ROM byte indicates which chip
  // Return if this is an unknown chip
  switch (addr[0]) {
 80810ce:	2b26      	cmp	r3, #38	; 0x26
 80810d0:	d005      	beq.n	80810de <_ZN4DS184readEPh+0x32>
 80810d2:	2b28      	cmp	r3, #40	; 0x28
 80810d4:	d13c      	bne.n	8081150 <_ZN4DS184readEPh+0xa4>
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
 80810d6:	2302      	movs	r3, #2
 80810d8:	e002      	b.n	80810e0 <_ZN4DS184readEPh+0x34>
    case 0x22: _type = WIRE_DS1822; break;
 80810da:	2303      	movs	r3, #3
 80810dc:	e000      	b.n	80810e0 <_ZN4DS184readEPh+0x34>
    case 0x26: _type = WIRE_DS2438; break;
 80810de:	2304      	movs	r3, #4
 80810e0:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
    default:   _type = WIRE_UNKNOWN; return false;
  }

  // Read the actual temperature!!!

  _wire.reset();               // first clear the 1-wire bus
 80810e4:	4620      	mov	r0, r4
 80810e6:	f000 f90c 	bl	8081302 <_ZN7OneWire5resetEv>
  _wire.select(_addr);          // now select the device we just found
 80810ea:	4629      	mov	r1, r5
 80810ec:	4620      	mov	r0, r4
 80810ee:	f000 f9cf 	bl	8081490 <_ZN7OneWire6selectEPKh>
  int power = _parasitic ? 1 : 0; // whether to leave parasite power on at the end of the conversion
  _wire.write(0x44, power);    // tell it to start a conversion
 80810f2:	7d22      	ldrb	r2, [r4, #20]
 80810f4:	2144      	movs	r1, #68	; 0x44
 80810f6:	4620      	mov	r0, r4
 80810f8:	f000 f992 	bl	8081420 <_ZN7OneWire5writeEhh>
  // just wait a second while the conversion takes place
  // different chips have different conversion times, check the specs, 1 sec is worse case + 250ms
  // you could also communicate with other devices if you like but you would need
  // to already know their address to select them.

  delay(_conversionTime); // wait for conversion to finish
 80810fc:	8ae0      	ldrh	r0, [r4, #22]
 80810fe:	f000 fd7b 	bl	8081bf8 <delay>

  // we might do a _wire.depower() (parasite) here, but the reset will take care of it.

  // first make sure current values are in the scratch pad

  _wire.reset();
 8081102:	4620      	mov	r0, r4
 8081104:	f000 f8fd 	bl	8081302 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
 8081108:	4629      	mov	r1, r5
 808110a:	4620      	mov	r0, r4
 808110c:	f000 f9c0 	bl	8081490 <_ZN7OneWire6selectEPKh>
  _wire.write(0xB8,0);         // Recall Memory 0
 8081110:	2200      	movs	r2, #0
 8081112:	21b8      	movs	r1, #184	; 0xb8
 8081114:	4620      	mov	r0, r4
 8081116:	f000 f983 	bl	8081420 <_ZN7OneWire5writeEhh>
  _wire.write(0x00,0);         // Recall Memory 0
 808111a:	2200      	movs	r2, #0
 808111c:	4611      	mov	r1, r2
 808111e:	4620      	mov	r0, r4
 8081120:	f000 f97e 	bl	8081420 <_ZN7OneWire5writeEhh>

  // now read the scratch pad

  _wire.reset();
 8081124:	4620      	mov	r0, r4
 8081126:	f000 f8ec 	bl	8081302 <_ZN7OneWire5resetEv>
  _wire.select(_addr);
 808112a:	4629      	mov	r1, r5
 808112c:	4620      	mov	r0, r4
 808112e:	f000 f9af 	bl	8081490 <_ZN7OneWire6selectEPKh>
  _wire.write(0xBE,0);         // Read Scratchpad
 8081132:	2200      	movs	r2, #0
 8081134:	21be      	movs	r1, #190	; 0xbe
 8081136:	4620      	mov	r0, r4
 8081138:	f000 f972 	bl	8081420 <_ZN7OneWire5writeEhh>
  if (_type == WIRE_DS2438) {
 808113c:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
 8081140:	2b04      	cmp	r3, #4
 8081142:	d10a      	bne.n	808115a <_ZN4DS184readEPh+0xae>
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
 8081144:	2200      	movs	r2, #0
 8081146:	4611      	mov	r1, r2
 8081148:	4620      	mov	r0, r4
 808114a:	f000 f969 	bl	8081420 <_ZN7OneWire5writeEhh>
 808114e:	e004      	b.n	808115a <_ZN4DS184readEPh+0xae>
  switch (addr[0]) {
    case 0x10: _type = WIRE_DS1820; break;
    case 0x28: _type = WIRE_DS18B20; break;
    case 0x22: _type = WIRE_DS1822; break;
    case 0x26: _type = WIRE_DS2438; break;
    default:   _type = WIRE_UNKNOWN; return false;
 8081150:	2000      	movs	r0, #0
 8081152:	f884 0031 	strb.w	r0, [r4, #49]	; 0x31
 8081156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 808115a:	f104 0527 	add.w	r5, r4, #39	; 0x27
 808115e:	f104 0630 	add.w	r6, r4, #48	; 0x30
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
    _data[i] = _wire.read();
 8081162:	4620      	mov	r0, r4
 8081164:	f000 f984 	bl	8081470 <_ZN7OneWire4readEv>
 8081168:	f805 0f01 	strb.w	r0, [r5, #1]!
  if (_type == WIRE_DS2438) {
    _wire.write(0x00,0);       // The DS2438 needs a page# to read
  }

  // transfer the raw values
  for (unsigned i = 0; i < sizeof(_data); i++) {           // we need 9 bytes
 808116c:	42ae      	cmp	r6, r5
 808116e:	d1f8      	bne.n	8081162 <_ZN4DS184readEPh+0xb6>
    _data[i] = _wire.read();
  }

  // Check if the CRC matches
  if (OneWire::crc8(_data, 8) != _data[8]) {
 8081170:	2108      	movs	r1, #8
 8081172:	f104 0028 	add.w	r0, r4, #40	; 0x28
 8081176:	f000 fa24 	bl	80815c2 <_ZN7OneWire4crc8EPhh>
 808117a:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
 808117e:	4283      	cmp	r3, r0
 8081180:	d005      	beq.n	808118e <_ZN4DS184readEPh+0xe2>
    _crcError = true;
 8081182:	2301      	movs	r3, #1
 8081184:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return false;
 8081188:	2000      	movs	r0, #0
 808118a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
 808118e:	f894 5029 	ldrb.w	r5, [r4, #41]	; 0x29
 8081192:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
  if (_type == WIRE_DS2438) {
 8081196:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
 808119a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  if (_type == WIRE_DS2438) {
 808119e:	2a04      	cmp	r2, #4

  // Convert the data to actual temperature
  // because the result is a 16 bit signed integer, it should
  // be stored to an "int16_t" type, which is always 16 bits
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
 80811a0:	8323      	strh	r3, [r4, #24]
  if (_type == WIRE_DS2438) {
 80811a2:	d120      	bne.n	80811e6 <_ZN4DS184readEPh+0x13a>
    _raw = (_data[2] << 8) | _data[1];
 80811a4:	f894 602a 	ldrb.w	r6, [r4, #42]	; 0x2a
 80811a8:	ea45 2306 	orr.w	r3, r5, r6, lsl #8
 80811ac:	8323      	strh	r3, [r4, #24]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
 80811ae:	08ed      	lsrs	r5, r5, #3
      if (_data[2] > 127) {
 80811b0:	0633      	lsls	r3, r6, #24
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
      break;

    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
 80811b2:	f884 5029 	strb.w	r5, [r4, #41]	; 0x29
      if (_data[2] > 127) {
 80811b6:	d547      	bpl.n	8081248 <_ZN4DS184readEPh+0x19c>
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
 80811b8:	4630      	mov	r0, r6
 80811ba:	f003 f807 	bl	80841cc <__aeabi_ui2f>
 80811be:	f002 fc99 	bl	8083af4 <__aeabi_f2d>
 80811c2:	4606      	mov	r6, r0
 80811c4:	4628      	mov	r0, r5
 80811c6:	460f      	mov	r7, r1
 80811c8:	f003 f800 	bl	80841cc <__aeabi_ui2f>
 80811cc:	f002 fc92 	bl	8083af4 <__aeabi_f2d>
 80811d0:	2200      	movs	r2, #0
 80811d2:	4b2b      	ldr	r3, [pc, #172]	; (8081280 <_ZN4DS184readEPh+0x1d4>)
 80811d4:	f002 fce2 	bl	8083b9c <__aeabi_dmul>
 80811d8:	4602      	mov	r2, r0
 80811da:	460b      	mov	r3, r1
 80811dc:	4630      	mov	r0, r6
 80811de:	4639      	mov	r1, r7
 80811e0:	f002 fb28 	bl	8083834 <__aeabi_dsub>
 80811e4:	e046      	b.n	8081274 <_ZN4DS184readEPh+0x1c8>
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
 80811e6:	2a01      	cmp	r2, #1
 80811e8:	d003      	beq.n	80811f2 <_ZN4DS184readEPh+0x146>
 80811ea:	d346      	bcc.n	808127a <_ZN4DS184readEPh+0x1ce>
 80811ec:	2a03      	cmp	r2, #3
 80811ee:	d910      	bls.n	8081212 <_ZN4DS184readEPh+0x166>
 80811f0:	e043      	b.n	808127a <_ZN4DS184readEPh+0x1ce>
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
 80811f2:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
      if (_data[7] == 0x10) {
 80811f6:	f894 202f 	ldrb.w	r2, [r4, #47]	; 0x2f
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
 80811fa:	00db      	lsls	r3, r3, #3
      if (_data[7] == 0x10) {
 80811fc:	2a10      	cmp	r2, #16
  }
  byte cfg = (_data[4] & 0x60);

  switch (_type) {
    case WIRE_DS1820:
      _raw = _raw << 3; // 9 bit resolution default
 80811fe:	8323      	strh	r3, [r4, #24]
      if (_data[7] == 0x10) {
 8081200:	d119      	bne.n	8081236 <_ZN4DS184readEPh+0x18a>
        // "count remain" gives full 12 bit resolution
        _raw = (_raw & 0xFFF0) + 12 - _data[6];
 8081202:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
 8081206:	f023 030f 	bic.w	r3, r3, #15
 808120a:	f1c2 020c 	rsb	r2, r2, #12
 808120e:	4413      	add	r3, r2
 8081210:	e010      	b.n	8081234 <_ZN4DS184readEPh+0x188>
  // even when compiled on a 32 bit processor.
  _raw = (_data[1] << 8) | _data[0];
  if (_type == WIRE_DS2438) {
    _raw = (_data[2] << 8) | _data[1];
  }
  byte cfg = (_data[4] & 0x60);
 8081212:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
      _celsius = (float)_raw * 0.0625;
      break;
    case WIRE_DS18B20:
    case WIRE_DS1822:
      // at lower res, the low bits are undefined, so let's zero them
      if (cfg == 0x00) _raw = _raw & ~7;  // 9 bit resolution, 93.75 ms
 8081216:	f012 0260 	ands.w	r2, r2, #96	; 0x60
 808121a:	d102      	bne.n	8081222 <_ZN4DS184readEPh+0x176>
 808121c:	f023 0307 	bic.w	r3, r3, #7
 8081220:	e008      	b.n	8081234 <_ZN4DS184readEPh+0x188>
      if (cfg == 0x20) _raw = _raw & ~3; // 10 bit res, 187.5 ms
 8081222:	2a20      	cmp	r2, #32
 8081224:	d102      	bne.n	808122c <_ZN4DS184readEPh+0x180>
 8081226:	f023 0303 	bic.w	r3, r3, #3
 808122a:	e003      	b.n	8081234 <_ZN4DS184readEPh+0x188>
      if (cfg == 0x40) _raw = _raw & ~1; // 11 bit res, 375 ms
 808122c:	2a40      	cmp	r2, #64	; 0x40
 808122e:	d102      	bne.n	8081236 <_ZN4DS184readEPh+0x18a>
 8081230:	f023 0301 	bic.w	r3, r3, #1
 8081234:	8323      	strh	r3, [r4, #24]
      // default is 12 bit resolution, 750 ms conversion time
      _celsius = (float)_raw * 0.0625;
 8081236:	f9b4 0018 	ldrsh.w	r0, [r4, #24]
 808123a:	f002 ffcb 	bl	80841d4 <__aeabi_i2f>
 808123e:	f04f 5176 	mov.w	r1, #1031798784	; 0x3d800000
 8081242:	f003 f81b 	bl	808427c <__aeabi_fmul>
 8081246:	e017      	b.n	8081278 <_ZN4DS184readEPh+0x1cc>
    case WIRE_DS2438:
      _data[1] = (_data[1] >> 3) & 0x1f;
      if (_data[2] > 127) {
        _celsius = (float)_data[2] - ((float)_data[1] * .03125);
      } else {
        _celsius = (float)_data[2] + ((float)_data[1] * .03125);
 8081248:	4628      	mov	r0, r5
 808124a:	f002 ffbf 	bl	80841cc <__aeabi_ui2f>
 808124e:	f002 fc51 	bl	8083af4 <__aeabi_f2d>
 8081252:	2200      	movs	r2, #0
 8081254:	4b0a      	ldr	r3, [pc, #40]	; (8081280 <_ZN4DS184readEPh+0x1d4>)
 8081256:	f002 fca1 	bl	8083b9c <__aeabi_dmul>
 808125a:	4680      	mov	r8, r0
 808125c:	4630      	mov	r0, r6
 808125e:	4689      	mov	r9, r1
 8081260:	f002 ffb4 	bl	80841cc <__aeabi_ui2f>
 8081264:	f002 fc46 	bl	8083af4 <__aeabi_f2d>
 8081268:	4602      	mov	r2, r0
 808126a:	460b      	mov	r3, r1
 808126c:	4640      	mov	r0, r8
 808126e:	4649      	mov	r1, r9
 8081270:	f002 fae2 	bl	8083838 <__adddf3>
 8081274:	f002 fea4 	bl	8083fc0 <__aeabi_d2f>
 8081278:	61e0      	str	r0, [r4, #28]
      }
  }

  // Got a good reading!
  return true;
 808127a:	2001      	movs	r0, #1
}
 808127c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8081280:	3fa00000 	.word	0x3fa00000

08081284 <_ZN4DS184readEv>:
  _type = WIRE_UNKNOWN;
  _searchDone = false;
  _crcError = false;
}

bool DS18::read() {
 8081284:	b538      	push	{r3, r4, r5, lr}
 8081286:	4604      	mov	r4, r0
  init();
 8081288:	f7ff fef0 	bl	808106c <_ZN4DS184initEv>

  // Search for the next chip on the 1-Wire bus
  if (!_wire.search(_addr)) {
 808128c:	f100 0520 	add.w	r5, r0, #32
 8081290:	4629      	mov	r1, r5
 8081292:	f000 f91b 	bl	80814cc <_ZN7OneWire6searchEPh>
 8081296:	b930      	cbnz	r0, 80812a6 <_ZN4DS184readEv+0x22>
    _searchDone = true;
 8081298:	2301      	movs	r3, #1
 808129a:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
    _wire.reset_search();
 808129e:	4620      	mov	r0, r4
 80812a0:	f000 f908 	bl	80814b4 <_ZN7OneWire12reset_searchEv>
    return false;
 80812a4:	e011      	b.n	80812ca <_ZN4DS184readEv+0x46>
  }

  // Check the CRC
  if (OneWire::crc8(_addr, 7) != _addr[7]) {
 80812a6:	2107      	movs	r1, #7
 80812a8:	4628      	mov	r0, r5
 80812aa:	f000 f98a 	bl	80815c2 <_ZN7OneWire4crc8EPhh>
 80812ae:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80812b2:	4283      	cmp	r3, r0
 80812b4:	d003      	beq.n	80812be <_ZN4DS184readEv+0x3a>
    _crcError = true;
 80812b6:	2301      	movs	r3, #1
 80812b8:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    return false;
 80812bc:	e005      	b.n	80812ca <_ZN4DS184readEv+0x46>
  }

  // Read the temperature from that chip
  return read(_addr);
 80812be:	4629      	mov	r1, r5
 80812c0:	4620      	mov	r0, r4
}
 80812c2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    _crcError = true;
    return false;
  }

  // Read the temperature from that chip
  return read(_addr);
 80812c6:	f7ff bef1 	b.w	80810ac <_ZN4DS184readEPh>
}
 80812ca:	2000      	movs	r0, #0
 80812cc:	bd38      	pop	{r3, r4, r5, pc}

080812ce <_ZN4DS187celsiusEv>:
  return _raw;
}

float DS18::celsius() {
  return _celsius;
}
 80812ce:	69c0      	ldr	r0, [r0, #28]
 80812d0:	4770      	bx	lr

080812d2 <_GLOBAL__sub_I__ZN4DS18C2Etb>:
 80812d2:	f000 ba1d 	b.w	8081710 <HAL_Pin_Map>

080812d6 <_ZN7OneWire19digitalWriteFastLowEv>:
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed

    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
 80812d6:	8802      	ldrh	r2, [r0, #0]
 80812d8:	231c      	movs	r3, #28
 80812da:	4353      	muls	r3, r2
 80812dc:	6842      	ldr	r2, [r0, #4]
 80812de:	18d1      	adds	r1, r2, r3
 80812e0:	58d3      	ldr	r3, [r2, r3]
 80812e2:	888a      	ldrh	r2, [r1, #4]
 80812e4:	835a      	strh	r2, [r3, #26]
 80812e6:	4770      	bx	lr

080812e8 <_ZN7OneWireC1Et>:
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80812e8:	b538      	push	{r3, r4, r5, lr}
 80812ea:	4604      	mov	r4, r0
 80812ec:	460d      	mov	r5, r1
    }

  // Assume all other platforms are STM32F2xx until proven otherwise
  #elif PLATFORM_ID == 6 || PLATFORM_ID == 8 || PLATFORM_ID == 10  // Photon(P0),P1,Electron
    // Fast pin access for STM32F2xx microcontroller
    STM32_Pin_Info* PIN_MAP = HAL_Pin_Map(); // Pointer required for highest access speed
 80812ee:	f000 fa0f 	bl	8081710 <HAL_Pin_Map>
{
    pinMode(pin, INPUT);
 80812f2:	2100      	movs	r1, #0
*/

#include "OneWire.h"
#include "application.h"

OneWire::OneWire(uint16_t pin)
 80812f4:	6060      	str	r0, [r4, #4]
{
    pinMode(pin, INPUT);
 80812f6:	4628      	mov	r0, r5
 80812f8:	f002 f870 	bl	80833dc <pinMode>
    _pin = pin;
 80812fc:	8025      	strh	r5, [r4, #0]
}
 80812fe:	4620      	mov	r0, r4
 8081300:	bd38      	pop	{r3, r4, r5, pc}

08081302 <_ZN7OneWire5resetEv>:
// and we return a 0;
//
// Returns 1 if a device asserted a presence pulse, 0 otherwise.
//
uint8_t OneWire::reset(void)
{
 8081302:	b538      	push	{r3, r4, r5, lr}
 8081304:	4605      	mov	r5, r0
    uint8_t r;
    uint8_t retries = 125;

    noInterrupts();
 8081306:	f001 f99f 	bl	8082648 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 808130a:	2100      	movs	r1, #0
 808130c:	8828      	ldrh	r0, [r5, #0]
 808130e:	f000 fa07 	bl	8081720 <HAL_Pin_Mode>
    pinModeFastInput();
    interrupts();
 8081312:	f001 f99b 	bl	808264c <_Z10interruptsv>
 8081316:	247d      	movs	r4, #125	; 0x7d
 8081318:	3c01      	subs	r4, #1
    // wait until the wire is high... just in case
    do {
        if (--retries == 0) return 0;
 808131a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 808131e:	d02d      	beq.n	808137c <_ZN7OneWire5resetEv+0x7a>
inline unsigned long micros(void) { return HAL_Timer_Get_Micro_Seconds(); }
void delay(unsigned long ms);
inline void delayMicroseconds(unsigned int us) { HAL_Delay_Microseconds(us); }
 8081320:	2002      	movs	r0, #2
 8081322:	f000 f9ad 	bl	8081680 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 8081326:	8828      	ldrh	r0, [r5, #0]
 8081328:	f000 fa12 	bl	8081750 <HAL_GPIO_Read>

    noInterrupts();
    pinModeFastInput();
    interrupts();
    // wait until the wire is high... just in case
    do {
 808132c:	f010 0fff 	tst.w	r0, #255	; 0xff
 8081330:	d0f2      	beq.n	8081318 <_ZN7OneWire5resetEv+0x16>
        if (--retries == 0) return 0;

        delayMicroseconds(2);
    } while ( !digitalReadFast());

    noInterrupts();
 8081332:	f001 f989 	bl	8082648 <_Z12noInterruptsv>

    digitalWriteFastLow();
 8081336:	4628      	mov	r0, r5
 8081338:	f7ff ffcd 	bl	80812d6 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 808133c:	2101      	movs	r1, #1
 808133e:	8828      	ldrh	r0, [r5, #0]
 8081340:	f000 f9ee 	bl	8081720 <HAL_Pin_Mode>
    pinModeFastOutput();   // drive output low

    interrupts();
 8081344:	f001 f982 	bl	808264c <_Z10interruptsv>
 8081348:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 808134c:	f000 f998 	bl	8081680 <HAL_Delay_Microseconds>
    delayMicroseconds(480);
    noInterrupts();
 8081350:	f001 f97a 	bl	8082648 <_Z12noInterruptsv>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 8081354:	2100      	movs	r1, #0
 8081356:	8828      	ldrh	r0, [r5, #0]
 8081358:	f000 f9e2 	bl	8081720 <HAL_Pin_Mode>
 808135c:	2046      	movs	r0, #70	; 0x46
 808135e:	f000 f98f 	bl	8081680 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 8081362:	8828      	ldrh	r0, [r5, #0]
 8081364:	f000 f9f4 	bl	8081750 <HAL_GPIO_Read>

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 8081368:	b2c0      	uxtb	r0, r0
 808136a:	fab0 f480 	clz	r4, r0

    interrupts();
 808136e:	f001 f96d 	bl	808264c <_Z10interruptsv>
 8081372:	f44f 70cd 	mov.w	r0, #410	; 0x19a

    pinModeFastInput();    // allow it to float

    delayMicroseconds(70);

    r =! digitalReadFast();
 8081376:	0964      	lsrs	r4, r4, #5
 8081378:	f000 f982 	bl	8081680 <HAL_Delay_Microseconds>
    interrupts();

    delayMicroseconds(410);

    return r;
}
 808137c:	4620      	mov	r0, r4
 808137e:	bd38      	pop	{r3, r4, r5, pc}

08081380 <_ZN7OneWire9write_bitEh>:

void OneWire::write_bit(uint8_t v)
{
 8081380:	b538      	push	{r3, r4, r5, lr}
    if (v & 1) {
 8081382:	f011 0501 	ands.w	r5, r1, #1

    return r;
}

void OneWire::write_bit(uint8_t v)
{
 8081386:	4604      	mov	r4, r0
    if (v & 1) {
 8081388:	d013      	beq.n	80813b2 <_ZN7OneWire9write_bitEh+0x32>
        noInterrupts();
 808138a:	f001 f95d 	bl	8082648 <_Z12noInterruptsv>

        digitalWriteFastLow();
 808138e:	4620      	mov	r0, r4
 8081390:	f7ff ffa1 	bl	80812d6 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 8081394:	2101      	movs	r1, #1
 8081396:	8820      	ldrh	r0, [r4, #0]
 8081398:	f000 f9c2 	bl	8081720 <HAL_Pin_Mode>
 808139c:	200a      	movs	r0, #10
 808139e:	f000 f96f 	bl	8081680 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80813a2:	8820      	ldrh	r0, [r4, #0]
 80813a4:	2100      	movs	r1, #0
 80813a6:	f000 f9bb 	bl	8081720 <HAL_Pin_Mode>

        delayMicroseconds(10);

        pinModeFastInput();    // float high

        interrupts();
 80813aa:	f001 f94f 	bl	808264c <_Z10interruptsv>
 80813ae:	2037      	movs	r0, #55	; 0x37
 80813b0:	e012      	b.n	80813d8 <_ZN7OneWire9write_bitEh+0x58>

        delayMicroseconds(55);
    } else {
        noInterrupts();
 80813b2:	f001 f949 	bl	8082648 <_Z12noInterruptsv>

        digitalWriteFastLow();
 80813b6:	4620      	mov	r0, r4
 80813b8:	f7ff ff8d 	bl	80812d6 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80813bc:	2101      	movs	r1, #1
 80813be:	8820      	ldrh	r0, [r4, #0]
 80813c0:	f000 f9ae 	bl	8081720 <HAL_Pin_Mode>
 80813c4:	2041      	movs	r0, #65	; 0x41
 80813c6:	f000 f95b 	bl	8081680 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80813ca:	8820      	ldrh	r0, [r4, #0]
 80813cc:	4629      	mov	r1, r5
 80813ce:	f000 f9a7 	bl	8081720 <HAL_Pin_Mode>

        delayMicroseconds(65);

        pinModeFastInput();    // float high

        interrupts();
 80813d2:	f001 f93b 	bl	808264c <_Z10interruptsv>
 80813d6:	2005      	movs	r0, #5

        delayMicroseconds(5);
    }
}
 80813d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80813dc:	f000 b950 	b.w	8081680 <HAL_Delay_Microseconds>

080813e0 <_ZN7OneWire8read_bitEv>:
//
// Read a bit. Port and bit is used to cut lookup time and provide
// more certain timing.
//
uint8_t OneWire::read_bit(void)
{
 80813e0:	b510      	push	{r4, lr}
 80813e2:	4604      	mov	r4, r0
    uint8_t r;

    noInterrupts();
 80813e4:	f001 f930 	bl	8082648 <_Z12noInterruptsv>

    digitalWriteFastLow();
 80813e8:	4620      	mov	r0, r4
 80813ea:	f7ff ff74 	bl	80812d6 <_ZN7OneWire19digitalWriteFastLowEv>
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 80813ee:	2101      	movs	r1, #1
 80813f0:	8820      	ldrh	r0, [r4, #0]
 80813f2:	f000 f995 	bl	8081720 <HAL_Pin_Mode>
 80813f6:	2003      	movs	r0, #3
 80813f8:	f000 f942 	bl	8081680 <HAL_Delay_Microseconds>
    }

    inline void pinModeFastInput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, INPUT);
 80813fc:	2100      	movs	r1, #0
 80813fe:	8820      	ldrh	r0, [r4, #0]
 8081400:	f000 f98e 	bl	8081720 <HAL_Pin_Mode>
 8081404:	200a      	movs	r0, #10
 8081406:	f000 f93b 	bl	8081680 <HAL_Delay_Microseconds>
    }

    inline uint8_t digitalReadFast(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_GPIO_Read function.
      return HAL_GPIO_Read(_pin);
 808140a:	8820      	ldrh	r0, [r4, #0]
 808140c:	f000 f9a0 	bl	8081750 <HAL_GPIO_Read>
 8081410:	4604      	mov	r4, r0

    delayMicroseconds(10);

    r = digitalReadFast();

    interrupts();
 8081412:	f001 f91b 	bl	808264c <_Z10interruptsv>
 8081416:	2035      	movs	r0, #53	; 0x35
 8081418:	f000 f932 	bl	8081680 <HAL_Delay_Microseconds>
    delayMicroseconds(53);

    return r;
}
 808141c:	b2e0      	uxtb	r0, r4
 808141e:	bd10      	pop	{r4, pc}

08081420 <_ZN7OneWire5writeEhh>:
// parasite power mode) then set 'power' to 1, otherwise the pin will
// go tri-state at the end of the write to avoid heating in a short or
// other mishap.
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
 8081420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8081424:	4605      	mov	r5, r0
 8081426:	4688      	mov	r8, r1
 8081428:	4617      	mov	r7, r2
 808142a:	2608      	movs	r6, #8
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 808142c:	2401      	movs	r4, #1
        OneWire::write_bit( (bitMask & v)?1:0);
 808142e:	ea18 0f04 	tst.w	r8, r4
 8081432:	bf14      	ite	ne
 8081434:	2101      	movne	r1, #1
 8081436:	2100      	moveq	r1, #0
 8081438:	4628      	mov	r0, r5
 808143a:	f7ff ffa1 	bl	8081380 <_ZN7OneWire9write_bitEh>
//
void OneWire::write(uint8_t v, uint8_t power /* = 0 */) 
{
    uint8_t bitMask;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 808143e:	0064      	lsls	r4, r4, #1
 8081440:	3e01      	subs	r6, #1
 8081442:	b2e4      	uxtb	r4, r4
 8081444:	d1f3      	bne.n	808142e <_ZN7OneWire5writeEhh+0xe>
        OneWire::write_bit( (bitMask & v)?1:0);
    }

    if ( power) {
 8081446:	b18f      	cbz	r7, 808146c <_ZN7OneWire5writeEhh+0x4c>
        noInterrupts();
 8081448:	f001 f8fe 	bl	8082648 <_Z12noInterruptsv>
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 808144c:	882a      	ldrh	r2, [r5, #0]
 808144e:	231c      	movs	r3, #28
 8081450:	4353      	muls	r3, r2
 8081452:	686a      	ldr	r2, [r5, #4]
 8081454:	18d1      	adds	r1, r2, r3
 8081456:	58d3      	ldr	r3, [r2, r3]
 8081458:	888a      	ldrh	r2, [r1, #4]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 808145a:	2101      	movs	r1, #1
    inline void digitalWriteFastLow() {
      PIN_MAP[_pin].gpio_peripheral->BSRRH = PIN_MAP[_pin].gpio_pin;
    }

    inline void digitalWriteFastHigh() {
      PIN_MAP[_pin].gpio_peripheral->BSRRL = PIN_MAP[_pin].gpio_pin;
 808145c:	831a      	strh	r2, [r3, #24]
    }

    inline void pinModeFastOutput(void){
      // This could probably be speed up by digging a little deeper past
      // the HAL_Pin_Mode function.
      HAL_Pin_Mode(_pin, OUTPUT);
 808145e:	8828      	ldrh	r0, [r5, #0]
 8081460:	f000 f95e 	bl	8081720 <HAL_Pin_Mode>
        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
    }
}
 8081464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
        noInterrupts();

        digitalWriteFastHigh();
        pinModeFastOutput();        // Drive pin High when power is True

        interrupts();
 8081468:	f001 b8f0 	b.w	808264c <_Z10interruptsv>
 808146c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081470 <_ZN7OneWire4readEv>:

//
// Read a byte
//
uint8_t OneWire::read() 
{
 8081470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8081472:	4607      	mov	r7, r0
 8081474:	2608      	movs	r6, #8
    uint8_t bitMask;
    uint8_t r = 0;
 8081476:	2500      	movs	r5, #0

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 8081478:	2401      	movs	r4, #1
        if ( OneWire::read_bit()) r |= bitMask;
 808147a:	4638      	mov	r0, r7
 808147c:	f7ff ffb0 	bl	80813e0 <_ZN7OneWire8read_bitEv>
 8081480:	b100      	cbz	r0, 8081484 <_ZN7OneWire4readEv+0x14>
 8081482:	4325      	orrs	r5, r4
uint8_t OneWire::read() 
{
    uint8_t bitMask;
    uint8_t r = 0;

    for (bitMask = 0x01; bitMask; bitMask <<= 1) {
 8081484:	0064      	lsls	r4, r4, #1
 8081486:	3e01      	subs	r6, #1
 8081488:	b2e4      	uxtb	r4, r4
 808148a:	d1f6      	bne.n	808147a <_ZN7OneWire4readEv+0xa>
        if ( OneWire::read_bit()) r |= bitMask;
    }

    return r;
}
 808148c:	4628      	mov	r0, r5
 808148e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08081490 <_ZN7OneWire6selectEPKh>:

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 8081490:	b570      	push	{r4, r5, r6, lr}
    uint8_t i;

    write(0x55);           // Choose ROM
 8081492:	2200      	movs	r2, #0

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 8081494:	460c      	mov	r4, r1
    uint8_t i;

    write(0x55);           // Choose ROM
 8081496:	2155      	movs	r1, #85	; 0x55

//
// Do a ROM select
//
void OneWire::select(const uint8_t rom[8])
{
 8081498:	4606      	mov	r6, r0
    uint8_t i;

    write(0x55);           // Choose ROM
 808149a:	f7ff ffc1 	bl	8081420 <_ZN7OneWire5writeEhh>
 808149e:	1e65      	subs	r5, r4, #1
 80814a0:	3407      	adds	r4, #7

    for (i = 0; i < 8; i++) write(rom[i]);
 80814a2:	f815 1f01 	ldrb.w	r1, [r5, #1]!
 80814a6:	2200      	movs	r2, #0
 80814a8:	4630      	mov	r0, r6
 80814aa:	f7ff ffb9 	bl	8081420 <_ZN7OneWire5writeEhh>
 80814ae:	42a5      	cmp	r5, r4
 80814b0:	d1f7      	bne.n	80814a2 <_ZN7OneWire6selectEPKh+0x12>
}
 80814b2:	bd70      	pop	{r4, r5, r6, pc}

080814b4 <_ZN7OneWire12reset_searchEv>:
// You do not need to do it for the first search, though you could.
//
void OneWire::reset_search()
{
    // reset the search state
    LastDiscrepancy = 0;
 80814b4:	2300      	movs	r3, #0
 80814b6:	7403      	strb	r3, [r0, #16]
    LastDeviceFlag = FALSE;
 80814b8:	7483      	strb	r3, [r0, #18]
    LastFamilyDiscrepancy = 0;
 80814ba:	7443      	strb	r3, [r0, #17]
 80814bc:	f100 0210 	add.w	r2, r0, #16
 80814c0:	3008      	adds	r0, #8

    for(int i = 7; ; i--) {
        ROM_NO[i] = 0;
 80814c2:	f802 3d01 	strb.w	r3, [r2, #-1]!
        if ( i == 0) break;
 80814c6:	4282      	cmp	r2, r0
 80814c8:	d1fb      	bne.n	80814c2 <_ZN7OneWire12reset_searchEv+0xe>
    }
}
 80814ca:	4770      	bx	lr

080814cc <_ZN7OneWire6searchEPh>:
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80814cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80814d0:	7c85      	ldrb	r5, [r0, #18]
// search state.
// Return TRUE  : device found, ROM number in ROM_NO buffer
//        FALSE : device not found, end of search
//
uint8_t OneWire::search(uint8_t *newAddr)
{
 80814d2:	4604      	mov	r4, r0
 80814d4:	4688      	mov	r8, r1
    rom_byte_number = 0;
    rom_byte_mask = 1;
    search_result = 0;

    // if the last call was not the last one
    if (!LastDeviceFlag)
 80814d6:	2d00      	cmp	r5, #0
 80814d8:	d15e      	bne.n	8081598 <_ZN7OneWire6searchEPh+0xcc>
    {
        // 1-Wire reset
        if (!reset()){
 80814da:	f7ff ff12 	bl	8081302 <_ZN7OneWire5resetEv>
 80814de:	b920      	cbnz	r0, 80814ea <_ZN7OneWire6searchEPh+0x1e>
            // reset the search
            LastDiscrepancy = 0;
 80814e0:	7420      	strb	r0, [r4, #16]
            LastDeviceFlag = FALSE;
 80814e2:	74a0      	strb	r0, [r4, #18]
            LastFamilyDiscrepancy = 0;
 80814e4:	7460      	strb	r0, [r4, #17]

            return FALSE;
 80814e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        }

        // issue the search command
        write(0xF0);
 80814ea:	462a      	mov	r2, r5
 80814ec:	21f0      	movs	r1, #240	; 0xf0
 80814ee:	4620      	mov	r0, r4

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
    rom_byte_number = 0;
    rom_byte_mask = 1;
 80814f0:	2601      	movs	r6, #1

            return FALSE;
        }

        // issue the search command
        write(0xF0);
 80814f2:	f7ff ff95 	bl	8081420 <_ZN7OneWire5writeEhh>

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
    last_zero = 0;
 80814f6:	46aa      	mov	sl, r5
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 80814f8:	4637      	mov	r7, r6

        // loop to do the search
        do
        {
            // read a bit and its complement
            id_bit = read_bit();
 80814fa:	4620      	mov	r0, r4
 80814fc:	f7ff ff70 	bl	80813e0 <_ZN7OneWire8read_bitEv>
 8081500:	4681      	mov	r9, r0
            cmp_id_bit = read_bit();
 8081502:	4620      	mov	r0, r4
 8081504:	f7ff ff6c 	bl	80813e0 <_ZN7OneWire8read_bitEv>

            // check for no devices on 1-wire
            if ((id_bit == 1) && (cmp_id_bit == 1)){
 8081508:	f1b9 0f01 	cmp.w	r9, #1
 808150c:	d102      	bne.n	8081514 <_ZN7OneWire6searchEPh+0x48>
 808150e:	2801      	cmp	r0, #1
 8081510:	d11b      	bne.n	808154a <_ZN7OneWire6searchEPh+0x7e>
 8081512:	e037      	b.n	8081584 <_ZN7OneWire6searchEPh+0xb8>
                break;
            }
            else
            {
                // all devices coupled have 0 or 1
                if (id_bit != cmp_id_bit){
 8081514:	4581      	cmp	r9, r0
 8081516:	eb04 0305 	add.w	r3, r4, r5
 808151a:	d11e      	bne.n	808155a <_ZN7OneWire6searchEPh+0x8e>
                    search_direction = id_bit;  // bit write value for search
                }
                else{
                    // if this discrepancy if before the Last Discrepancy
                    // on a previous next then pick the same as last time
                    if (id_bit_number < LastDiscrepancy)
 808151c:	7c22      	ldrb	r2, [r4, #16]
 808151e:	4297      	cmp	r7, r2
 8081520:	d207      	bcs.n	8081532 <_ZN7OneWire6searchEPh+0x66>
                        search_direction = ((ROM_NO[rom_byte_number] & rom_byte_mask) > 0);
 8081522:	7a1a      	ldrb	r2, [r3, #8]
 8081524:	4216      	tst	r6, r2
 8081526:	bf14      	ite	ne
 8081528:	f04f 0901 	movne.w	r9, #1
 808152c:	f04f 0900 	moveq.w	r9, #0
 8081530:	e004      	b.n	808153c <_ZN7OneWire6searchEPh+0x70>
                    else
                        // if equal to last pick 1, if not then pick 0
                        search_direction = (id_bit_number == LastDiscrepancy);
 8081532:	bf0c      	ite	eq
 8081534:	f04f 0901 	moveq.w	r9, #1
 8081538:	f04f 0900 	movne.w	r9, #0

                    // if 0 was picked then record its position in LastZero
                    if (search_direction == 0){
 808153c:	f1b9 0f00 	cmp.w	r9, #0
 8081540:	d103      	bne.n	808154a <_ZN7OneWire6searchEPh+0x7e>
                        last_zero = id_bit_number;

                        // check for Last discrepancy in family
                        if (last_zero < 9)
 8081542:	2f08      	cmp	r7, #8
 8081544:	d808      	bhi.n	8081558 <_ZN7OneWire6searchEPh+0x8c>
                            LastFamilyDiscrepancy = last_zero;
 8081546:	7467      	strb	r7, [r4, #17]
 8081548:	e006      	b.n	8081558 <_ZN7OneWire6searchEPh+0x8c>
                }

                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
 808154a:	1962      	adds	r2, r4, r5
 808154c:	7a13      	ldrb	r3, [r2, #8]
 808154e:	f04f 0901 	mov.w	r9, #1
 8081552:	4333      	orrs	r3, r6
 8081554:	7213      	strb	r3, [r2, #8]
 8081556:	e004      	b.n	8081562 <_ZN7OneWire6searchEPh+0x96>
    uint8_t id_bit, cmp_id_bit;

    unsigned char rom_byte_mask, search_direction;

    // initialize for search
    id_bit_number = 1;
 8081558:	46ba      	mov	sl, r7
                // set or clear the bit in the ROM byte rom_byte_number
                // with mask rom_byte_mask
                if (search_direction == 1)
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;
 808155a:	7a1a      	ldrb	r2, [r3, #8]
 808155c:	ea22 0206 	bic.w	r2, r2, r6
 8081560:	721a      	strb	r2, [r3, #8]

                // serial number search direction write bit
                write_bit(search_direction);
 8081562:	4649      	mov	r1, r9
 8081564:	4620      	mov	r0, r4

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;
 8081566:	0076      	lsls	r6, r6, #1
                  ROM_NO[rom_byte_number] |= rom_byte_mask;
                else
                  ROM_NO[rom_byte_number] &= ~rom_byte_mask;

                // serial number search direction write bit
                write_bit(search_direction);
 8081568:	f7ff ff0a 	bl	8081380 <_ZN7OneWire9write_bitEh>
                // and shift the mask rom_byte_mask
                id_bit_number++;
                rom_byte_mask <<= 1;

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
 808156c:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
                {
                    rom_byte_number++;
 8081570:	bf04      	itt	eq
 8081572:	3501      	addeq	r5, #1
 8081574:	b2ed      	uxtbeq	r5, r5
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 8081576:	f107 0701 	add.w	r7, r7, #1

                // if the mask is 0 then go to new SerialNum byte rom_byte_number and reset mask
                if (rom_byte_mask == 0)
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
 808157a:	bf08      	it	eq
 808157c:	2601      	moveq	r6, #1
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 808157e:	2d07      	cmp	r5, #7
                // serial number search direction write bit
                write_bit(search_direction);

                // increment the byte counter id_bit_number
                // and shift the mask rom_byte_mask
                id_bit_number++;
 8081580:	b2ff      	uxtb	r7, r7
                {
                    rom_byte_number++;
                    rom_byte_mask = 1;
                }
            }
        }while(rom_byte_number < 8);  // loop until through all ROM bytes 0-7
 8081582:	d9ba      	bls.n	80814fa <_ZN7OneWire6searchEPh+0x2e>

        // if the search was successful then
        if (!(id_bit_number < 65))
 8081584:	2f40      	cmp	r7, #64	; 0x40
 8081586:	d907      	bls.n	8081598 <_ZN7OneWire6searchEPh+0xcc>
        {
            // search successful so set LastDiscrepancy,LastDeviceFlag,search_result
            LastDiscrepancy = last_zero;
 8081588:	f884 a010 	strb.w	sl, [r4, #16]

            // check for last device
            if (LastDiscrepancy == 0)
 808158c:	f1ba 0f00 	cmp.w	sl, #0
 8081590:	d112      	bne.n	80815b8 <_ZN7OneWire6searchEPh+0xec>
                LastDeviceFlag = TRUE;
 8081592:	2301      	movs	r3, #1
 8081594:	74a3      	strb	r3, [r4, #18]
 8081596:	e00f      	b.n	80815b8 <_ZN7OneWire6searchEPh+0xec>
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
        LastDiscrepancy = 0;
 8081598:	2000      	movs	r0, #0
 808159a:	7420      	strb	r0, [r4, #16]
        LastDeviceFlag = FALSE;
 808159c:	74a0      	strb	r0, [r4, #18]
        LastFamilyDiscrepancy = 0;
 808159e:	7460      	strb	r0, [r4, #17]
 80815a0:	1de3      	adds	r3, r4, #7
 80815a2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80815a6:	340f      	adds	r4, #15
        search_result = FALSE;
    }

    for (int i = 0; i < 8; i++) newAddr[i] = ROM_NO[i];
 80815a8:	f813 2f01 	ldrb.w	r2, [r3, #1]!
 80815ac:	42a3      	cmp	r3, r4
 80815ae:	f808 2f01 	strb.w	r2, [r8, #1]!
 80815b2:	d1f9      	bne.n	80815a8 <_ZN7OneWire6searchEPh+0xdc>
 80815b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
            search_result = TRUE;
        }
    }

    // if no device found then reset counters so next 'search' will be like a first
    if (!search_result || !ROM_NO[0]){
 80815b8:	7a23      	ldrb	r3, [r4, #8]
 80815ba:	2b00      	cmp	r3, #0
 80815bc:	d0ec      	beq.n	8081598 <_ZN7OneWire6searchEPh+0xcc>
 80815be:	2001      	movs	r0, #1
 80815c0:	e7ee      	b.n	80815a0 <_ZN7OneWire6searchEPh+0xd4>

080815c2 <_ZN7OneWire4crc8EPhh>:
//
// Compute a Dallas Semiconductor 8 bit CRC directly.
// this is much slower, but much smaller, than the lookup table.
//
uint8_t OneWire::crc8( uint8_t *addr, uint8_t len)
{
 80815c2:	b530      	push	{r4, r5, lr}
 80815c4:	4605      	mov	r5, r0
    uint8_t crc = 0;
 80815c6:	2000      	movs	r0, #0

    while (len--) {
 80815c8:	3901      	subs	r1, #1
 80815ca:	b2c9      	uxtb	r1, r1
 80815cc:	29ff      	cmp	r1, #255	; 0xff
 80815ce:	d013      	beq.n	80815f8 <_ZN7OneWire4crc8EPhh+0x36>
        uint8_t inbyte = *addr++;
 80815d0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80815d4:	2208      	movs	r2, #8
        for (uint8_t i = 8; i; i--) {
            uint8_t mix = (crc ^ inbyte) & 0x01;
 80815d6:	ea80 0304 	eor.w	r3, r0, r4
            crc >>= 1;
            if (mix) crc ^= 0x8C;
 80815da:	f013 0f01 	tst.w	r3, #1
 80815de:	ea4f 0050 	mov.w	r0, r0, lsr #1
 80815e2:	bf1c      	itt	ne
 80815e4:	f080 038c 	eorne.w	r3, r0, #140	; 0x8c
 80815e8:	b2d8      	uxtbne	r0, r3
 80815ea:	1e53      	subs	r3, r2, #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80815ec:	f013 02ff 	ands.w	r2, r3, #255	; 0xff
            uint8_t mix = (crc ^ inbyte) & 0x01;
            crc >>= 1;
            if (mix) crc ^= 0x8C;
                inbyte >>= 1;
 80815f0:	ea4f 0454 	mov.w	r4, r4, lsr #1
{
    uint8_t crc = 0;

    while (len--) {
        uint8_t inbyte = *addr++;
        for (uint8_t i = 8; i; i--) {
 80815f4:	d1ef      	bne.n	80815d6 <_ZN7OneWire4crc8EPhh+0x14>
 80815f6:	e7e7      	b.n	80815c8 <_ZN7OneWire4crc8EPhh+0x6>
                inbyte >>= 1;
        }
    }

    return crc;
}
 80815f8:	bd30      	pop	{r4, r5, pc}

080815fa <_GLOBAL__sub_I__ZN7OneWireC2Et>:
 80815fa:	f000 b889 	b.w	8081710 <HAL_Pin_Map>
	...

08081600 <inet_gethostbyname>:
DYNALIB_FN(10, hal_cellular, cellular_credentials_set, cellular_result_t(const char*, const char*, const char*, void*))
DYNALIB_FN(11, hal_cellular, cellular_credentials_get, CellularCredentials*(void*))
DYNALIB_FN(12, hal_cellular, cellular_sim_ready, bool(void*))
DYNALIB_FN(13, hal_cellular, cellular_cancel, void(bool, bool, void*))
DYNALIB_FN(14, hal_cellular, HAL_NET_SetNetWatchDog, uint32_t(uint32_t))
DYNALIB_FN(15, hal_cellular, inet_gethostbyname, int(const char*, uint16_t, HAL_IPAddress*, network_interface_t, void*))
 8081600:	b508      	push	{r3, lr}
 8081602:	4b02      	ldr	r3, [pc, #8]	; (808160c <inet_gethostbyname+0xc>)
 8081604:	681b      	ldr	r3, [r3, #0]
 8081606:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081608:	9301      	str	r3, [sp, #4]
 808160a:	bd08      	pop	{r3, pc}
 808160c:	08060020 	.word	0x08060020

08081610 <cellular_signal>:
DYNALIB_FN(16, hal_cellular, inet_ping, int(const HAL_IPAddress*, network_interface_t, uint8_t, void*))
DYNALIB_FN(17, hal_cellular, cellular_signal, cellular_result_t(CellularSignalHal*, cellular_signal_t*))
 8081610:	b508      	push	{r3, lr}
 8081612:	4b02      	ldr	r3, [pc, #8]	; (808161c <cellular_signal+0xc>)
 8081614:	681b      	ldr	r3, [r3, #0]
 8081616:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8081618:	9301      	str	r3, [sp, #4]
 808161a:	bd08      	pop	{r3, pc}
 808161c:	08060020 	.word	0x08060020

08081620 <cellular_command>:
DYNALIB_FN(18, hal_cellular, cellular_command, cellular_result_t(_CALLBACKPTR_MDM, void*, system_tick_t, const char*, ...))
 8081620:	b508      	push	{r3, lr}
 8081622:	4b02      	ldr	r3, [pc, #8]	; (808162c <cellular_command+0xc>)
 8081624:	681b      	ldr	r3, [r3, #0]
 8081626:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081628:	9301      	str	r3, [sp, #4]
 808162a:	bd08      	pop	{r3, pc}
 808162c:	08060020 	.word	0x08060020

08081630 <os_mutex_create>:
DYNALIB_FN(8, hal_concurrent, os_timer_create, int(os_timer_t*, unsigned, void(*)(os_timer_t), void*, bool, void*))
DYNALIB_FN(9, hal_concurrent, os_timer_destroy, int(os_timer_t, void*))
DYNALIB_FN(10, hal_concurrent, os_timer_get_id, int(os_timer_t, void**))
DYNALIB_FN(11, hal_concurrent, os_timer_change, int(os_timer_t, os_timer_change_t, bool, unsigned, unsigned, void*))

DYNALIB_FN(12, hal_concurrent, os_mutex_create, int(os_mutex_t*))
 8081630:	b508      	push	{r3, lr}
 8081632:	4b02      	ldr	r3, [pc, #8]	; (808163c <os_mutex_create+0xc>)
 8081634:	681b      	ldr	r3, [r3, #0]
 8081636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081638:	9301      	str	r3, [sp, #4]
 808163a:	bd08      	pop	{r3, pc}
 808163c:	080401d0 	.word	0x080401d0

08081640 <HAL_Feature_Set>:
DYNALIB_FN(20, hal_core, HAL_Core_System_Reset_FlagSet, bool(RESET_TypeDef))
DYNALIB_FN(21, hal_core, HAL_Core_Runtime_Info, uint32_t(runtime_info_t*, void*))
DYNALIB_FN(22, hal_core, HAL_Set_System_Config, int(hal_system_config_t, const void*, unsigned))
DYNALIB_FN(23, hal_core, HAL_Core_Enter_Safe_Mode, void(void*))
DYNALIB_FN(24, hal_core, HAL_Feature_Get, bool(HAL_Feature))
DYNALIB_FN(25, hal_core, HAL_Feature_Set, int(HAL_Feature, bool))
 8081640:	b508      	push	{r3, lr}
 8081642:	4b02      	ldr	r3, [pc, #8]	; (808164c <HAL_Feature_Set+0xc>)
 8081644:	681b      	ldr	r3, [r3, #0]
 8081646:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8081648:	9301      	str	r3, [sp, #4]
 808164a:	bd08      	pop	{r3, pc}
 808164c:	080401b8 	.word	0x080401b8

08081650 <HAL_Core_System_Reset_Ex>:
DYNALIB_FN(26, hal_core, HAL_Core_System_Reset_Ex, void(int, uint32_t, void*))
 8081650:	b508      	push	{r3, lr}
 8081652:	4b02      	ldr	r3, [pc, #8]	; (808165c <HAL_Core_System_Reset_Ex+0xc>)
 8081654:	681b      	ldr	r3, [r3, #0]
 8081656:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8081658:	9301      	str	r3, [sp, #4]
 808165a:	bd08      	pop	{r3, pc}
 808165c:	080401b8 	.word	0x080401b8

08081660 <HAL_Core_Get_Last_Reset_Info>:
DYNALIB_FN(27, hal_core, HAL_Core_Get_Last_Reset_Info, int(int*, uint32_t*, void*))
 8081660:	b508      	push	{r3, lr}
 8081662:	4b02      	ldr	r3, [pc, #8]	; (808166c <HAL_Core_Get_Last_Reset_Info+0xc>)
 8081664:	681b      	ldr	r3, [r3, #0]
 8081666:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8081668:	9301      	str	r3, [sp, #4]
 808166a:	bd08      	pop	{r3, pc}
 808166c:	080401b8 	.word	0x080401b8

08081670 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
 8081670:	b508      	push	{r3, lr}
 8081672:	4b02      	ldr	r3, [pc, #8]	; (808167c <HAL_RNG_GetRandomNumber+0xc>)
 8081674:	681b      	ldr	r3, [r3, #0]
 8081676:	685b      	ldr	r3, [r3, #4]
 8081678:	9301      	str	r3, [sp, #4]
 808167a:	bd08      	pop	{r3, pc}
 808167c:	0804019c 	.word	0x0804019c

08081680 <HAL_Delay_Microseconds>:
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
 8081680:	b508      	push	{r3, lr}
 8081682:	4b02      	ldr	r3, [pc, #8]	; (808168c <HAL_Delay_Microseconds+0xc>)
 8081684:	681b      	ldr	r3, [r3, #0]
 8081686:	68db      	ldr	r3, [r3, #12]
 8081688:	9301      	str	r3, [sp, #4]
 808168a:	bd08      	pop	{r3, pc}
 808168c:	0804019c 	.word	0x0804019c

08081690 <HAL_Timer_Get_Milli_Seconds>:
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
 8081690:	b508      	push	{r3, lr}
 8081692:	4b02      	ldr	r3, [pc, #8]	; (808169c <HAL_Timer_Get_Milli_Seconds+0xc>)
 8081694:	681b      	ldr	r3, [r3, #0]
 8081696:	695b      	ldr	r3, [r3, #20]
 8081698:	9301      	str	r3, [sp, #4]
 808169a:	bd08      	pop	{r3, pc}
 808169c:	0804019c 	.word	0x0804019c

080816a0 <HAL_RTC_Get_UnixTime>:

DYNALIB_FN(BASE_IDX + 4, hal, HAL_RTC_Configuration, void(void))
DYNALIB_FN(BASE_IDX + 5, hal, HAL_RTC_Get_UnixTime, time_t(void))
 80816a0:	b508      	push	{r3, lr}
 80816a2:	4b02      	ldr	r3, [pc, #8]	; (80816ac <HAL_RTC_Get_UnixTime+0xc>)
 80816a4:	681b      	ldr	r3, [r3, #0]
 80816a6:	69db      	ldr	r3, [r3, #28]
 80816a8:	9301      	str	r3, [sp, #4]
 80816aa:	bd08      	pop	{r3, pc}
 80816ac:	0804019c 	.word	0x0804019c

080816b0 <HAL_EEPROM_Init>:
DYNALIB_FN(BASE_IDX + 6, hal, HAL_RTC_Set_UnixTime, void(time_t))
DYNALIB_FN(BASE_IDX + 7, hal, HAL_RTC_Set_UnixAlarm, void(time_t))

DYNALIB_FN(BASE_IDX + 8, hal, HAL_EEPROM_Init, void(void))
 80816b0:	b508      	push	{r3, lr}
 80816b2:	4b02      	ldr	r3, [pc, #8]	; (80816bc <HAL_EEPROM_Init+0xc>)
 80816b4:	681b      	ldr	r3, [r3, #0]
 80816b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80816b8:	9301      	str	r3, [sp, #4]
 80816ba:	bd08      	pop	{r3, pc}
 80816bc:	0804019c 	.word	0x0804019c

080816c0 <HAL_EEPROM_Read>:
DYNALIB_FN(BASE_IDX + 9, hal, HAL_EEPROM_Read, uint8_t(uint32_t))
 80816c0:	b508      	push	{r3, lr}
 80816c2:	4b02      	ldr	r3, [pc, #8]	; (80816cc <HAL_EEPROM_Read+0xc>)
 80816c4:	681b      	ldr	r3, [r3, #0]
 80816c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80816c8:	9301      	str	r3, [sp, #4]
 80816ca:	bd08      	pop	{r3, pc}
 80816cc:	0804019c 	.word	0x0804019c

080816d0 <HAL_EEPROM_Write>:
DYNALIB_FN(BASE_IDX + 10, hal, HAL_EEPROM_Write, void(uint32_t, uint8_t))
 80816d0:	b508      	push	{r3, lr}
 80816d2:	4b02      	ldr	r3, [pc, #8]	; (80816dc <HAL_EEPROM_Write+0xc>)
 80816d4:	681b      	ldr	r3, [r3, #0]
 80816d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80816d8:	9301      	str	r3, [sp, #4]
 80816da:	bd08      	pop	{r3, pc}
 80816dc:	0804019c 	.word	0x0804019c

080816e0 <HAL_EEPROM_Put>:
DYNALIB_FN(BASE_IDX + 12, hal, HAL_disable_irq, int(void))
DYNALIB_FN(BASE_IDX + 13, hal, HAL_enable_irq, void(int))
DYNALIB_FN(BASE_IDX + 14, hal, HAL_RTC_Cancel_UnixAlarm, void(void))

DYNALIB_FN(BASE_IDX + 15, hal,HAL_EEPROM_Get, void(uint32_t, void *, size_t))
DYNALIB_FN(BASE_IDX + 16, hal,HAL_EEPROM_Put, void(uint32_t, const void *, size_t))
 80816e0:	b508      	push	{r3, lr}
 80816e2:	4b02      	ldr	r3, [pc, #8]	; (80816ec <HAL_EEPROM_Put+0xc>)
 80816e4:	681b      	ldr	r3, [r3, #0]
 80816e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80816e8:	9301      	str	r3, [sp, #4]
 80816ea:	bd08      	pop	{r3, pc}
 80816ec:	0804019c 	.word	0x0804019c

080816f0 <HAL_RTC_Time_Is_Valid>:
DYNALIB_FN(BASE_IDX + 17, hal,HAL_EEPROM_Clear, void(void))
DYNALIB_FN(BASE_IDX + 18, hal,HAL_EEPROM_Has_Pending_Erase, bool(void))
DYNALIB_FN(BASE_IDX + 19, hal,HAL_EEPROM_Perform_Pending_Erase, void(void))
DYNALIB_FN(BASE_IDX + 20, hal, HAL_RTC_Time_Is_Valid, uint8_t(void*))
 80816f0:	b508      	push	{r3, lr}
 80816f2:	4b02      	ldr	r3, [pc, #8]	; (80816fc <HAL_RTC_Time_Is_Valid+0xc>)
 80816f4:	681b      	ldr	r3, [r3, #0]
 80816f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80816f8:	9301      	str	r3, [sp, #4]
 80816fa:	bd08      	pop	{r3, pc}
 80816fc:	0804019c 	.word	0x0804019c

08081700 <hal_timer_millis>:

DYNALIB_FN(BASE_IDX + 21, hal, hal_timer_millis, uint64_t(void*))
 8081700:	b508      	push	{r3, lr}
 8081702:	4b02      	ldr	r3, [pc, #8]	; (808170c <hal_timer_millis+0xc>)
 8081704:	681b      	ldr	r3, [r3, #0]
 8081706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8081708:	9301      	str	r3, [sp, #4]
 808170a:	bd08      	pop	{r3, pc}
 808170c:	0804019c 	.word	0x0804019c

08081710 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, STM32_Pin_Info*(void))
 8081710:	b508      	push	{r3, lr}
 8081712:	4b02      	ldr	r3, [pc, #8]	; (808171c <HAL_Pin_Map+0xc>)
 8081714:	681b      	ldr	r3, [r3, #0]
 8081716:	681b      	ldr	r3, [r3, #0]
 8081718:	9301      	str	r3, [sp, #4]
 808171a:	bd08      	pop	{r3, pc}
 808171c:	080401b0 	.word	0x080401b0

08081720 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
 8081720:	b508      	push	{r3, lr}
 8081722:	4b02      	ldr	r3, [pc, #8]	; (808172c <HAL_Pin_Mode+0xc>)
 8081724:	681b      	ldr	r3, [r3, #0]
 8081726:	689b      	ldr	r3, [r3, #8]
 8081728:	9301      	str	r3, [sp, #4]
 808172a:	bd08      	pop	{r3, pc}
 808172c:	080401b0 	.word	0x080401b0

08081730 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
 8081730:	b508      	push	{r3, lr}
 8081732:	4b02      	ldr	r3, [pc, #8]	; (808173c <HAL_Get_Pin_Mode+0xc>)
 8081734:	681b      	ldr	r3, [r3, #0]
 8081736:	68db      	ldr	r3, [r3, #12]
 8081738:	9301      	str	r3, [sp, #4]
 808173a:	bd08      	pop	{r3, pc}
 808173c:	080401b0 	.word	0x080401b0

08081740 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
 8081740:	b508      	push	{r3, lr}
 8081742:	4b02      	ldr	r3, [pc, #8]	; (808174c <HAL_GPIO_Write+0xc>)
 8081744:	681b      	ldr	r3, [r3, #0]
 8081746:	691b      	ldr	r3, [r3, #16]
 8081748:	9301      	str	r3, [sp, #4]
 808174a:	bd08      	pop	{r3, pc}
 808174c:	080401b0 	.word	0x080401b0

08081750 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
 8081750:	b508      	push	{r3, lr}
 8081752:	4b02      	ldr	r3, [pc, #8]	; (808175c <HAL_GPIO_Read+0xc>)
 8081754:	681b      	ldr	r3, [r3, #0]
 8081756:	695b      	ldr	r3, [r3, #20]
 8081758:	9301      	str	r3, [sp, #4]
 808175a:	bd08      	pop	{r3, pc}
 808175c:	080401b0 	.word	0x080401b0

08081760 <HAL_Interrupts_Attach>:
DYNALIB_FN(6, hal_gpio, HAL_Interrupts_Attach, void(uint16_t, HAL_InterruptHandler, void*, InterruptMode, HAL_InterruptExtraConfiguration*))
 8081760:	b508      	push	{r3, lr}
 8081762:	4b02      	ldr	r3, [pc, #8]	; (808176c <HAL_Interrupts_Attach+0xc>)
 8081764:	681b      	ldr	r3, [r3, #0]
 8081766:	699b      	ldr	r3, [r3, #24]
 8081768:	9301      	str	r3, [sp, #4]
 808176a:	bd08      	pop	{r3, pc}
 808176c:	080401b0 	.word	0x080401b0

08081770 <HAL_Interrupts_Detach>:
DYNALIB_FN(7, hal_gpio, HAL_Interrupts_Detach, void(uint16_t))
 8081770:	b508      	push	{r3, lr}
 8081772:	4b02      	ldr	r3, [pc, #8]	; (808177c <HAL_Interrupts_Detach+0xc>)
 8081774:	681b      	ldr	r3, [r3, #0]
 8081776:	69db      	ldr	r3, [r3, #28]
 8081778:	9301      	str	r3, [sp, #4]
 808177a:	bd08      	pop	{r3, pc}
 808177c:	080401b0 	.word	0x080401b0

08081780 <HAL_Interrupts_Enable_All>:
DYNALIB_FN(8, hal_gpio, HAL_Interrupts_Enable_All, void(void))
 8081780:	b508      	push	{r3, lr}
 8081782:	4b02      	ldr	r3, [pc, #8]	; (808178c <HAL_Interrupts_Enable_All+0xc>)
 8081784:	681b      	ldr	r3, [r3, #0]
 8081786:	6a1b      	ldr	r3, [r3, #32]
 8081788:	9301      	str	r3, [sp, #4]
 808178a:	bd08      	pop	{r3, pc}
 808178c:	080401b0 	.word	0x080401b0

08081790 <HAL_Interrupts_Disable_All>:
DYNALIB_FN(9, hal_gpio, HAL_Interrupts_Disable_All, void(void))
 8081790:	b508      	push	{r3, lr}
 8081792:	4b02      	ldr	r3, [pc, #8]	; (808179c <HAL_Interrupts_Disable_All+0xc>)
 8081794:	681b      	ldr	r3, [r3, #0]
 8081796:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081798:	9301      	str	r3, [sp, #4]
 808179a:	bd08      	pop	{r3, pc}
 808179c:	080401b0 	.word	0x080401b0

080817a0 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
 80817a0:	b508      	push	{r3, lr}
 80817a2:	4b02      	ldr	r3, [pc, #8]	; (80817ac <HAL_I2C_Begin+0xc>)
 80817a4:	681b      	ldr	r3, [r3, #0]
 80817a6:	68db      	ldr	r3, [r3, #12]
 80817a8:	9301      	str	r3, [sp, #4]
 80817aa:	bd08      	pop	{r3, pc}
 80817ac:	080401ac 	.word	0x080401ac

080817b0 <HAL_I2C_Request_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
 80817b0:	b508      	push	{r3, lr}
 80817b2:	4b02      	ldr	r3, [pc, #8]	; (80817bc <HAL_I2C_Request_Data+0xc>)
 80817b4:	681b      	ldr	r3, [r3, #0]
 80817b6:	695b      	ldr	r3, [r3, #20]
 80817b8:	9301      	str	r3, [sp, #4]
 80817ba:	bd08      	pop	{r3, pc}
 80817bc:	080401ac 	.word	0x080401ac

080817c0 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, void*))
 80817c0:	b508      	push	{r3, lr}
 80817c2:	4b02      	ldr	r3, [pc, #8]	; (80817cc <HAL_I2C_Begin_Transmission+0xc>)
 80817c4:	681b      	ldr	r3, [r3, #0]
 80817c6:	699b      	ldr	r3, [r3, #24]
 80817c8:	9301      	str	r3, [sp, #4]
 80817ca:	bd08      	pop	{r3, pc}
 80817cc:	080401ac 	.word	0x080401ac

080817d0 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
 80817d0:	b508      	push	{r3, lr}
 80817d2:	4b02      	ldr	r3, [pc, #8]	; (80817dc <HAL_I2C_End_Transmission+0xc>)
 80817d4:	681b      	ldr	r3, [r3, #0]
 80817d6:	69db      	ldr	r3, [r3, #28]
 80817d8:	9301      	str	r3, [sp, #4]
 80817da:	bd08      	pop	{r3, pc}
 80817dc:	080401ac 	.word	0x080401ac

080817e0 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
 80817e0:	b508      	push	{r3, lr}
 80817e2:	4b02      	ldr	r3, [pc, #8]	; (80817ec <HAL_I2C_Write_Data+0xc>)
 80817e4:	681b      	ldr	r3, [r3, #0]
 80817e6:	6a1b      	ldr	r3, [r3, #32]
 80817e8:	9301      	str	r3, [sp, #4]
 80817ea:	bd08      	pop	{r3, pc}
 80817ec:	080401ac 	.word	0x080401ac

080817f0 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
 80817f0:	b508      	push	{r3, lr}
 80817f2:	4b02      	ldr	r3, [pc, #8]	; (80817fc <HAL_I2C_Available_Data+0xc>)
 80817f4:	681b      	ldr	r3, [r3, #0]
 80817f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80817f8:	9301      	str	r3, [sp, #4]
 80817fa:	bd08      	pop	{r3, pc}
 80817fc:	080401ac 	.word	0x080401ac

08081800 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
 8081800:	b508      	push	{r3, lr}
 8081802:	4b02      	ldr	r3, [pc, #8]	; (808180c <HAL_I2C_Read_Data+0xc>)
 8081804:	681b      	ldr	r3, [r3, #0]
 8081806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8081808:	9301      	str	r3, [sp, #4]
 808180a:	bd08      	pop	{r3, pc}
 808180c:	080401ac 	.word	0x080401ac

08081810 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
 8081810:	b508      	push	{r3, lr}
 8081812:	4b02      	ldr	r3, [pc, #8]	; (808181c <HAL_I2C_Peek_Data+0xc>)
 8081814:	681b      	ldr	r3, [r3, #0]
 8081816:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081818:	9301      	str	r3, [sp, #4]
 808181a:	bd08      	pop	{r3, pc}
 808181c:	080401ac 	.word	0x080401ac

08081820 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
 8081820:	b508      	push	{r3, lr}
 8081822:	4b02      	ldr	r3, [pc, #8]	; (808182c <HAL_I2C_Flush_Data+0xc>)
 8081824:	681b      	ldr	r3, [r3, #0]
 8081826:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081828:	9301      	str	r3, [sp, #4]
 808182a:	bd08      	pop	{r3, pc}
 808182c:	080401ac 	.word	0x080401ac

08081830 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
 8081830:	b508      	push	{r3, lr}
 8081832:	4b02      	ldr	r3, [pc, #8]	; (808183c <HAL_I2C_Is_Enabled+0xc>)
 8081834:	681b      	ldr	r3, [r3, #0]
 8081836:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081838:	9301      	str	r3, [sp, #4]
 808183a:	bd08      	pop	{r3, pc}
 808183c:	080401ac 	.word	0x080401ac

08081840 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, void(HAL_I2C_Interface, void*))
 8081840:	b508      	push	{r3, lr}
 8081842:	4b02      	ldr	r3, [pc, #8]	; (808184c <HAL_I2C_Init+0xc>)
 8081844:	681b      	ldr	r3, [r3, #0]
 8081846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081848:	9301      	str	r3, [sp, #4]
 808184a:	bd08      	pop	{r3, pc}
 808184c:	080401ac 	.word	0x080401ac

08081850 <HAL_I2C_Acquire>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
 8081850:	b508      	push	{r3, lr}
 8081852:	4b02      	ldr	r3, [pc, #8]	; (808185c <HAL_I2C_Acquire+0xc>)
 8081854:	681b      	ldr	r3, [r3, #0]
 8081856:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8081858:	9301      	str	r3, [sp, #4]
 808185a:	bd08      	pop	{r3, pc}
 808185c:	080401ac 	.word	0x080401ac

08081860 <HAL_I2C_Release>:
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
 8081860:	b508      	push	{r3, lr}
 8081862:	4b02      	ldr	r3, [pc, #8]	; (808186c <HAL_I2C_Release+0xc>)
 8081864:	681b      	ldr	r3, [r3, #0]
 8081866:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8081868:	9301      	str	r3, [sp, #4]
 808186a:	bd08      	pop	{r3, pc}
 808186c:	080401ac 	.word	0x080401ac

08081870 <HAL_SPI_Init>:
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
 8081870:	b508      	push	{r3, lr}
 8081872:	4b02      	ldr	r3, [pc, #8]	; (808187c <HAL_SPI_Init+0xc>)
 8081874:	681b      	ldr	r3, [r3, #0]
 8081876:	69db      	ldr	r3, [r3, #28]
 8081878:	9301      	str	r3, [sp, #4]
 808187a:	bd08      	pop	{r3, pc}
 808187c:	080401b4 	.word	0x080401b4

08081880 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
 8081880:	b508      	push	{r3, lr}
 8081882:	4b02      	ldr	r3, [pc, #8]	; (808188c <HAL_SPI_Is_Enabled+0xc>)
 8081884:	681b      	ldr	r3, [r3, #0]
 8081886:	6a1b      	ldr	r3, [r3, #32]
 8081888:	9301      	str	r3, [sp, #4]
 808188a:	bd08      	pop	{r3, pc}
 808188c:	080401b4 	.word	0x080401b4

08081890 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
 8081890:	b508      	push	{r3, lr}
 8081892:	4b02      	ldr	r3, [pc, #8]	; (808189c <HAL_USART_Init+0xc>)
 8081894:	681b      	ldr	r3, [r3, #0]
 8081896:	699b      	ldr	r3, [r3, #24]
 8081898:	9301      	str	r3, [sp, #4]
 808189a:	bd08      	pop	{r3, pc}
 808189c:	080401c4 	.word	0x080401c4

080818a0 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
 80818a0:	b508      	push	{r3, lr}
 80818a2:	4b02      	ldr	r3, [pc, #8]	; (80818ac <HAL_USART_Write_Data+0xc>)
 80818a4:	681b      	ldr	r3, [r3, #0]
 80818a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80818a8:	9301      	str	r3, [sp, #4]
 80818aa:	bd08      	pop	{r3, pc}
 80818ac:	080401c4 	.word	0x080401c4

080818b0 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
 80818b0:	b508      	push	{r3, lr}
 80818b2:	4b02      	ldr	r3, [pc, #8]	; (80818bc <HAL_USART_Available_Data+0xc>)
 80818b4:	681b      	ldr	r3, [r3, #0]
 80818b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80818b8:	9301      	str	r3, [sp, #4]
 80818ba:	bd08      	pop	{r3, pc}
 80818bc:	080401c4 	.word	0x080401c4

080818c0 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
 80818c0:	b508      	push	{r3, lr}
 80818c2:	4b02      	ldr	r3, [pc, #8]	; (80818cc <HAL_USART_Read_Data+0xc>)
 80818c4:	681b      	ldr	r3, [r3, #0]
 80818c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80818c8:	9301      	str	r3, [sp, #4]
 80818ca:	bd08      	pop	{r3, pc}
 80818cc:	080401c4 	.word	0x080401c4

080818d0 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
 80818d0:	b508      	push	{r3, lr}
 80818d2:	4b02      	ldr	r3, [pc, #8]	; (80818dc <HAL_USART_Peek_Data+0xc>)
 80818d4:	681b      	ldr	r3, [r3, #0]
 80818d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80818d8:	9301      	str	r3, [sp, #4]
 80818da:	bd08      	pop	{r3, pc}
 80818dc:	080401c4 	.word	0x080401c4

080818e0 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
 80818e0:	b508      	push	{r3, lr}
 80818e2:	4b02      	ldr	r3, [pc, #8]	; (80818ec <HAL_USART_Flush_Data+0xc>)
 80818e4:	681b      	ldr	r3, [r3, #0]
 80818e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80818e8:	9301      	str	r3, [sp, #4]
 80818ea:	bd08      	pop	{r3, pc}
 80818ec:	080401c4 	.word	0x080401c4

080818f0 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
 80818f0:	b508      	push	{r3, lr}
 80818f2:	4b02      	ldr	r3, [pc, #8]	; (80818fc <HAL_USART_Is_Enabled+0xc>)
 80818f4:	681b      	ldr	r3, [r3, #0]
 80818f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80818f8:	9301      	str	r3, [sp, #4]
 80818fa:	bd08      	pop	{r3, pc}
 80818fc:	080401c4 	.word	0x080401c4

08081900 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
 8081900:	b508      	push	{r3, lr}
 8081902:	4b02      	ldr	r3, [pc, #8]	; (808190c <HAL_USART_Available_Data_For_Write+0xc>)
 8081904:	681b      	ldr	r3, [r3, #0]
 8081906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8081908:	9301      	str	r3, [sp, #4]
 808190a:	bd08      	pop	{r3, pc}
 808190c:	080401c4 	.word	0x080401c4

08081910 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
 8081910:	b508      	push	{r3, lr}
 8081912:	4b02      	ldr	r3, [pc, #8]	; (808191c <HAL_USB_USART_Init+0xc>)
 8081914:	681b      	ldr	r3, [r3, #0]
 8081916:	681b      	ldr	r3, [r3, #0]
 8081918:	9301      	str	r3, [sp, #4]
 808191a:	bd08      	pop	{r3, pc}
 808191c:	0806001c 	.word	0x0806001c

08081920 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
 8081920:	b508      	push	{r3, lr}
 8081922:	4b02      	ldr	r3, [pc, #8]	; (808192c <HAL_USB_USART_Available_Data+0xc>)
 8081924:	681b      	ldr	r3, [r3, #0]
 8081926:	691b      	ldr	r3, [r3, #16]
 8081928:	9301      	str	r3, [sp, #4]
 808192a:	bd08      	pop	{r3, pc}
 808192c:	0806001c 	.word	0x0806001c

08081930 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
 8081930:	b508      	push	{r3, lr}
 8081932:	4b02      	ldr	r3, [pc, #8]	; (808193c <HAL_USB_USART_Available_Data_For_Write+0xc>)
 8081934:	681b      	ldr	r3, [r3, #0]
 8081936:	695b      	ldr	r3, [r3, #20]
 8081938:	9301      	str	r3, [sp, #4]
 808193a:	bd08      	pop	{r3, pc}
 808193c:	0806001c 	.word	0x0806001c

08081940 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081940:	b508      	push	{r3, lr}
 8081942:	4b02      	ldr	r3, [pc, #8]	; (808194c <HAL_USB_USART_Receive_Data+0xc>)
 8081944:	681b      	ldr	r3, [r3, #0]
 8081946:	699b      	ldr	r3, [r3, #24]
 8081948:	9301      	str	r3, [sp, #4]
 808194a:	bd08      	pop	{r3, pc}
 808194c:	0806001c 	.word	0x0806001c

08081950 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
 8081950:	b508      	push	{r3, lr}
 8081952:	4b02      	ldr	r3, [pc, #8]	; (808195c <HAL_USB_USART_Send_Data+0xc>)
 8081954:	681b      	ldr	r3, [r3, #0]
 8081956:	69db      	ldr	r3, [r3, #28]
 8081958:	9301      	str	r3, [sp, #4]
 808195a:	bd08      	pop	{r3, pc}
 808195c:	0806001c 	.word	0x0806001c

08081960 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
 8081960:	b508      	push	{r3, lr}
 8081962:	4b02      	ldr	r3, [pc, #8]	; (808196c <HAL_USB_USART_Flush_Data+0xc>)
 8081964:	681b      	ldr	r3, [r3, #0]
 8081966:	6a1b      	ldr	r3, [r3, #32]
 8081968:	9301      	str	r3, [sp, #4]
 808196a:	bd08      	pop	{r3, pc}
 808196c:	0806001c 	.word	0x0806001c

08081970 <system_mode>:
#include "system_setup.h"
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
 8081970:	b508      	push	{r3, lr}
 8081972:	4b02      	ldr	r3, [pc, #8]	; (808197c <system_mode+0xc>)
 8081974:	681b      	ldr	r3, [r3, #0]
 8081976:	681b      	ldr	r3, [r3, #0]
 8081978:	9301      	str	r3, [sp, #4]
 808197a:	bd08      	pop	{r3, pc}
 808197c:	080401a4 	.word	0x080401a4

08081980 <set_system_mode>:
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
 8081980:	b508      	push	{r3, lr}
 8081982:	4b02      	ldr	r3, [pc, #8]	; (808198c <set_system_mode+0xc>)
 8081984:	681b      	ldr	r3, [r3, #0]
 8081986:	685b      	ldr	r3, [r3, #4]
 8081988:	9301      	str	r3, [sp, #4]
 808198a:	bd08      	pop	{r3, pc}
 808198c:	080401a4 	.word	0x080401a4

08081990 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
 8081990:	b508      	push	{r3, lr}
 8081992:	4b02      	ldr	r3, [pc, #8]	; (808199c <system_delay_ms+0xc>)
 8081994:	681b      	ldr	r3, [r3, #0]
 8081996:	695b      	ldr	r3, [r3, #20]
 8081998:	9301      	str	r3, [sp, #4]
 808199a:	bd08      	pop	{r3, pc}
 808199c:	080401a4 	.word	0x080401a4

080819a0 <system_sleep>:
DYNALIB_FN(6, system, system_sleep, int(Spark_Sleep_TypeDef, long, uint32_t, void*))
 80819a0:	b508      	push	{r3, lr}
 80819a2:	4b02      	ldr	r3, [pc, #8]	; (80819ac <system_sleep+0xc>)
 80819a4:	681b      	ldr	r3, [r3, #0]
 80819a6:	699b      	ldr	r3, [r3, #24]
 80819a8:	9301      	str	r3, [sp, #4]
 80819aa:	bd08      	pop	{r3, pc}
 80819ac:	080401a4 	.word	0x080401a4

080819b0 <system_thread_set_state>:
DYNALIB_FN(7, system, system_sleep_pin, int(uint16_t, uint16_t, long, uint32_t, void*))
DYNALIB_FN(8, system, system_subscribe_event, int(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(9, system, system_unsubscribe_event, void(system_event_t, system_event_handler_t*, void*))
DYNALIB_FN(10, system, system_button_pushed_duration, uint16_t(uint8_t, void*))
DYNALIB_FN(11, system, system_thread_set_state, void(spark::feature::State, void*))
 80819b0:	b508      	push	{r3, lr}
 80819b2:	4b02      	ldr	r3, [pc, #8]	; (80819bc <system_thread_set_state+0xc>)
 80819b4:	681b      	ldr	r3, [r3, #0]
 80819b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80819b8:	9301      	str	r3, [sp, #4]
 80819ba:	bd08      	pop	{r3, pc}
 80819bc:	080401a4 	.word	0x080401a4

080819c0 <application_thread_current>:
DYNALIB_FN(15, system, system_get_flag, int(system_flag_t, uint8_t*, void*))
DYNALIB_FN(16, system, Spark_Prepare_For_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))
DYNALIB_FN(17, system, Spark_Save_Firmware_Chunk, int(FileTransfer::Descriptor&, const uint8_t*, void*))
DYNALIB_FN(18, system, Spark_Finish_Firmware_Update, int(FileTransfer::Descriptor&, uint32_t, void*))

DYNALIB_FN(19, system, application_thread_current, uint8_t(void*))
 80819c0:	b508      	push	{r3, lr}
 80819c2:	4b02      	ldr	r3, [pc, #8]	; (80819cc <application_thread_current+0xc>)
 80819c4:	681b      	ldr	r3, [r3, #0]
 80819c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80819c8:	9301      	str	r3, [sp, #4]
 80819ca:	bd08      	pop	{r3, pc}
 80819cc:	080401a4 	.word	0x080401a4

080819d0 <application_thread_invoke>:
DYNALIB_FN(20, system, system_thread_current, uint8_t(void*))
DYNALIB_FN(21, system, application_thread_invoke, uint8_t(void(*)(void*), void*, void*))
 80819d0:	b508      	push	{r3, lr}
 80819d2:	4b02      	ldr	r3, [pc, #8]	; (80819dc <application_thread_invoke+0xc>)
 80819d4:	681b      	ldr	r3, [r3, #0]
 80819d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80819d8:	9301      	str	r3, [sp, #4]
 80819da:	bd08      	pop	{r3, pc}
 80819dc:	080401a4 	.word	0x080401a4

080819e0 <system_thread_get_state>:
DYNALIB_FN(22, system, system_thread_get_state, spark::feature::State(void*))
 80819e0:	b508      	push	{r3, lr}
 80819e2:	4b02      	ldr	r3, [pc, #8]	; (80819ec <system_thread_get_state+0xc>)
 80819e4:	681b      	ldr	r3, [r3, #0]
 80819e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80819e8:	9301      	str	r3, [sp, #4]
 80819ea:	bd08      	pop	{r3, pc}
 80819ec:	080401a4 	.word	0x080401a4

080819f0 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
 80819f0:	b508      	push	{r3, lr}
 80819f2:	4b03      	ldr	r3, [pc, #12]	; (8081a00 <system_ctrl_set_app_request_handler+0x10>)
 80819f4:	681b      	ldr	r3, [r3, #0]
 80819f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80819fa:	9301      	str	r3, [sp, #4]
 80819fc:	bd08      	pop	{r3, pc}
 80819fe:	0000      	.short	0x0000
 8081a00:	080401a4 	.word	0x080401a4

08081a04 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
 8081a04:	b508      	push	{r3, lr}
 8081a06:	4b03      	ldr	r3, [pc, #12]	; (8081a14 <system_ctrl_set_result+0x10>)
 8081a08:	681b      	ldr	r3, [r3, #0]
 8081a0a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8081a0e:	9301      	str	r3, [sp, #4]
 8081a10:	bd08      	pop	{r3, pc}
 8081a12:	0000      	.short	0x0000
 8081a14:	080401a4 	.word	0x080401a4

08081a18 <spark_variable>:
#endif


DYNALIB_BEGIN(system_cloud)

DYNALIB_FN(0, system_cloud, spark_variable, bool(const char*, const void*, Spark_Data_TypeDef, spark_variable_t*))
 8081a18:	b508      	push	{r3, lr}
 8081a1a:	4b02      	ldr	r3, [pc, #8]	; (8081a24 <spark_variable+0xc>)
 8081a1c:	681b      	ldr	r3, [r3, #0]
 8081a1e:	681b      	ldr	r3, [r3, #0]
 8081a20:	9301      	str	r3, [sp, #4]
 8081a22:	bd08      	pop	{r3, pc}
 8081a24:	080401cc 	.word	0x080401cc

08081a28 <spark_function>:
DYNALIB_FN(1, system_cloud, spark_function, bool(const char*, p_user_function_int_str_t, void*))
 8081a28:	b508      	push	{r3, lr}
 8081a2a:	4b02      	ldr	r3, [pc, #8]	; (8081a34 <spark_function+0xc>)
 8081a2c:	681b      	ldr	r3, [r3, #0]
 8081a2e:	685b      	ldr	r3, [r3, #4]
 8081a30:	9301      	str	r3, [sp, #4]
 8081a32:	bd08      	pop	{r3, pc}
 8081a34:	080401cc 	.word	0x080401cc

08081a38 <spark_process>:
DYNALIB_FN(2, system_cloud, spark_process, void(void))
 8081a38:	b508      	push	{r3, lr}
 8081a3a:	4b02      	ldr	r3, [pc, #8]	; (8081a44 <spark_process+0xc>)
 8081a3c:	681b      	ldr	r3, [r3, #0]
 8081a3e:	689b      	ldr	r3, [r3, #8]
 8081a40:	9301      	str	r3, [sp, #4]
 8081a42:	bd08      	pop	{r3, pc}
 8081a44:	080401cc 	.word	0x080401cc

08081a48 <spark_cloud_flag_connect>:
DYNALIB_FN(3, system_cloud, spark_cloud_flag_connect, void(void))
 8081a48:	b508      	push	{r3, lr}
 8081a4a:	4b02      	ldr	r3, [pc, #8]	; (8081a54 <spark_cloud_flag_connect+0xc>)
 8081a4c:	681b      	ldr	r3, [r3, #0]
 8081a4e:	68db      	ldr	r3, [r3, #12]
 8081a50:	9301      	str	r3, [sp, #4]
 8081a52:	bd08      	pop	{r3, pc}
 8081a54:	080401cc 	.word	0x080401cc

08081a58 <spark_cloud_flag_disconnect>:
DYNALIB_FN(4, system_cloud, spark_cloud_flag_disconnect, void(void))
 8081a58:	b508      	push	{r3, lr}
 8081a5a:	4b02      	ldr	r3, [pc, #8]	; (8081a64 <spark_cloud_flag_disconnect+0xc>)
 8081a5c:	681b      	ldr	r3, [r3, #0]
 8081a5e:	691b      	ldr	r3, [r3, #16]
 8081a60:	9301      	str	r3, [sp, #4]
 8081a62:	bd08      	pop	{r3, pc}
 8081a64:	080401cc 	.word	0x080401cc

08081a68 <spark_cloud_flag_connected>:
DYNALIB_FN(5, system_cloud, spark_cloud_flag_connected, bool(void))
 8081a68:	b508      	push	{r3, lr}
 8081a6a:	4b02      	ldr	r3, [pc, #8]	; (8081a74 <spark_cloud_flag_connected+0xc>)
 8081a6c:	681b      	ldr	r3, [r3, #0]
 8081a6e:	695b      	ldr	r3, [r3, #20]
 8081a70:	9301      	str	r3, [sp, #4]
 8081a72:	bd08      	pop	{r3, pc}
 8081a74:	080401cc 	.word	0x080401cc

08081a78 <spark_deviceID>:
DYNALIB_FN(6, system_cloud, system_cloud_protocol_instance, ProtocolFacade*(void))
DYNALIB_FN(7, system_cloud, spark_deviceID, String(void))
 8081a78:	b508      	push	{r3, lr}
 8081a7a:	4b02      	ldr	r3, [pc, #8]	; (8081a84 <spark_deviceID+0xc>)
 8081a7c:	681b      	ldr	r3, [r3, #0]
 8081a7e:	69db      	ldr	r3, [r3, #28]
 8081a80:	9301      	str	r3, [sp, #4]
 8081a82:	bd08      	pop	{r3, pc}
 8081a84:	080401cc 	.word	0x080401cc

08081a88 <spark_send_event>:
DYNALIB_FN(8, system_cloud, spark_send_event, bool(const char*, const char*, int, uint32_t, void*))
 8081a88:	b508      	push	{r3, lr}
 8081a8a:	4b02      	ldr	r3, [pc, #8]	; (8081a94 <spark_send_event+0xc>)
 8081a8c:	681b      	ldr	r3, [r3, #0]
 8081a8e:	6a1b      	ldr	r3, [r3, #32]
 8081a90:	9301      	str	r3, [sp, #4]
 8081a92:	bd08      	pop	{r3, pc}
 8081a94:	080401cc 	.word	0x080401cc

08081a98 <spark_subscribe>:
DYNALIB_FN(9, system_cloud, spark_subscribe, bool(const char*, EventHandler, void*, Spark_Subscription_Scope_TypeDef, const char*, void*))
 8081a98:	b508      	push	{r3, lr}
 8081a9a:	4b02      	ldr	r3, [pc, #8]	; (8081aa4 <spark_subscribe+0xc>)
 8081a9c:	681b      	ldr	r3, [r3, #0]
 8081a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8081aa0:	9301      	str	r3, [sp, #4]
 8081aa2:	bd08      	pop	{r3, pc}
 8081aa4:	080401cc 	.word	0x080401cc

08081aa8 <spark_sync_time>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
 8081aa8:	b508      	push	{r3, lr}
 8081aaa:	4b02      	ldr	r3, [pc, #8]	; (8081ab4 <spark_sync_time+0xc>)
 8081aac:	681b      	ldr	r3, [r3, #0]
 8081aae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081ab0:	9301      	str	r3, [sp, #4]
 8081ab2:	bd08      	pop	{r3, pc}
 8081ab4:	080401cc 	.word	0x080401cc

08081ab8 <spark_sync_time_pending>:
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
 8081ab8:	b508      	push	{r3, lr}
 8081aba:	4b02      	ldr	r3, [pc, #8]	; (8081ac4 <spark_sync_time_pending+0xc>)
 8081abc:	681b      	ldr	r3, [r3, #0]
 8081abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081ac0:	9301      	str	r3, [sp, #4]
 8081ac2:	bd08      	pop	{r3, pc}
 8081ac4:	080401cc 	.word	0x080401cc

08081ac8 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
 8081ac8:	b508      	push	{r3, lr}
 8081aca:	4b02      	ldr	r3, [pc, #8]	; (8081ad4 <spark_set_random_seed_from_cloud_handler+0xc>)
 8081acc:	681b      	ldr	r3, [r3, #0]
 8081ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8081ad0:	9301      	str	r3, [sp, #4]
 8081ad2:	bd08      	pop	{r3, pc}
 8081ad4:	080401cc 	.word	0x080401cc

08081ad8 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
 8081ad8:	b508      	push	{r3, lr}
 8081ada:	4b02      	ldr	r3, [pc, #8]	; (8081ae4 <network_connect+0xc>)
 8081adc:	681b      	ldr	r3, [r3, #0]
 8081ade:	685b      	ldr	r3, [r3, #4]
 8081ae0:	9301      	str	r3, [sp, #4]
 8081ae2:	bd08      	pop	{r3, pc}
 8081ae4:	080401c8 	.word	0x080401c8

08081ae8 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
 8081ae8:	b508      	push	{r3, lr}
 8081aea:	4b02      	ldr	r3, [pc, #8]	; (8081af4 <network_connecting+0xc>)
 8081aec:	681b      	ldr	r3, [r3, #0]
 8081aee:	689b      	ldr	r3, [r3, #8]
 8081af0:	9301      	str	r3, [sp, #4]
 8081af2:	bd08      	pop	{r3, pc}
 8081af4:	080401c8 	.word	0x080401c8

08081af8 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
 8081af8:	b508      	push	{r3, lr}
 8081afa:	4b02      	ldr	r3, [pc, #8]	; (8081b04 <network_disconnect+0xc>)
 8081afc:	681b      	ldr	r3, [r3, #0]
 8081afe:	68db      	ldr	r3, [r3, #12]
 8081b00:	9301      	str	r3, [sp, #4]
 8081b02:	bd08      	pop	{r3, pc}
 8081b04:	080401c8 	.word	0x080401c8

08081b08 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
 8081b08:	b508      	push	{r3, lr}
 8081b0a:	4b02      	ldr	r3, [pc, #8]	; (8081b14 <network_ready+0xc>)
 8081b0c:	681b      	ldr	r3, [r3, #0]
 8081b0e:	691b      	ldr	r3, [r3, #16]
 8081b10:	9301      	str	r3, [sp, #4]
 8081b12:	bd08      	pop	{r3, pc}
 8081b14:	080401c8 	.word	0x080401c8

08081b18 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
 8081b18:	b508      	push	{r3, lr}
 8081b1a:	4b02      	ldr	r3, [pc, #8]	; (8081b24 <network_on+0xc>)
 8081b1c:	681b      	ldr	r3, [r3, #0]
 8081b1e:	695b      	ldr	r3, [r3, #20]
 8081b20:	9301      	str	r3, [sp, #4]
 8081b22:	bd08      	pop	{r3, pc}
 8081b24:	080401c8 	.word	0x080401c8

08081b28 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
 8081b28:	b508      	push	{r3, lr}
 8081b2a:	4b02      	ldr	r3, [pc, #8]	; (8081b34 <network_off+0xc>)
 8081b2c:	681b      	ldr	r3, [r3, #0]
 8081b2e:	699b      	ldr	r3, [r3, #24]
 8081b30:	9301      	str	r3, [sp, #4]
 8081b32:	bd08      	pop	{r3, pc}
 8081b34:	080401c8 	.word	0x080401c8

08081b38 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
 8081b38:	b508      	push	{r3, lr}
 8081b3a:	4b02      	ldr	r3, [pc, #8]	; (8081b44 <network_listen+0xc>)
 8081b3c:	681b      	ldr	r3, [r3, #0]
 8081b3e:	69db      	ldr	r3, [r3, #28]
 8081b40:	9301      	str	r3, [sp, #4]
 8081b42:	bd08      	pop	{r3, pc}
 8081b44:	080401c8 	.word	0x080401c8

08081b48 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
 8081b48:	b508      	push	{r3, lr}
 8081b4a:	4b02      	ldr	r3, [pc, #8]	; (8081b54 <network_listening+0xc>)
 8081b4c:	681b      	ldr	r3, [r3, #0]
 8081b4e:	6a1b      	ldr	r3, [r3, #32]
 8081b50:	9301      	str	r3, [sp, #4]
 8081b52:	bd08      	pop	{r3, pc}
 8081b54:	080401c8 	.word	0x080401c8

08081b58 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
 8081b58:	b508      	push	{r3, lr}
 8081b5a:	4b02      	ldr	r3, [pc, #8]	; (8081b64 <network_set_listen_timeout+0xc>)
 8081b5c:	681b      	ldr	r3, [r3, #0]
 8081b5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081b60:	9301      	str	r3, [sp, #4]
 8081b62:	bd08      	pop	{r3, pc}
 8081b64:	080401c8 	.word	0x080401c8

08081b68 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
 8081b68:	b508      	push	{r3, lr}
 8081b6a:	4b02      	ldr	r3, [pc, #8]	; (8081b74 <network_get_listen_timeout+0xc>)
 8081b6c:	681b      	ldr	r3, [r3, #0]
 8081b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8081b70:	9301      	str	r3, [sp, #4]
 8081b72:	bd08      	pop	{r3, pc}
 8081b74:	080401c8 	.word	0x080401c8

08081b78 <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
 8081b78:	b508      	push	{r3, lr}
 8081b7a:	4b02      	ldr	r3, [pc, #8]	; (8081b84 <malloc+0xc>)
 8081b7c:	681b      	ldr	r3, [r3, #0]
 8081b7e:	681b      	ldr	r3, [r3, #0]
 8081b80:	9301      	str	r3, [sp, #4]
 8081b82:	bd08      	pop	{r3, pc}
 8081b84:	080401a0 	.word	0x080401a0

08081b88 <free>:
DYNALIB_FN(1, rt, free, void(void*))
 8081b88:	b508      	push	{r3, lr}
 8081b8a:	4b02      	ldr	r3, [pc, #8]	; (8081b94 <free+0xc>)
 8081b8c:	681b      	ldr	r3, [r3, #0]
 8081b8e:	685b      	ldr	r3, [r3, #4]
 8081b90:	9301      	str	r3, [sp, #4]
 8081b92:	bd08      	pop	{r3, pc}
 8081b94:	080401a0 	.word	0x080401a0

08081b98 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
 8081b98:	b508      	push	{r3, lr}
 8081b9a:	4b02      	ldr	r3, [pc, #8]	; (8081ba4 <realloc+0xc>)
 8081b9c:	681b      	ldr	r3, [r3, #0]
 8081b9e:	689b      	ldr	r3, [r3, #8]
 8081ba0:	9301      	str	r3, [sp, #4]
 8081ba2:	bd08      	pop	{r3, pc}
 8081ba4:	080401a0 	.word	0x080401a0

08081ba8 <siprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
 8081ba8:	b508      	push	{r3, lr}
 8081baa:	4b02      	ldr	r3, [pc, #8]	; (8081bb4 <siprintf+0xc>)
 8081bac:	681b      	ldr	r3, [r3, #0]
 8081bae:	691b      	ldr	r3, [r3, #16]
 8081bb0:	9301      	str	r3, [sp, #4]
 8081bb2:	bd08      	pop	{r3, pc}
 8081bb4:	080401a0 	.word	0x080401a0

08081bb8 <siscanf>:
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
 8081bb8:	b508      	push	{r3, lr}
 8081bba:	4b02      	ldr	r3, [pc, #8]	; (8081bc4 <siscanf+0xc>)
 8081bbc:	681b      	ldr	r3, [r3, #0]
 8081bbe:	699b      	ldr	r3, [r3, #24]
 8081bc0:	9301      	str	r3, [sp, #4]
 8081bc2:	bd08      	pop	{r3, pc}
 8081bc4:	080401a0 	.word	0x080401a0

08081bc8 <snprintf>:
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
 8081bc8:	b508      	push	{r3, lr}
 8081bca:	4b02      	ldr	r3, [pc, #8]	; (8081bd4 <snprintf+0xc>)
 8081bcc:	681b      	ldr	r3, [r3, #0]
 8081bce:	69db      	ldr	r3, [r3, #28]
 8081bd0:	9301      	str	r3, [sp, #4]
 8081bd2:	bd08      	pop	{r3, pc}
 8081bd4:	080401a0 	.word	0x080401a0

08081bd8 <abort>:
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
 8081bd8:	b508      	push	{r3, lr}
 8081bda:	4b02      	ldr	r3, [pc, #8]	; (8081be4 <abort+0xc>)
 8081bdc:	681b      	ldr	r3, [r3, #0]
 8081bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8081be0:	9301      	str	r3, [sp, #4]
 8081be2:	bd08      	pop	{r3, pc}
 8081be4:	080401a0 	.word	0x080401a0

08081be8 <_malloc_r>:
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
 8081be8:	b508      	push	{r3, lr}
 8081bea:	4b02      	ldr	r3, [pc, #8]	; (8081bf4 <_malloc_r+0xc>)
 8081bec:	681b      	ldr	r3, [r3, #0]
 8081bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8081bf0:	9301      	str	r3, [sp, #4]
 8081bf2:	bd08      	pop	{r3, pc}
 8081bf4:	080401a0 	.word	0x080401a0

08081bf8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
 8081bf8:	2100      	movs	r1, #0
 8081bfa:	f7ff bec9 	b.w	8081990 <system_delay_ms>

08081bfe <_ZN8particle6detail21futureCallbackWrapperEPv>:
 * License along with this library; if not, see <http://www.gnu.org/licenses/>.
 */

#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
 8081bfe:	b510      	push	{r4, lr}
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081c00:	6883      	ldr	r3, [r0, #8]
 8081c02:	4604      	mov	r4, r0
 8081c04:	b90b      	cbnz	r3, 8081c0a <_ZN8particle6detail21futureCallbackWrapperEPv+0xc>
	__throw_bad_function_call();
 8081c06:	f001 fcc6 	bl	8083596 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081c0a:	68c3      	ldr	r3, [r0, #12]
 8081c0c:	4798      	blx	r3

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
    {
      if (_M_manager)
 8081c0e:	68a3      	ldr	r3, [r4, #8]
 8081c10:	b11b      	cbz	r3, 8081c1a <_ZN8particle6detail21futureCallbackWrapperEPv+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081c12:	2203      	movs	r2, #3
 8081c14:	4621      	mov	r1, r4
 8081c16:	4620      	mov	r0, r4
 8081c18:	4798      	blx	r3
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081c1a:	4620      	mov	r0, r4
}
 8081c1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include "spark_wiring_async.h"

void particle::detail::futureCallbackWrapper(void* data) {
    auto callbackPtr = static_cast<const std::function<void()>*>(data);
    (*callbackPtr)();
    delete callbackPtr;
 8081c20:	f7fe ba3d 	b.w	808009e <_ZdlPv>

08081c24 <_ZN5spark13CellularClass5readyEv>:
        return network_listening(*this, 0, NULL);
    }

    bool ready()
    {
        return network_ready(*this, 0,  NULL);
 8081c24:	2200      	movs	r2, #0
 8081c26:	4611      	mov	r1, r2
 8081c28:	6840      	ldr	r0, [r0, #4]
 8081c2a:	f7ff bf6d 	b.w	8081b08 <network_ready>

08081c2e <_ZN5spark13CellularClass7resolveEPKc>:
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081c2e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    {
        HAL_IPAddress ip = {0};
 8081c32:	2600      	movs	r6, #0
 8081c34:	ac04      	add	r4, sp, #16
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081c36:	4605      	mov	r5, r0
    {
        HAL_IPAddress ip = {0};
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081c38:	4610      	mov	r0, r2
    {
        return cellular_command((_CALLBACKPTR_MDM)cb, (void*)param, timeout_ms, format, Fargs...);
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
 8081c3a:	4688      	mov	r8, r1
 8081c3c:	4617      	mov	r7, r2
    {
        HAL_IPAddress ip = {0};
 8081c3e:	f844 6d04 	str.w	r6, [r4, #-4]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8081c42:	f002 feb6 	bl	80849b2 <strlen>
 8081c46:	9600      	str	r6, [sp, #0]
 8081c48:	b281      	uxth	r1, r0
 8081c4a:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8081c4e:	4622      	mov	r2, r4
 8081c50:	4638      	mov	r0, r7
 8081c52:	f7ff fcd5 	bl	8081600 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8081c56:	b120      	cbz	r0, 8081c62 <_ZN5spark13CellularClass7resolveEPKc+0x34>
 8081c58:	4631      	mov	r1, r6
 8081c5a:	4628      	mov	r0, r5
 8081c5c:	f000 fd28 	bl	80826b0 <_ZN9IPAddressC1Em>
 8081c60:	e003      	b.n	8081c6a <_ZN5spark13CellularClass7resolveEPKc+0x3c>
 8081c62:	4621      	mov	r1, r4
 8081c64:	4628      	mov	r0, r5
 8081c66:	f000 fd1b 	bl	80826a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    }
 8081c6a:	4628      	mov	r0, r5
 8081c6c:	b004      	add	sp, #16
 8081c6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08081c72 <_ZN5spark13CellularClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
 8081c72:	2200      	movs	r2, #0
 8081c74:	4611      	mov	r1, r2
 8081c76:	6840      	ldr	r0, [r0, #4]
 8081c78:	f7ff bf66 	b.w	8081b48 <network_listening>

08081c7c <_ZN5spark13CellularClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
 8081c7c:	2200      	movs	r2, #0
 8081c7e:	4611      	mov	r1, r2
 8081c80:	6840      	ldr	r0, [r0, #4]
 8081c82:	f7ff bf71 	b.w	8081b68 <network_get_listen_timeout>

08081c86 <_ZN5spark13CellularClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
 8081c86:	2200      	movs	r2, #0
 8081c88:	6840      	ldr	r0, [r0, #4]
 8081c8a:	f7ff bf65 	b.w	8081b58 <network_set_listen_timeout>

08081c8e <_ZN5spark13CellularClass6listenEb>:
        cellular_credentials_clear(nullptr);
    }
#endif // HAL_PLATFORM_MESH

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
 8081c8e:	2200      	movs	r2, #0
 8081c90:	f081 0101 	eor.w	r1, r1, #1
 8081c94:	6840      	ldr	r0, [r0, #4]
 8081c96:	f7ff bf4f 	b.w	8081b38 <network_listen>

08081c9a <_ZN5spark13CellularClass3offEv>:
    }
    void on() {
        network_on(*this, 0, 0, NULL);
    }
    void off() {
        network_off(*this, 0, 0, NULL);
 8081c9a:	2300      	movs	r3, #0
 8081c9c:	461a      	mov	r2, r3
 8081c9e:	4619      	mov	r1, r3
 8081ca0:	6840      	ldr	r0, [r0, #4]
 8081ca2:	f7ff bf41 	b.w	8081b28 <network_off>

08081ca6 <_ZN5spark13CellularClass2onEv>:

    IPAddress localIP() {
        return IPAddress(((CellularConfig*)network_config(*this, 0, NULL))->nw.aucIP);
    }
    void on() {
        network_on(*this, 0, 0, NULL);
 8081ca6:	2300      	movs	r3, #0
 8081ca8:	461a      	mov	r2, r3
 8081caa:	4619      	mov	r1, r3
 8081cac:	6840      	ldr	r0, [r0, #4]
 8081cae:	f7ff bf33 	b.w	8081b18 <network_on>

08081cb2 <_ZN5spark13CellularClass10connectingEv>:
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
 8081cb2:	2200      	movs	r2, #0
 8081cb4:	4611      	mov	r1, r2
 8081cb6:	6840      	ldr	r0, [r0, #4]
 8081cb8:	f7ff bf16 	b.w	8081ae8 <network_connecting>

08081cbc <_ZN5spark13CellularClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
 8081cbc:	2200      	movs	r2, #0
 8081cbe:	2102      	movs	r1, #2
 8081cc0:	6840      	ldr	r0, [r0, #4]
 8081cc2:	f7ff bf19 	b.w	8081af8 <network_disconnect>

08081cc6 <_ZN5spark13CellularClass7connectEj>:
    }
    void off() {
        network_off(*this, 0, 0, NULL);
    }
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
 8081cc6:	2300      	movs	r3, #0
 8081cc8:	461a      	mov	r2, r3
 8081cca:	6840      	ldr	r0, [r0, #4]
 8081ccc:	f7ff bf04 	b.w	8081ad8 <network_connect>

08081cd0 <_ZN5spark13CellularClass4RSSIEv>:

// #include "cellular_internal.h"

namespace spark {

    CellularSignal CellularClass::RSSI() {
 8081cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081cd2:	460f      	mov	r7, r1
class CellularSignal : public particle::Signal, public Printable {
public:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
 8081cd4:	4b1a      	ldr	r3, [pc, #104]	; (8081d40 <_ZN5spark13CellularClass4RSSIEv+0x70>)
 8081cd6:	2500      	movs	r5, #0
 8081cd8:	6003      	str	r3, [r0, #0]
 8081cda:	2618      	movs	r6, #24
 8081cdc:	3328      	adds	r3, #40	; 0x28
 8081cde:	b089      	sub	sp, #36	; 0x24
 8081ce0:	6043      	str	r3, [r0, #4]
 8081ce2:	6085      	str	r5, [r0, #8]
 8081ce4:	60c5      	str	r5, [r0, #12]
 8081ce6:	4632      	mov	r2, r6
 8081ce8:	4629      	mov	r1, r5
 8081cea:	4604      	mov	r4, r0
 8081cec:	3010      	adds	r0, #16
 8081cee:	f002 fe02 	bl	80848f6 <memset>
        CellularSignal sig;
        if (!network_ready(*this, 0, NULL)) {
 8081cf2:	462a      	mov	r2, r5
 8081cf4:	4629      	mov	r1, r5
 8081cf6:	6878      	ldr	r0, [r7, #4]
 8081cf8:	f7ff ff06 	bl	8081b08 <network_ready>
 8081cfc:	b908      	cbnz	r0, 8081d02 <_ZN5spark13CellularClass4RSSIEv+0x32>
            sig.rssi = 0;
 8081cfe:	60a0      	str	r0, [r4, #8]
            return sig;
 8081d00:	e01b      	b.n	8081d3a <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
 8081d02:	4629      	mov	r1, r5
 8081d04:	4632      	mov	r2, r6
 8081d06:	a802      	add	r0, sp, #8
        if (!network_ready(*this, 0, NULL)) {
            sig.rssi = 0;
            return sig;
        }

        CellularSignalHal sig_hal = {0};
 8081d08:	9500      	str	r5, [sp, #0]
 8081d0a:	9501      	str	r5, [sp, #4]
        cellular_signal_t sigext = {0};
 8081d0c:	f002 fdf3 	bl	80848f6 <memset>
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8081d10:	a902      	add	r1, sp, #8
 8081d12:	4668      	mov	r0, sp
            return sig;
        }

        CellularSignalHal sig_hal = {0};
        cellular_signal_t sigext = {0};
        sigext.size = sizeof(sigext);
 8081d14:	f8ad 6008 	strh.w	r6, [sp, #8]
        if (cellular_signal(&sig_hal, &sigext) != 0) {
 8081d18:	f7ff fc7a 	bl	8081610 <cellular_signal>
 8081d1c:	b110      	cbz	r0, 8081d24 <_ZN5spark13CellularClass4RSSIEv+0x54>
            sig.rssi = 1;
 8081d1e:	2301      	movs	r3, #1
 8081d20:	60a3      	str	r3, [r4, #8]
            return sig;
 8081d22:	e00a      	b.n	8081d3a <_ZN5spark13CellularClass4RSSIEv+0x6a>
        }
        sig.rssi = sig_hal.rssi;
 8081d24:	9b00      	ldr	r3, [sp, #0]
        sig.qual = sig_hal.qual;
 8081d26:	9a01      	ldr	r2, [sp, #4]
        sigext.size = sizeof(sigext);
        if (cellular_signal(&sig_hal, &sigext) != 0) {
            sig.rssi = 1;
            return sig;
        }
        sig.rssi = sig_hal.rssi;
 8081d28:	60a3      	str	r3, [r4, #8]
        sig.qual = sig_hal.qual;
 8081d2a:	60e2      	str	r2, [r4, #12]
        if (sig.rssi == 0) {
 8081d2c:	b90b      	cbnz	r3, 8081d32 <_ZN5spark13CellularClass4RSSIEv+0x62>
            sig.rssi = 2;
 8081d2e:	2302      	movs	r3, #2
 8081d30:	60a3      	str	r3, [r4, #8]
        }
        sig.fromHalCellularSignal(sigext);
 8081d32:	a902      	add	r1, sp, #8
 8081d34:	4620      	mov	r0, r4
 8081d36:	f000 f89d 	bl	8081e74 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>
        return sig;
    }
 8081d3a:	4620      	mov	r0, r4
 8081d3c:	b009      	add	sp, #36	; 0x24
 8081d3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8081d40:	0808561c 	.word	0x0808561c

08081d44 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv>:
        return (band_get.ok = true);
    }

    CellularClass Cellular;
    // NetworkClass& Network = Cellular;
}
 8081d44:	b538      	push	{r3, r4, r5, lr}
    int tx_total;
    int rx_total;

    CellularDataHal()
    {
        memset(this, 0, sizeof(*this));
 8081d46:	4c0c      	ldr	r4, [pc, #48]	; (8081d78 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x34>)
 8081d48:	2528      	movs	r5, #40	; 0x28
 8081d4a:	462a      	mov	r2, r5
 8081d4c:	2100      	movs	r1, #0
 8081d4e:	4620      	mov	r0, r4
 8081d50:	f002 fdd1 	bl	80848f6 <memset>
        cid = -1;
 8081d54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8081d58:	6063      	str	r3, [r4, #4]
        size = sizeof(*this);
 8081d5a:	8025      	strh	r5, [r4, #0]
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
 8081d5c:	4c07      	ldr	r4, [pc, #28]	; (8081d7c <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x38>)
 8081d5e:	2304      	movs	r3, #4
{
    CellularDevice device;

public:
    CellularClass() :
            NetworkClass(NETWORK_INTERFACE_CELLULAR) {
 8081d60:	4620      	mov	r0, r4
 8081d62:	6063      	str	r3, [r4, #4]
 8081d64:	4b06      	ldr	r3, [pc, #24]	; (8081d80 <_GLOBAL__sub_I__ZN5spark13CellularClass4RSSIEv+0x3c>)
    char imei[16];
    int dev;

    CellularDevice()
    {
        memset(this, 0, sizeof(*this));
 8081d66:	252c      	movs	r5, #44	; 0x2c
 8081d68:	f840 3b08 	str.w	r3, [r0], #8
 8081d6c:	462a      	mov	r2, r5
 8081d6e:	2100      	movs	r1, #0
 8081d70:	f002 fdc1 	bl	80848f6 <memset>
        size = sizeof(*this);
 8081d74:	8125      	strh	r5, [r4, #8]
 8081d76:	bd38      	pop	{r3, r4, r5, pc}
 8081d78:	20000680 	.word	0x20000680
 8081d7c:	2000064c 	.word	0x2000064c
 8081d80:	080855e8 	.word	0x080855e8

08081d84 <_ZN14CellularSignalD1Ev>:
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8081d84:	4770      	bx	lr

08081d86 <_ZNK14CellularSignal19getAccessTechnologyEv>:
}

hal_net_access_tech_t CellularSignal::getAccessTechnology() const
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}
 8081d86:	7d00      	ldrb	r0, [r0, #20]
 8081d88:	4770      	bx	lr
	...

08081d8c <_ZNK14CellularSignal16getStrengthValueEv>:

    return -1.0f;
}

float CellularSignal::getStrengthValue() const
{
 8081d8c:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
 8081d8e:	7d03      	ldrb	r3, [r0, #20]
 8081d90:	b11b      	cbz	r3, 8081d9a <_ZNK14CellularSignal16getStrengthValueEv+0xe>
 8081d92:	6980      	ldr	r0, [r0, #24]
 8081d94:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081d98:	d101      	bne.n	8081d9e <_ZNK14CellularSignal16getStrengthValueEv+0x12>
        return (float)sig_.rssi / 100.0f;
    }

    return 0.0f;
 8081d9a:	2000      	movs	r0, #0
 8081d9c:	bd08      	pop	{r3, pc}
}

float CellularSignal::getStrengthValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.rssi != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.rssi / 100.0f;
 8081d9e:	f002 fa19 	bl	80841d4 <__aeabi_i2f>
 8081da2:	4902      	ldr	r1, [pc, #8]	; (8081dac <_ZNK14CellularSignal16getStrengthValueEv+0x20>)
 8081da4:	f002 fb1e 	bl	80843e4 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8081da8:	bd08      	pop	{r3, pc}
 8081daa:	bf00      	nop
 8081dac:	42c80000 	.word	0x42c80000

08081db0 <_ZNK14CellularSignal15getQualityValueEv>:

    return -1.0f;
}

float CellularSignal::getQualityValue() const
{
 8081db0:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
 8081db2:	7d03      	ldrb	r3, [r0, #20]
 8081db4:	b11b      	cbz	r3, 8081dbe <_ZNK14CellularSignal15getQualityValueEv+0xe>
 8081db6:	6a00      	ldr	r0, [r0, #32]
 8081db8:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
 8081dbc:	d101      	bne.n	8081dc2 <_ZNK14CellularSignal15getQualityValueEv+0x12>
        return (float)sig_.qual / 100.0f;
    }

    return 0.0f;
 8081dbe:	2000      	movs	r0, #0
 8081dc0:	bd08      	pop	{r3, pc}
}

float CellularSignal::getQualityValue() const
{
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.qual != std::numeric_limits<int32_t>::min()) {
        return (float)sig_.qual / 100.0f;
 8081dc2:	f002 fa07 	bl	80841d4 <__aeabi_i2f>
 8081dc6:	4902      	ldr	r1, [pc, #8]	; (8081dd0 <_ZNK14CellularSignal15getQualityValueEv+0x20>)
 8081dc8:	f002 fb0c 	bl	80843e4 <__aeabi_fdiv>
    }

    return 0.0f;
}
 8081dcc:	bd08      	pop	{r3, pc}
 8081dce:	bf00      	nop
 8081dd0:	42c80000 	.word	0x42c80000

08081dd4 <_ZNK14CellularSignal7printToER5Print>:

size_t CellularSignal::printTo(Print& p) const
{
 8081dd4:	b570      	push	{r4, r5, r6, lr}
 8081dd6:	460d      	mov	r5, r1
 8081dd8:	4606      	mov	r6, r0
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8081dda:	220a      	movs	r2, #10
 8081ddc:	6881      	ldr	r1, [r0, #8]
 8081dde:	4628      	mov	r0, r5
 8081de0:	f000 ff41 	bl	8082c66 <_ZN5Print5printEii>
    n += p.print(',');
 8081de4:	212c      	movs	r1, #44	; 0x2c
}

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
 8081de6:	4604      	mov	r4, r0
    n += p.print(',');
 8081de8:	4628      	mov	r0, r5
 8081dea:	f000 fed5 	bl	8082b98 <_ZN5Print5printEc>
    n += p.print((*this).qual, DEC);
 8081dee:	220a      	movs	r2, #10

size_t CellularSignal::printTo(Print& p) const
{
    size_t n = 0;
    n += p.print((*this).rssi, DEC);
    n += p.print(',');
 8081df0:	4404      	add	r4, r0
    n += p.print((*this).qual, DEC);
 8081df2:	68f1      	ldr	r1, [r6, #12]
 8081df4:	4628      	mov	r0, r5
 8081df6:	f000 ff36 	bl	8082c66 <_ZN5Print5printEii>
    return n;
}
 8081dfa:	4420      	add	r0, r4
 8081dfc:	bd70      	pop	{r4, r5, r6, pc}

08081dfe <_ZThn4_NK14CellularSignal7printToER5Print>:
    virtual float getStrength() const;
    virtual float getStrengthValue() const;
    virtual float getQuality() const;
    virtual float getQualityValue() const;

    virtual size_t printTo(Print& p) const;
 8081dfe:	f1a0 0004 	sub.w	r0, r0, #4
 8081e02:	f7ff bfe7 	b.w	8081dd4 <_ZNK14CellularSignal7printToER5Print>

08081e06 <_ZN14CellularSignalD0Ev>:
    int rssi = 0;
    int qual = 0;

    CellularSignal() {}
    CellularSignal(const cellular_signal_t& sig);
    virtual ~CellularSignal() {};
 8081e06:	b510      	push	{r4, lr}
 8081e08:	4604      	mov	r4, r0
 8081e0a:	f7fe f948 	bl	808009e <_ZdlPv>
 8081e0e:	4620      	mov	r0, r4
 8081e10:	bd10      	pop	{r4, pc}
	...

08081e14 <_ZNK14CellularSignal10getQualityEv>:

    return 0.0f;
}

float CellularSignal::getQuality() const
{
 8081e14:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.quality >= 0) {
 8081e16:	7d03      	ldrb	r3, [r0, #20]
 8081e18:	b15b      	cbz	r3, 8081e32 <_ZNK14CellularSignal10getQualityEv+0x1e>
 8081e1a:	6a40      	ldr	r0, [r0, #36]	; 0x24
 8081e1c:	2800      	cmp	r0, #0
 8081e1e:	db08      	blt.n	8081e32 <_ZNK14CellularSignal10getQualityEv+0x1e>
        return (float)sig_.quality / 65535.0f * 100.0f;
 8081e20:	f002 f9d8 	bl	80841d4 <__aeabi_i2f>
 8081e24:	4904      	ldr	r1, [pc, #16]	; (8081e38 <_ZNK14CellularSignal10getQualityEv+0x24>)
 8081e26:	f002 fadd 	bl	80843e4 <__aeabi_fdiv>
 8081e2a:	4904      	ldr	r1, [pc, #16]	; (8081e3c <_ZNK14CellularSignal10getQualityEv+0x28>)
 8081e2c:	f002 fa26 	bl	808427c <__aeabi_fmul>
 8081e30:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8081e32:	4803      	ldr	r0, [pc, #12]	; (8081e40 <_ZNK14CellularSignal10getQualityEv+0x2c>)
}
 8081e34:	bd08      	pop	{r3, pc}
 8081e36:	bf00      	nop
 8081e38:	477fff00 	.word	0x477fff00
 8081e3c:	42c80000 	.word	0x42c80000
 8081e40:	bf800000 	.word	0xbf800000

08081e44 <_ZNK14CellularSignal11getStrengthEv>:
{
    return static_cast<hal_net_access_tech_t>(sig_.rat);
}

float CellularSignal::getStrength() const
{
 8081e44:	b508      	push	{r3, lr}
    if (sig_.rat != NET_ACCESS_TECHNOLOGY_NONE && sig_.strength >= 0) {
 8081e46:	7d03      	ldrb	r3, [r0, #20]
 8081e48:	b15b      	cbz	r3, 8081e62 <_ZNK14CellularSignal11getStrengthEv+0x1e>
 8081e4a:	69c0      	ldr	r0, [r0, #28]
 8081e4c:	2800      	cmp	r0, #0
 8081e4e:	db08      	blt.n	8081e62 <_ZNK14CellularSignal11getStrengthEv+0x1e>
        return (float)sig_.strength / 65535.0f * 100.0f;
 8081e50:	f002 f9c0 	bl	80841d4 <__aeabi_i2f>
 8081e54:	4904      	ldr	r1, [pc, #16]	; (8081e68 <_ZNK14CellularSignal11getStrengthEv+0x24>)
 8081e56:	f002 fac5 	bl	80843e4 <__aeabi_fdiv>
 8081e5a:	4904      	ldr	r1, [pc, #16]	; (8081e6c <_ZNK14CellularSignal11getStrengthEv+0x28>)
 8081e5c:	f002 fa0e 	bl	808427c <__aeabi_fmul>
 8081e60:	bd08      	pop	{r3, pc}
    }

    return -1.0f;
 8081e62:	4803      	ldr	r0, [pc, #12]	; (8081e70 <_ZNK14CellularSignal11getStrengthEv+0x2c>)
}
 8081e64:	bd08      	pop	{r3, pc}
 8081e66:	bf00      	nop
 8081e68:	477fff00 	.word	0x477fff00
 8081e6c:	42c80000 	.word	0x42c80000
 8081e70:	bf800000 	.word	0xbf800000

08081e74 <_ZN14CellularSignal21fromHalCellularSignalERK17cellular_signal_t>:
    : sig_(sig)
{
}

bool CellularSignal::fromHalCellularSignal(const cellular_signal_t& sig)
{
 8081e74:	b530      	push	{r4, r5, lr}
    sig_ = sig;
 8081e76:	460d      	mov	r5, r1
 8081e78:	f100 0410 	add.w	r4, r0, #16
 8081e7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8081e7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8081e80:	e895 0003 	ldmia.w	r5, {r0, r1}
 8081e84:	e884 0003 	stmia.w	r4, {r0, r1}
    return true;
}
 8081e88:	2001      	movs	r0, #1
 8081e8a:	bd30      	pop	{r4, r5, pc}

08081e8c <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081e8c:	4770      	bx	lr

08081e8e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
      _M_destroy() noexcept
      { delete this; }

      virtual void*
      _M_get_deleter(const std::type_info&) noexcept
      { return nullptr; }
 8081e8e:	2000      	movs	r0, #0
 8081e90:	4770      	bx	lr

08081e92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
    class __shared_count;


  // Counted ptr with no deleter or allocator support
  template<typename _Ptr, _Lock_policy _Lp>
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
 8081e92:	b510      	push	{r4, lr}
 8081e94:	4604      	mov	r4, r0
 8081e96:	f7fe f902 	bl	808009e <_ZdlPv>
 8081e9a:	4620      	mov	r0, r4
 8081e9c:	bd10      	pop	{r4, pc}

08081e9e <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
      virtual void
      _M_dispose() noexcept
      { delete _M_ptr; }

      virtual void
      _M_destroy() noexcept
 8081e9e:	b508      	push	{r3, lr}
      { delete this; }
 8081ea0:	b108      	cbz	r0, 8081ea6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv+0x8>
 8081ea2:	f7ff fff6 	bl	8081e92 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EED0Ev>
 8081ea6:	bd08      	pop	{r3, pc}

08081ea8 <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081ea8:	b510      	push	{r4, lr}
    {
      if (_M_manager)
 8081eaa:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
 8081eac:	4604      	mov	r4, r0
    {
      if (_M_manager)
 8081eae:	b113      	cbz	r3, 8081eb6 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 8081eb0:	2203      	movs	r2, #3
 8081eb2:	4601      	mov	r1, r0
 8081eb4:	4798      	blx	r3
    }
 8081eb6:	4620      	mov	r0, r4
 8081eb8:	bd10      	pop	{r4, pc}

08081eba <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }

      virtual void
      _M_dispose() noexcept
 8081eba:	b538      	push	{r3, r4, r5, lr}
      { delete _M_ptr; }
 8081ebc:	68c4      	ldr	r4, [r0, #12]
 8081ebe:	b1d4      	cbz	r4, 8081ef6 <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x3c>

      _Tp
      load(memory_order __m = memory_order_seq_cst) const noexcept
      { 
        _Tp tmp;
	__atomic_load(&_M_i, &tmp, __m);
 8081ec0:	7823      	ldrb	r3, [r4, #0]
    ~FutureImpl() {
        // Call destructor of the appropriate unnamed enum's field
        const State s = this->state();
        if (s == State::SUCCEEDED) {
            result_.~ResultT();
        } else if (s == State::FAILED) {
 8081ec2:	2b02      	cmp	r3, #2
 8081ec4:	d102      	bne.n	8081ecc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x12>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8081ec6:	68e0      	ldr	r0, [r4, #12]
 8081ec8:	f7ff fe5e 	bl	8081b88 <free>
      {
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_p, __m);
 8081ecc:	6865      	ldr	r5, [r4, #4]
    // Completion callback types
    typedef typename detail::FutureCallbackTypes<ResultT>::OnSuccess OnSuccessCallback;
    typedef typename detail::FutureCallbackTypes<ResultT>::OnError OnErrorCallback;

    ~FutureImplBase() {
        delete onSuccess_.load(std::memory_order_relaxed);
 8081ece:	b12d      	cbz	r5, 8081edc <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x22>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8081ed0:	4628      	mov	r0, r5
 8081ed2:	f7ff ffe9 	bl	8081ea8 <_ZNSt14_Function_baseD1Ev>
 8081ed6:	4628      	mov	r0, r5
 8081ed8:	f7fe f8e1 	bl	808009e <_ZdlPv>
 8081edc:	68a5      	ldr	r5, [r4, #8]
        delete onError_.load(std::memory_order_relaxed);
 8081ede:	b12d      	cbz	r5, 8081eec <_ZNSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv+0x32>
 8081ee0:	4628      	mov	r0, r5
 8081ee2:	f7ff ffe1 	bl	8081ea8 <_ZNSt14_Function_baseD1Ev>
 8081ee6:	4628      	mov	r0, r5
 8081ee8:	f7fe f8d9 	bl	808009e <_ZdlPv>
 8081eec:	4620      	mov	r0, r4
 8081eee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8081ef2:	f7fe b8d4 	b.w	808009e <_ZdlPv>
 8081ef6:	bd38      	pop	{r3, r4, r5, pc}

08081ef8 <_ZN10CloudClass22call_raw_user_functionEPvPKcS0_>:
}
#endif
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
 8081ef8:	b510      	push	{r4, lr}
 8081efa:	b088      	sub	sp, #32
 8081efc:	4604      	mov	r4, r0
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081efe:	4668      	mov	r0, sp
 8081f00:	f000 ff2e 	bl	8082d60 <_ZN6StringC1EPK19__FlashStringHelper>
    return (*fn)(p);
 8081f04:	4669      	mov	r1, sp
 8081f06:	a804      	add	r0, sp, #16
 8081f08:	f000 ff4c 	bl	8082da4 <_ZN6StringC1ERKS_>
 8081f0c:	a804      	add	r0, sp, #16
 8081f0e:	47a0      	blx	r4
 8081f10:	4604      	mov	r4, r0
 8081f12:	a804      	add	r0, sp, #16
 8081f14:	f000 fedd 	bl	8082cd2 <_ZN6StringD1Ev>
} // namespace

int CloudClass::call_raw_user_function(void* data, const char* param, void* reserved)
{
    user_function_int_str_t* fn = (user_function_int_str_t*)(data);
    String p(param);
 8081f18:	4668      	mov	r0, sp
 8081f1a:	f000 feda 	bl	8082cd2 <_ZN6StringD1Ev>
    return (*fn)(p);
}
 8081f1e:	4620      	mov	r0, r4
 8081f20:	b008      	add	sp, #32
 8081f22:	bd10      	pop	{r4, pc}

08081f24 <_ZN10CloudClass17register_functionEPFiPvPKcS0_ES0_S2_>:
    wiring_event_handler_t* fn = (wiring_event_handler_t*)(handler_data);
    (*fn)(event_name, data);
}

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
 8081f24:	b5f0      	push	{r4, r5, r6, r7, lr}
 8081f26:	4607      	mov	r7, r0
 8081f28:	460e      	mov	r6, r1
 8081f2a:	4615      	mov	r5, r2
 8081f2c:	b085      	sub	sp, #20
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
 8081f2e:	2410      	movs	r4, #16
 8081f30:	4622      	mov	r2, r4
 8081f32:	2100      	movs	r1, #0
 8081f34:	4668      	mov	r0, sp
 8081f36:	f002 fcde 	bl	80848f6 <memset>
    desc.size = sizeof(desc);
    desc.fn = fn;
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8081f3a:	2200      	movs	r2, #0
 8081f3c:	4669      	mov	r1, sp
 8081f3e:	4610      	mov	r0, r2

bool CloudClass::register_function(cloud_function_t fn, void* data, const char* funcKey)
{
    cloud_function_descriptor desc;
    memset(&desc, 0, sizeof(desc));
    desc.size = sizeof(desc);
 8081f40:	f8ad 4000 	strh.w	r4, [sp]
    desc.fn = fn;
 8081f44:	9702      	str	r7, [sp, #8]
    desc.data = (void*)data;
 8081f46:	9603      	str	r6, [sp, #12]
    desc.funcKey = funcKey;
 8081f48:	9501      	str	r5, [sp, #4]
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
 8081f4a:	f7ff fd6d 	bl	8081a28 <spark_function>
}
 8081f4e:	b005      	add	sp, #20
 8081f50:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081f52 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>:
};

template<typename ResultT, typename ContextT = detail::FutureContext>
class Future: public FutureBase<ResultT, ContextT> {
public:
    using FutureBase<ResultT, ContextT>::FutureBase;
 8081f52:	b513      	push	{r0, r1, r4, lr}
 8081f54:	4604      	mov	r4, r0
      }

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
 8081f56:	e891 0005 	ldmia.w	r1, {r0, r2}
	__r._M_pi = _M_pi;
 8081f5a:	2300      	movs	r3, #0
 8081f5c:	604b      	str	r3, [r1, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081f5e:	600b      	str	r3, [r1, #0]
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r) noexcept
	: _M_ptr(__r._M_ptr), _M_refcount(__r._M_refcount)
	{ }

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
 8081f60:	6020      	str	r0, [r4, #0]
      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
	_M_pi = __tmp;
 8081f62:	6062      	str	r2, [r4, #4]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081f64:	a801      	add	r0, sp, #4

      void
      _M_swap(__shared_count& __r) noexcept
      {
	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	__r._M_pi = _M_pi;
 8081f66:	9301      	str	r3, [sp, #4]

      __shared_ptr(__shared_ptr&& __r) noexcept
      : _M_ptr(__r._M_ptr), _M_refcount()
      {
	_M_refcount._M_swap(__r._M_refcount);
	__r._M_ptr = 0;
 8081f68:	9300      	str	r3, [sp, #0]
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081f6a:	f7fe fa3d 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081f6e:	4620      	mov	r0, r4
 8081f70:	b002      	add	sp, #8
 8081f72:	bd10      	pop	{r4, pc}

08081f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>:
	if (_M_pi != nullptr)
	  _M_pi->_M_release();
      }

      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
 8081f74:	680b      	ldr	r3, [r1, #0]
 8081f76:	6003      	str	r3, [r0, #0]
      {
	if (_M_pi != 0)
 8081f78:	b113      	cbz	r3, 8081f80 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_+0xc>
    }

  template<>
    inline void
    _Sp_counted_base<_S_single>::_M_add_ref_copy()
    { ++_M_use_count; }
 8081f7a:	685a      	ldr	r2, [r3, #4]
 8081f7c:	3201      	adds	r2, #1
 8081f7e:	605a      	str	r2, [r3, #4]
      __shared_count(const __shared_count& __r) noexcept
      : _M_pi(__r._M_pi)
      {
	if (_M_pi != 0)
	  _M_pi->_M_add_ref_copy();
      }
 8081f80:	4770      	bx	lr

08081f82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>:
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
    }

    // Unwraps promise from an object pointer created via dataPtr() method
    static Promise<ResultT, ContextT> fromDataPtr(void* data) {
 8081f82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 8081f84:	460c      	mov	r4, r1
 8081f86:	4606      	mov	r6, r0
 8081f88:	460f      	mov	r7, r1
 8081f8a:	f854 3b04 	ldr.w	r3, [r4], #4
 8081f8e:	ad02      	add	r5, sp, #8
 8081f90:	f845 3d08 	str.w	r3, [r5, #-8]!
 8081f94:	4621      	mov	r1, r4
 8081f96:	a801      	add	r0, sp, #4
 8081f98:	f7ff ffec 	bl	8081f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
        auto d = static_cast<detail::FutureImplPtr<ResultT, ContextT>*>(data);
        const Promise<ResultT, ContextT> p(*d);
 8081f9c:	4629      	mov	r1, r5
 8081f9e:	4630      	mov	r0, r6
 8081fa0:	f7ff ffd7 	bl	8081f52 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8081fa4:	a801      	add	r0, sp, #4
 8081fa6:	f7fe fa1f 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8081faa:	4620      	mov	r0, r4
 8081fac:	f7fe fa1c 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
        delete d;
 8081fb0:	4638      	mov	r0, r7
 8081fb2:	f7fe f874 	bl	808009e <_ZdlPv>
        return p;
    }
 8081fb6:	4630      	mov	r0, r6
 8081fb8:	b003      	add	sp, #12
 8081fba:	bdf0      	pop	{r4, r5, r6, r7, pc}

08081fbc <_ZSt4swapISt9_Any_dataEvRT_S2_>:
   *  @param  __b  Another thing of arbitrary type.
   *  @return   Nothing.
  */
  template<typename _Tp>
    inline void
    swap(_Tp& __a, _Tp& __b)
 8081fbc:	b513      	push	{r0, r1, r4, lr}
 8081fbe:	460b      	mov	r3, r1
 8081fc0:	4604      	mov	r4, r0
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8081fc2:	c803      	ldmia	r0, {r0, r1}
 8081fc4:	e88d 0003 	stmia.w	sp, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8081fc8:	e893 0003 	ldmia.w	r3, {r0, r1}
 8081fcc:	e884 0003 	stmia.w	r4, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8081fd0:	e89d 0003 	ldmia.w	sp, {r0, r1}
 8081fd4:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8081fd8:	b002      	add	sp, #8
 8081fda:	bd10      	pop	{r4, pc}

08081fdc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081fdc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081fde:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081fe0:	b90a      	cbnz	r2, 8081fe6 <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_+0xa>
	__throw_bad_function_call();
 8081fe2:	f001 fad8 	bl	8083596 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081fe6:	68c3      	ldr	r3, [r0, #12]
    }
 8081fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8081fec:	4718      	bx	r3

08081fee <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8081fee:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8081ff0:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8081ff2:	f100 0110 	add.w	r1, r0, #16
 8081ff6:	f7ff fff1 	bl	8081fdc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 8081ffa:	bd08      	pop	{r3, pc}

08081ffc <_ZNKSt8functionIFvRKbEEclES1_>:
  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8081ffc:	6882      	ldr	r2, [r0, #8]
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8081ffe:	b510      	push	{r4, lr}
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8082000:	b90a      	cbnz	r2, 8082006 <_ZNKSt8functionIFvRKbEEclES1_+0xa>
	__throw_bad_function_call();
 8082002:	f001 fac8 	bl	8083596 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 8082006:	68c3      	ldr	r3, [r0, #12]
    }
 8082008:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    function<_Res(_ArgTypes...)>::
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
	__throw_bad_function_call();
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 808200c:	4718      	bx	r3

0808200e <_ZNSt17_Function_handlerIFvvESt5_BindIFSt8functionIFvRKbEEbEEE9_M_invokeERKSt9_Any_data>:
    {
      typedef _Function_base::_Base_manager<_Functor> _Base;

     public:
      static void
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 808200e:	b508      	push	{r3, lr}
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 8082010:	6800      	ldr	r0, [r0, #0]
      template<typename _Result, typename... _Args, std::size_t... _Indexes>
	_Result
	__call(tuple<_Args...>&& __args, _Index_tuple<_Indexes...>)
	{
	  return _M_f(_Mu<_Bound_args>()
		      (std::get<_Indexes>(_M_bound_args), __args)...);
 8082012:	f100 0110 	add.w	r1, r0, #16
 8082016:	f7ff fff1 	bl	8081ffc <_ZNKSt8functionIFvRKbEEclES1_>
 808201a:	bd08      	pop	{r3, pc}

0808201c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 808201c:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808201e:	2300      	movs	r3, #0
 8082020:	6083      	str	r3, [r0, #8]
 8082022:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 8082024:	4604      	mov	r4, r0
 8082026:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 8082028:	b12b      	cbz	r3, 8082036 <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 808202a:	2202      	movs	r2, #2
 808202c:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 808202e:	68eb      	ldr	r3, [r5, #12]
 8082030:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 8082032:	68ab      	ldr	r3, [r5, #8]
 8082034:	60a3      	str	r3, [r4, #8]
	}
    }
 8082036:	4620      	mov	r0, r4
 8082038:	bd38      	pop	{r3, r4, r5, pc}
	...

0808203c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>:

    explicit PromiseBase(detail::FutureImplPtr<ResultT, ContextT> ptr) :
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
 808203c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
      __b = _GLIBCXX_MOVE(__tmp);
 8082040:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8082044:	6804      	ldr	r4, [r0, #0]

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 8082046:	f04f 0002 	mov.w	r0, #2
 808204a:	b086      	sub	sp, #24
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808204c:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
      __b = _GLIBCXX_MOVE(__tmp);
 8082050:	808b      	strh	r3, [r1, #4]
 8082052:	2300      	movs	r3, #0
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082054:	680f      	ldr	r7, [r1, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 8082056:	f88d 3000 	strb.w	r3, [sp]
      __b = _GLIBCXX_MOVE(__tmp);
 808205a:	600b      	str	r3, [r1, #0]
 808205c:	e8d4 1f4f 	ldrexb	r1, [r4]
 8082060:	4299      	cmp	r1, r3
 8082062:	d103      	bne.n	808206c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x30>
 8082064:	e8c4 0f45 	strexb	r5, r0, [r4]
 8082068:	2d00      	cmp	r5, #0
 808206a:	d1f7      	bne.n	808205c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x20>
 808206c:	d002      	beq.n	8082074 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x38>
 808206e:	f88d 1000 	strb.w	r1, [sp]
 8082072:	e06b      	b.n	808214c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return std::move(defaultValue);
    }

    void setError(Error error) {
        if (this->changeState(State::FAILED)) {
            new(&error_) Error(std::move(error));
 8082074:	f114 050c 	adds.w	r5, r4, #12
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082078:	bf1c      	itt	ne
 808207a:	60e7      	strne	r7, [r4, #12]
 808207c:	8222      	strhne	r2, [r4, #16]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 808207e:	f3bf 8f5f 	dmb	sy
      __b = _GLIBCXX_MOVE(__tmp);
 8082082:	bf18      	it	ne
 8082084:	461f      	movne	r7, r3
 8082086:	2301      	movs	r3, #1
 8082088:	7063      	strb	r3, [r4, #1]

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 808208a:	f3bf 8f5f 	dmb	sy
 808208e:	f104 0308 	add.w	r3, r4, #8
 8082092:	2000      	movs	r0, #0
 8082094:	e853 6f00 	ldrex	r6, [r3]
 8082098:	e843 0200 	strex	r2, r0, [r3]
 808209c:	2a00      	cmp	r2, #0
 808209e:	d1f9      	bne.n	8082094 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x58>
 80820a0:	f3bf 8f5f 	dmb	sy

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 80820a4:	2e00      	cmp	r6, #0
 80820a6:	d051      	beq.n	808214c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x110>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 80820a8:	f7ff fc8a 	bl	80819c0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 80820ac:	b120      	cbz	r0, 80820b8 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x7c>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 80820ae:	4629      	mov	r1, r5
 80820b0:	4630      	mov	r0, r6
 80820b2:	f7ff ff93 	bl	8081fdc <_ZNKSt8functionIFvRKN8particle5ErrorEEEclES3_>
 80820b6:	e043      	b.n	8082140 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x104>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 80820b8:	4631      	mov	r1, r6
 80820ba:	4668      	mov	r0, sp
 80820bc:	f7ff ffae 	bl	808201c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 80820c0:	68e0      	ldr	r0, [r4, #12]
 80820c2:	f9b4 5010 	ldrsh.w	r5, [r4, #16]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80820c6:	b108      	cbz	r0, 80820cc <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x90>
 80820c8:	f002 fc58 	bl	808497c <strdup>
 80820cc:	9004      	str	r0, [sp, #16]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 80820ce:	2010      	movs	r0, #16
 80820d0:	f8ad 5014 	strh.w	r5, [sp, #20]
 80820d4:	f7fd ffe1 	bl	808009a <_Znwj>
 80820d8:	4605      	mov	r5, r0
 80820da:	b330      	cbz	r0, 808212a <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xee>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80820dc:	f04f 0800 	mov.w	r8, #0
 80820e0:	f8c0 8008 	str.w	r8, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 80820e4:	2018      	movs	r0, #24
 80820e6:	f7fd ffd8 	bl	808009a <_Znwj>
 80820ea:	4604      	mov	r4, r0
 80820ec:	b1c0      	cbz	r0, 8082120 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0xe4>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80820ee:	f8c0 8008 	str.w	r8, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 80820f2:	4601      	mov	r1, r0
 80820f4:	4668      	mov	r0, sp
 80820f6:	f7ff ff61 	bl	8081fbc <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 80820fa:	9b02      	ldr	r3, [sp, #8]
      __a = _GLIBCXX_MOVE(__b);
 80820fc:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 80820fe:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082100:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8082102:	9202      	str	r2, [sp, #8]
 8082104:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082106:	60e3      	str	r3, [r4, #12]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082108:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 808210c:	9203      	str	r2, [sp, #12]
 808210e:	82a3      	strh	r3, [r4, #20]
      __b = _GLIBCXX_MOVE(__tmp);
 8082110:	f64f 739c 	movw	r3, #65436	; 0xff9c
 8082114:	f8ad 3014 	strh.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082118:	9b04      	ldr	r3, [sp, #16]
      __b = _GLIBCXX_MOVE(__tmp);
 808211a:	f8cd 8010 	str.w	r8, [sp, #16]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 808211e:	6123      	str	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082120:	4b0d      	ldr	r3, [pc, #52]	; (8082158 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x11c>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082122:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082124:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082126:	4b0d      	ldr	r3, [pc, #52]	; (808215c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x120>)
 8082128:	60ab      	str	r3, [r5, #8]
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808212a:	9804      	ldr	r0, [sp, #16]
 808212c:	f7ff fd2c 	bl	8081b88 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082130:	4668      	mov	r0, sp
 8082132:	f7ff feb9 	bl	8081ea8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 8082136:	2200      	movs	r2, #0
 8082138:	4629      	mov	r1, r5
 808213a:	4809      	ldr	r0, [pc, #36]	; (8082160 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE+0x124>)
 808213c:	f7ff fc48 	bl	80819d0 <application_thread_invoke>
 8082140:	4630      	mov	r0, r6
 8082142:	f7ff feb1 	bl	8081ea8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 8082146:	4630      	mov	r0, r6
 8082148:	f7fd ffa9 	bl	808009e <_ZdlPv>
 808214c:	4638      	mov	r0, r7
 808214e:	f7ff fd1b 	bl	8081b88 <free>
            p_(std::move(ptr)) {
    }

    void setError(Error error) {
        p_->setError(std::move(error));
    }
 8082152:	b006      	add	sp, #24
 8082154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082158:	08081fef 	.word	0x08081fef
 808215c:	0808224d 	.word	0x0808224d
 8082160:	08081bff 	.word	0x08081bff

08082164 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE>:

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8082168:	b08b      	sub	sp, #44	; 0x2c
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 808216a:	ad07      	add	r5, sp, #28
 808216c:	f04f 0b00 	mov.w	fp, #0
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082170:	4606      	mov	r6, r0
 8082172:	4699      	mov	r9, r3
// can be acquired via Future
template<typename ResultT, typename ContextT>
class PromiseBase {
public:
    PromiseBase() :
            p_(new detail::FutureImpl<ResultT, ContextT>(State::RUNNING)) {
 8082174:	2014      	movs	r0, #20
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8082176:	230c      	movs	r3, #12
    desc.data = (void*)data;
    desc.funcKey = funcKey;
    return spark_function(NULL, (user_function_int_str_t*)&desc, NULL);
}

Future<bool> CloudClass::publish_event(const char *eventName, const char *eventData, int ttl, PublishFlags flags) {
 8082178:	460f      	mov	r7, r1
 808217a:	4690      	mov	r8, r2
 808217c:	f89d a050 	ldrb.w	sl, [sp, #80]	; 0x50
#ifndef SPARK_NO_CLOUD
    spark_send_event_data d = { sizeof(spark_send_event_data) };
 8082180:	f8c5 b004 	str.w	fp, [r5, #4]
 8082184:	f8c5 b008 	str.w	fp, [r5, #8]
 8082188:	9307      	str	r3, [sp, #28]
 808218a:	f7fd ff86 	bl	808009a <_Znwj>
 808218e:	4604      	mov	r4, r0
 8082190:	b138      	cbz	r0, 80821a2 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x3e>
      ~atomic() noexcept = default;
      atomic(const atomic&) = delete;
      atomic& operator=(const atomic&) = delete;
      atomic& operator=(const atomic&) volatile = delete;

      constexpr atomic(_Tp __i) noexcept : _M_i(__i) { }
 8082192:	f880 b000 	strb.w	fp, [r0]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
 8082196:	f880 b001 	strb.w	fp, [r0, #1]
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __pointer_type convertible to _M_p.
      constexpr __atomic_base(__pointer_type __p) noexcept : _M_p (__p) { }
 808219a:	f8c0 b004 	str.w	fp, [r0, #4]
 808219e:	f8c0 b008 	str.w	fp, [r0, #8]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80821a2:	2300      	movs	r3, #0
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80821a4:	2010      	movs	r0, #16
      : _M_ptr(0), _M_refcount()
      { }

      template<typename _Tp1>
	explicit __shared_ptr(_Tp1* __p)
        : _M_ptr(__p), _M_refcount(__p)
 80821a6:	9403      	str	r4, [sp, #12]
      constexpr __shared_count() noexcept : _M_pi(0)
      { }

      template<typename _Ptr>
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
 80821a8:	9304      	str	r3, [sp, #16]
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80821aa:	f7fd ff76 	bl	808009a <_Znwj>
 80821ae:	b128      	cbz	r0, 80821bc <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x58>
    class _Sp_counted_base
    : public _Mutex_base<_Lp>
    {
    public:  
      _Sp_counted_base() noexcept
      : _M_use_count(1), _M_weak_count(1) { }
 80821b0:	2301      	movs	r3, #1
 80821b2:	6043      	str	r3, [r0, #4]
 80821b4:	6083      	str	r3, [r0, #8]
    class _Sp_counted_ptr final : public _Sp_counted_base<_Lp>
    {
    public:
      explicit
      _Sp_counted_ptr(_Ptr __p) noexcept
      : _M_ptr(__p) { }
 80821b6:	4b23      	ldr	r3, [pc, #140]	; (8082244 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe0>)
 80821b8:	60c4      	str	r4, [r0, #12]
 80821ba:	6003      	str	r3, [r0, #0]

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
 80821bc:	4b22      	ldr	r3, [pc, #136]	; (8082248 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xe4>)
        explicit
	__shared_count(_Ptr __p) : _M_pi(0)
	{
	  __try
	    {
	      _M_pi = new _Sp_counted_ptr<_Ptr, _Lp>(__p);
 80821be:	9004      	str	r0, [sp, #16]
    }

    // Wraps this promise into an object pointer that can be passed to a C function
    void* dataPtr() const {
        // TODO: Use custom reference counting object to avoid unnecessary memory allocation
        return new detail::FutureImplPtr<ResultT, ContextT>(p_);
 80821c0:	2008      	movs	r0, #8
 80821c2:	9308      	str	r3, [sp, #32]
 80821c4:	f7fd ff69 	bl	808009a <_Znwj>
 80821c8:	4604      	mov	r4, r0
 80821ca:	b128      	cbz	r0, 80821d8 <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0x74>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 80821cc:	9b03      	ldr	r3, [sp, #12]
 80821ce:	a904      	add	r1, sp, #16
 80821d0:	f840 3b04 	str.w	r3, [r0], #4
 80821d4:	f7ff fece 	bl	8081f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    d.handler_data = p.dataPtr();

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80821d8:	9500      	str	r5, [sp, #0]
 80821da:	fa5f f38a 	uxtb.w	r3, sl
 80821de:	464a      	mov	r2, r9
 80821e0:	4641      	mov	r1, r8
 80821e2:	4638      	mov	r0, r7
    spark_send_event_data d = { sizeof(spark_send_event_data) };

    // Completion handler
    Promise<bool> p;
    d.handler_callback = publishCompletionCallback;
    d.handler_data = p.dataPtr();
 80821e4:	9409      	str	r4, [sp, #36]	; 0x24

    if (!spark_send_event(eventName, eventData, ttl, flags.value(), &d) && !p.isDone()) {
 80821e6:	f7ff fc4f 	bl	8081a88 <spark_send_event>
 80821ea:	b9b8      	cbnz	r0, 808221c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>
      {
       memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_release);
	__glibcxx_assert(__b != memory_order_acq_rel);

	return __atomic_load_n(&_M_i, __m);
 80821ec:	9b03      	ldr	r3, [sp, #12]
 80821ee:	785b      	ldrb	r3, [r3, #1]
 80821f0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80821f4:	b993      	cbnz	r3, 808221c <_ZN10CloudClass13publish_eventEPKcS1_iN8particle5FlagsI15PublishFlagTypehEE+0xb8>

} // namespace particle

inline particle::Error::Error(Type type) :
        msg_(nullptr),
        type_(type) {
 80821f6:	f64f 739c 	movw	r3, #65436	; 0xff9c
        // Set generic error code in case completion callback wasn't invoked for some reason
        p.setError(Error::UNKNOWN);
 80821fa:	a905      	add	r1, sp, #20
 80821fc:	a803      	add	r0, sp, #12
 80821fe:	9205      	str	r2, [sp, #20]
 8082200:	f8ad 3018 	strh.w	r3, [sp, #24]
 8082204:	f7ff ff1a 	bl	808203c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 8082208:	9805      	ldr	r0, [sp, #20]
 808220a:	f7ff fcbd 	bl	8081b88 <free>
        p.fromDataPtr(d.handler_data); // Free wrapper object
 808220e:	a805      	add	r0, sp, #20
 8082210:	9909      	ldr	r1, [sp, #36]	; 0x24
 8082212:	f7ff feb6 	bl	8081f82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082216:	a806      	add	r0, sp, #24
 8082218:	f7fe f8e6 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
      template<typename _Tp1>
	__shared_ptr(const __shared_ptr<_Tp1, _Lp>& __r, _Tp* __p) noexcept
	: _M_ptr(__p), _M_refcount(__r._M_refcount) // never throws
	{ }

      __shared_ptr(const __shared_ptr&) noexcept = default;
 808221c:	9b03      	ldr	r3, [sp, #12]
 808221e:	a904      	add	r1, sp, #16
 8082220:	a806      	add	r0, sp, #24
 8082222:	9305      	str	r3, [sp, #20]
 8082224:	f7ff fea6 	bl	8081f74 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EEC1ERKS2_>
    bool isDone() const {
        return p_->isDone();
    }

    Future<ResultT, ContextT> future() const {
        return Future<ResultT, ContextT>(p_);
 8082228:	a905      	add	r1, sp, #20
 808222a:	4630      	mov	r0, r6
 808222c:	f7ff fe91 	bl	8081f52 <_ZN8particle6FutureIbNS_6detail13FutureContextEEC1ESt10shared_ptrINS1_10FutureImplIbS2_EEE>
      __shared_ptr& operator=(const __shared_ptr&) noexcept = default;
      ~__shared_ptr() = default;
 8082230:	a806      	add	r0, sp, #24
 8082232:	f7fe f8d9 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
 8082236:	a804      	add	r0, sp, #16
 8082238:	f7fe f8d6 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>

    return p.future();
#else
    return Future<bool>(Error::NOT_SUPPORTED);
#endif
}
 808223c:	4630      	mov	r0, r6
 808223e:	b00b      	add	sp, #44	; 0x2c
 8082240:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8082244:	08085650 	.word	0x08085650
 8082248:	080823b5 	.word	0x080823b5

0808224c <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 808224c:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 808224e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082250:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 8082252:	d006      	beq.n	8082262 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x16>
 8082254:	2a03      	cmp	r2, #3
 8082256:	d017      	beq.n	8082288 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x3c>
 8082258:	2a01      	cmp	r2, #1
 808225a:	d120      	bne.n	808229e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 808225c:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 808225e:	6003      	str	r3, [r0, #0]
	      break;
 8082260:	e01d      	b.n	808229e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082262:	2018      	movs	r0, #24
 8082264:	680e      	ldr	r6, [r1, #0]
 8082266:	f7fd ff18 	bl	808009a <_Znwj>
 808226a:	4605      	mov	r5, r0
 808226c:	b150      	cbz	r0, 8082284 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x38>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 808226e:	4631      	mov	r1, r6
 8082270:	f7ff fed4 	bl	808201c <_ZNSt8functionIFvRKN8particle5ErrorEEEC1ERKS5_>
inline particle::Error::Error(const char* msg) :
        Error(UNKNOWN, msg) {
}

inline particle::Error::Error(const Error& error) :
        Error(error.type_, error.msg_) {
 8082274:	6930      	ldr	r0, [r6, #16]
 8082276:	f9b6 7014 	ldrsh.w	r7, [r6, #20]
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 808227a:	b108      	cbz	r0, 8082280 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x34>
 808227c:	f002 fb7e 	bl	808497c <strdup>
 8082280:	6128      	str	r0, [r5, #16]
 8082282:	82af      	strh	r7, [r5, #20]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 8082284:	6025      	str	r5, [r4, #0]
 8082286:	e00a      	b.n	808229e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082288:	6804      	ldr	r4, [r0, #0]
 808228a:	b144      	cbz	r4, 808229e <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKN8particle5ErrorEEES4_EEE10_M_managerERSt9_Any_dataRKSC_St18_Manager_operation+0x52>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 808228c:	6920      	ldr	r0, [r4, #16]
 808228e:	f7ff fc7b 	bl	8081b88 <free>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082292:	4620      	mov	r0, r4
 8082294:	f7ff fe08 	bl	8081ea8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 8082298:	4620      	mov	r0, r4
 808229a:	f7fd ff00 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 808229e:	2000      	movs	r0, #0
 80822a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080822a2 <_ZNSt8functionIFvRKbEEC1ERKS3_>:
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80822a2:	b538      	push	{r3, r4, r5, lr}
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 80822a4:	2300      	movs	r3, #0
 80822a6:	6083      	str	r3, [r0, #8]
 80822a8:	688b      	ldr	r3, [r1, #8]
      _Invoker_type _M_invoker;
  };

  // Out-of-line member definitions.
  template<typename _Res, typename... _ArgTypes>
    function<_Res(_ArgTypes...)>::
 80822aa:	4604      	mov	r4, r0
 80822ac:	460d      	mov	r5, r1
    function(const function& __x)
    : _Function_base()
    {
      if (static_cast<bool>(__x))
 80822ae:	b12b      	cbz	r3, 80822bc <_ZNSt8functionIFvRKbEEC1ERKS3_+0x1a>
	{
	  __x._M_manager(_M_functor, __x._M_functor, __clone_functor);
 80822b0:	2202      	movs	r2, #2
 80822b2:	4798      	blx	r3
	  _M_invoker = __x._M_invoker;
 80822b4:	68eb      	ldr	r3, [r5, #12]
 80822b6:	60e3      	str	r3, [r4, #12]
	  _M_manager = __x._M_manager;
 80822b8:	68ab      	ldr	r3, [r5, #8]
 80822ba:	60a3      	str	r3, [r4, #8]
	}
    }
 80822bc:	4620      	mov	r0, r4
 80822be:	bd38      	pop	{r3, r4, r5, pc}

080822c0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation>:
      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
		   _Manager_operation __op)
	{
	  switch (__op)
 80822c0:	2a02      	cmp	r2, #2
	  delete __victim._M_access<_Functor*>();
	}

      public:
	static bool
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 80822c2:	b570      	push	{r4, r5, r6, lr}
 80822c4:	4604      	mov	r4, r0
		   _Manager_operation __op)
	{
	  switch (__op)
 80822c6:	d006      	beq.n	80822d6 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x16>
 80822c8:	2a03      	cmp	r2, #3
 80822ca:	d011      	beq.n	80822f0 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x30>
 80822cc:	2a01      	cmp	r2, #1
 80822ce:	d117      	bne.n	8082300 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	static _Functor*
	_M_get_pointer(const _Any_data& __source)
	{
	  const _Functor* __ptr =
	    __stored_locally? std::__addressof(__source._M_access<_Functor>())
	    /* have stored a pointer */ : __source._M_access<_Functor*>();
 80822d0:	680b      	ldr	r3, [r1, #0]
	    case __get_type_info:
	      __dest._M_access<const type_info*>() = &typeid(_Functor);
	      break;
#endif
	    case __get_functor_ptr:
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 80822d2:	6003      	str	r3, [r0, #0]
	      break;
 80822d4:	e014      	b.n	8082300 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80822d6:	2014      	movs	r0, #20
 80822d8:	680e      	ldr	r6, [r1, #0]
 80822da:	f7fd fede 	bl	808009a <_Znwj>
 80822de:	4605      	mov	r5, r0
 80822e0:	b120      	cbz	r0, 80822ec <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x2c>
      template<typename... _Args>
	explicit _Bind(_Functor&& __f, _Args&&... __args)
	: _M_f(std::move(__f)), _M_bound_args(std::forward<_Args>(__args)...)
	{ }

      _Bind(const _Bind&) = default;
 80822e2:	4631      	mov	r1, r6
 80822e4:	f7ff ffdd 	bl	80822a2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
 80822e8:	7c33      	ldrb	r3, [r6, #16]
 80822ea:	742b      	strb	r3, [r5, #16]
	// Clone a function object that is not location-invariant or
	// that cannot fit into an _Any_data structure.
	static void
	_M_clone(_Any_data& __dest, const _Any_data& __source, false_type)
	{
	  __dest._M_access<_Functor*>() =
 80822ec:	6025      	str	r5, [r4, #0]
 80822ee:	e007      	b.n	8082300 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80822f0:	6804      	ldr	r4, [r0, #0]
 80822f2:	b12c      	cbz	r4, 8082300 <_ZNSt14_Function_base13_Base_managerISt5_BindIFSt8functionIFvRKbEEbEEE10_M_managerERSt9_Any_dataRKSA_St18_Manager_operation+0x40>
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80822f4:	4620      	mov	r0, r4
 80822f6:	f7ff fdd7 	bl	8081ea8 <_ZNSt14_Function_baseD1Ev>

	// Destroying an object located on the heap.
	static void
	_M_destroy(_Any_data& __victim, false_type)
	{
	  delete __victim._M_access<_Functor*>();
 80822fa:	4620      	mov	r0, r4
 80822fc:	f7fd fecf 	bl	808009e <_ZdlPv>
	    case __destroy_functor:
	      _M_destroy(__dest, _Local_storage());
	      break;
	    }
	  return false;
	}
 8082300:	2000      	movs	r0, #0
 8082302:	bd70      	pop	{r4, r5, r6, pc}

08082304 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>:
        delete callbackPtr; // Delete old callback
    }

    // Takes a callback from its atomic wrapper and invokes it
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
 8082304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082306:	460c      	mov	r4, r1

      _GLIBCXX_ALWAYS_INLINE __pointer_type
      exchange(__pointer_type __p,
	       memory_order __m = memory_order_seq_cst) noexcept
      {
	return __atomic_exchange_n(&_M_p, __p, __m);
 8082308:	f3bf 8f5f 	dmb	sy
 808230c:	b087      	sub	sp, #28
 808230e:	2300      	movs	r3, #0
 8082310:	e850 6f00 	ldrex	r6, [r0]
 8082314:	e840 3200 	strex	r2, r3, [r0]
 8082318:	2a00      	cmp	r2, #0
 808231a:	d1f9      	bne.n	8082310 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xc>
 808231c:	f3bf 8f5f 	dmb	sy
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
 8082320:	2e00      	cmp	r6, #0
 8082322:	d03e      	beq.n	80823a2 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x9e>
        return (application_thread_invoke(callback, data, nullptr) == 0);
    }

    // Returns true if current thread is the application thread
    static bool isApplicationThreadCurrent() {
        return (application_thread_current(nullptr) != 0);
 8082324:	4618      	mov	r0, r3
 8082326:	f7ff fb4b 	bl	80819c0 <application_thread_current>
    }

    // Invokes std::function in the application context
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(const std::function<FunctionT>& callback, ArgsT&&... args) {
        if (ContextT::isApplicationThreadCurrent()) {
 808232a:	4607      	mov	r7, r0
 808232c:	b120      	cbz	r0, 8082338 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x34>
            callback(std::forward<ArgsT>(args)...); // Synchronous call
 808232e:	4621      	mov	r1, r4
 8082330:	4630      	mov	r0, r6
 8082332:	f7ff fe63 	bl	8081ffc <_ZNKSt8functionIFvRKbEEclES1_>
 8082336:	e02e      	b.n	8082396 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x92>
	}

     public:
      template<typename... _Args>
	explicit _Bind(const _Functor& __f, _Args&&... __args)
	: _M_f(__f), _M_bound_args(std::forward<_Args>(__args)...)
 8082338:	4631      	mov	r1, r6
 808233a:	a801      	add	r0, sp, #4
 808233c:	f7ff ffb1 	bl	80822a2 <_ZNSt8functionIFvRKbEEC1ERKS3_>
      constexpr _Head_base(const _Head_base&) = default;
      constexpr _Head_base(_Head_base&&) = default;

      template<typename _UHead>
        constexpr _Head_base(_UHead&& __h)
	: _M_head_impl(std::forward<_UHead>(__h)) { }
 8082340:	7823      	ldrb	r3, [r4, #0]
        } else {
            // Bind all arguments and wrap resulting function into a pointer
            auto callbackPtr = new std::function<void()>(std::bind(callback, std::forward<ArgsT>(args)...));
 8082342:	2010      	movs	r0, #16
 8082344:	f88d 3014 	strb.w	r3, [sp, #20]
 8082348:	f7fd fea7 	bl	808009a <_Znwj>
 808234c:	4605      	mov	r5, r0
 808234e:	b1d0      	cbz	r0, 8082386 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x82>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082350:	6087      	str	r7, [r0, #8]
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 8082352:	2014      	movs	r0, #20
 8082354:	f7fd fea1 	bl	808009a <_Znwj>
 8082358:	4604      	mov	r4, r0
 808235a:	b178      	cbz	r0, 808237c <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0x78>
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 808235c:	6087      	str	r7, [r0, #8]
       *  Swap the targets of @c this function object and @a __f. This
       *  function will not throw an %exception.
       */
      void swap(function& __x)
      {
	std::swap(_M_functor, __x._M_functor);
 808235e:	4601      	mov	r1, r0
 8082360:	a801      	add	r0, sp, #4
 8082362:	f7ff fe2b 	bl	8081fbc <_ZSt4swapISt9_Any_dataEvRT_S2_>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8082366:	9b03      	ldr	r3, [sp, #12]
      __a = _GLIBCXX_MOVE(__b);
 8082368:	68a2      	ldr	r2, [r4, #8]
      __b = _GLIBCXX_MOVE(__tmp);
 808236a:	60a3      	str	r3, [r4, #8]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 808236c:	9b04      	ldr	r3, [sp, #16]
      __a = _GLIBCXX_MOVE(__b);
 808236e:	9203      	str	r2, [sp, #12]
 8082370:	68e2      	ldr	r2, [r4, #12]
      __b = _GLIBCXX_MOVE(__tmp);
 8082372:	60e3      	str	r3, [r4, #12]
 8082374:	f89d 3014 	ldrb.w	r3, [sp, #20]
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
      __a = _GLIBCXX_MOVE(__b);
 8082378:	9204      	str	r2, [sp, #16]
 808237a:	7423      	strb	r3, [r4, #16]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 808237c:	4b0a      	ldr	r3, [pc, #40]	; (80823a8 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa4>)
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
	{ new (__functor._M_access()) _Functor(std::move(__f)); }

	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
 808237e:	602c      	str	r4, [r5, #0]
	typedef _Function_handler<_Signature_type, _Functor> _My_handler;

	if (_My_handler::_M_not_empty_function(__f))
	  {
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
	    _M_invoker = &_My_handler::_M_invoke;
 8082380:	60eb      	str	r3, [r5, #12]
	    _M_manager = &_My_handler::_M_manager;
 8082382:	4b0a      	ldr	r3, [pc, #40]	; (80823ac <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xa8>)
 8082384:	60ab      	str	r3, [r5, #8]
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 8082386:	a801      	add	r0, sp, #4
 8082388:	f7ff fd8e 	bl	8081ea8 <_ZNSt14_Function_baseD1Ev>
        spark_process();
    }

    // Asynchronously invokes a callback in the application context
    static bool invokeApplicationCallback(void (*callback)(void* data), void* data) {
        return (application_thread_invoke(callback, data, nullptr) == 0);
 808238c:	2200      	movs	r2, #0
 808238e:	4629      	mov	r1, r5
 8082390:	4807      	ldr	r0, [pc, #28]	; (80823b0 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_+0xac>)
 8082392:	f7ff fb1d 	bl	80819d0 <application_thread_invoke>
 8082396:	4630      	mov	r0, r6
 8082398:	f7ff fd86 	bl	8081ea8 <_ZNSt14_Function_baseD1Ev>
    template<typename FunctionT, typename... ArgsT>
    static void invokeCallback(std::atomic<std::function<FunctionT>*>& wrapper, ArgsT&&... args) {
        std::function<FunctionT>* callbackPtr = wrapper.exchange(nullptr, std::memory_order_acq_rel);
        if (callbackPtr) {
            invokeCallback(*callbackPtr, std::forward<ArgsT>(args)...);
            delete callbackPtr;
 808239c:	4630      	mov	r0, r6
 808239e:	f7fd fe7e 	bl	808009e <_ZdlPv>
        }
    }
 80823a2:	b007      	add	sp, #28
 80823a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80823a6:	bf00      	nop
 80823a8:	0808200f 	.word	0x0808200f
 80823ac:	080822c1 	.word	0x080822c1
 80823b0:	08081bff 	.word	0x08081bff

080823b4 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_>:
namespace {

using namespace particle;

#ifndef SPARK_NO_CLOUD
void publishCompletionCallback(int error, const void* data, void* callbackData, void* reserved) {
 80823b4:	b530      	push	{r4, r5, lr}
 80823b6:	4604      	mov	r4, r0
 80823b8:	b085      	sub	sp, #20
 80823ba:	460d      	mov	r5, r1
    auto p = Promise<bool>::fromDataPtr(callbackData);
 80823bc:	4668      	mov	r0, sp
 80823be:	4611      	mov	r1, r2
 80823c0:	f7ff fddf 	bl	8081f82 <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE11fromDataPtrEPv>
    if (error != Error::NONE) {
 80823c4:	b17c      	cbz	r4, 80823e6 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x32>
        p.setError(Error((Error::Type)error, (const char*)data));
 80823c6:	b224      	sxth	r4, r4
        type_(type) {
}

inline particle::Error::Error(Type type, const char* msg) :
        msg_(msg ? (const char*)strdup(msg) : nullptr),
        type_(type) {
 80823c8:	4628      	mov	r0, r5
 80823ca:	b10d      	cbz	r5, 80823d0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x1c>
 80823cc:	f002 fad6 	bl	808497c <strdup>
 80823d0:	9002      	str	r0, [sp, #8]
 80823d2:	a902      	add	r1, sp, #8
 80823d4:	4668      	mov	r0, sp
 80823d6:	f8ad 400c 	strh.w	r4, [sp, #12]
 80823da:	f7ff fe2f 	bl	808203c <_ZN8particle11PromiseBaseIbNS_6detail13FutureContextEE8setErrorENS_5ErrorE>
        Error() {
    swap(*this, error);
}

inline particle::Error::~Error() {
    free((void*)msg_);
 80823de:	9802      	ldr	r0, [sp, #8]
 80823e0:	f7ff fbd2 	bl	8081b88 <free>
 80823e4:	e01d      	b.n	8082422 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>

      bool
      compare_exchange_strong(_Tp& __e, _Tp __i, memory_order __s, 
			      memory_order __f) noexcept
      {
	return __atomic_compare_exchange(&_M_i, &__e, &__i, false, __s, __f);
 80823e6:	f04f 0201 	mov.w	r2, #1
 80823ea:	9800      	ldr	r0, [sp, #0]
            onSuccess_(nullptr),
            onError_(nullptr) {
    }

    bool changeState(State state) {
        State s = State::RUNNING; // Expected state
 80823ec:	f88d 4008 	strb.w	r4, [sp, #8]
 80823f0:	e8d0 3f4f 	ldrexb	r3, [r0]
 80823f4:	42a3      	cmp	r3, r4
 80823f6:	d103      	bne.n	8082400 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x4c>
 80823f8:	e8c0 2f41 	strexb	r1, r2, [r0]
 80823fc:	2900      	cmp	r1, #0
 80823fe:	d1f7      	bne.n	80823f0 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x3c>
 8082400:	d002      	beq.n	8082408 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x54>
 8082402:	f88d 3008 	strb.w	r3, [sp, #8]
 8082406:	e00c      	b.n	8082422 <_ZN12_GLOBAL__N_125publishCompletionCallbackEiPKvPvS2_+0x6e>
        }
    }

    void setResult(ResultT result) {
        if (this->changeState(State::SUCCEEDED)) {
            new(&result_) ResultT(std::move(result));
 8082408:	f110 010c 	adds.w	r1, r0, #12
 808240c:	f04f 0301 	mov.w	r3, #1
 8082410:	bf18      	it	ne
 8082412:	7303      	strbne	r3, [r0, #12]
        memory_order __b = __m & __memory_order_mask;
	__glibcxx_assert(__b != memory_order_acquire);
	__glibcxx_assert(__b != memory_order_acq_rel);
	__glibcxx_assert(__b != memory_order_consume);

	__atomic_store_n(&_M_i, __i, __m);
 8082414:	f3bf 8f5f 	dmb	sy
            this->releaseDone();
            this->invokeCallback(this->onSuccess_, result_);
 8082418:	3004      	adds	r0, #4
 808241a:	f800 3c03 	strb.w	r3, [r0, #-3]
 808241e:	f7ff ff71 	bl	8082304 <_ZN8particle6detail14FutureImplBaseIbNS0_13FutureContextEE14invokeCallbackIFvRKbEIRbEEEvRSt6atomicIPSt8functionIT_EEDpOT0_>
 8082422:	a801      	add	r0, sp, #4
 8082424:	f7fd ffe0 	bl	80803e8 <_ZNSt14__shared_countILN9__gnu_cxx12_Lock_policyE0EED1Ev>
    } else {
        p.setResult(true);
    }
}
 8082428:	b005      	add	sp, #20
 808242a:	bd30      	pop	{r4, r5, pc}

0808242c <_ZN9FuelGauge4lockEv>:
    i2c_.write(LSB);
    i2c_.endTransmission(true);
}

bool FuelGauge::lock() {
    return i2c_.lock();
 808242c:	6800      	ldr	r0, [r0, #0]
 808242e:	f000 b8ce 	b.w	80825ce <_ZN7TwoWire4lockEv>

08082432 <_ZN9FuelGaugeC1ER7TwoWireb>:
FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
{
}

FuelGauge::FuelGauge(TwoWire& i2c, bool _lock)
 8082432:	b510      	push	{r4, lr}
 8082434:	4604      	mov	r4, r0
    : i2c_(i2c),
      lock_(_lock) {
 8082436:	6001      	str	r1, [r0, #0]
 8082438:	7102      	strb	r2, [r0, #4]

    if (lock_) {
 808243a:	b10a      	cbz	r2, 8082440 <_ZN9FuelGaugeC1ER7TwoWireb+0xe>
        lock();
 808243c:	f7ff fff6 	bl	808242c <_ZN9FuelGauge4lockEv>
    }
}
 8082440:	4620      	mov	r0, r4
 8082442:	bd10      	pop	{r4, pc}

08082444 <_ZN9FuelGaugeC1Eb>:
    return &Wire;
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
 8082444:	b538      	push	{r3, r4, r5, lr}
 8082446:	4604      	mov	r4, r0
 8082448:	460d      	mov	r5, r1
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808244a:	f001 f839 	bl	80834c0 <_Z20__fetch_global_Wire3v>
}

} // anonymous

FuelGauge::FuelGauge(bool _lock)
        : FuelGauge(*fuelWireInstance(), _lock)
 808244e:	462a      	mov	r2, r5
 8082450:	4601      	mov	r1, r0
 8082452:	4620      	mov	r0, r4
 8082454:	f7ff ffed 	bl	8082432 <_ZN9FuelGaugeC1ER7TwoWireb>
{
}
 8082458:	4620      	mov	r0, r4
 808245a:	bd38      	pop	{r3, r4, r5, pc}

0808245c <_ZN9FuelGauge6unlockEv>:
bool FuelGauge::lock() {
    return i2c_.lock();
}

bool FuelGauge::unlock() {
	return i2c_.unlock();
 808245c:	6800      	ldr	r0, [r0, #0]
 808245e:	f000 b8bf 	b.w	80825e0 <_ZN7TwoWire6unlockEv>

08082462 <_ZN9FuelGaugeD1Ev>:
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8082462:	b510      	push	{r4, lr}
{
    if (lock_) {
 8082464:	7903      	ldrb	r3, [r0, #4]
    if (lock_) {
        lock();
    }
}

FuelGauge::~FuelGauge()
 8082466:	4604      	mov	r4, r0
{
    if (lock_) {
 8082468:	b10b      	cbz	r3, 808246e <_ZN9FuelGaugeD1Ev+0xc>
        unlock();
 808246a:	f7ff fff7 	bl	808245c <_ZN9FuelGauge6unlockEv>
    }
}
 808246e:	4620      	mov	r0, r4
 8082470:	bd10      	pop	{r4, pc}

08082472 <_ZN9FuelGauge12readRegisterEhRhS0_>:
void FuelGauge::readConfigRegister(byte &MSB, byte &LSB) {
	readRegister(CONFIG_REGISTER, MSB, LSB);
}


void FuelGauge::readRegister(byte startAddress, byte &MSB, byte &LSB) {
 8082472:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082474:	4604      	mov	r4, r0
 8082476:	460f      	mov	r7, r1
 8082478:	4616      	mov	r6, r2
 808247a:	461d      	mov	r5, r3
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
      { _M_device.lock(); }
 808247c:	f7ff ffd6 	bl	808242c <_ZN9FuelGauge4lockEv>
    std::lock_guard<FuelGauge> l(*this);
    i2c_.beginTransmission(MAX17043_ADDRESS);
 8082480:	6820      	ldr	r0, [r4, #0]
 8082482:	2136      	movs	r1, #54	; 0x36
 8082484:	f000 f898 	bl	80825b8 <_ZN7TwoWire17beginTransmissionEi>
    i2c_.write(startAddress);
 8082488:	6820      	ldr	r0, [r4, #0]
 808248a:	4639      	mov	r1, r7
 808248c:	6803      	ldr	r3, [r0, #0]
 808248e:	689b      	ldr	r3, [r3, #8]
 8082490:	4798      	blx	r3
    i2c_.endTransmission(true);
 8082492:	2101      	movs	r1, #1
 8082494:	6820      	ldr	r0, [r4, #0]
 8082496:	f000 f892 	bl	80825be <_ZN7TwoWire15endTransmissionEh>

    i2c_.requestFrom(MAX17043_ADDRESS, 2, true);
 808249a:	2202      	movs	r2, #2
 808249c:	2136      	movs	r1, #54	; 0x36
 808249e:	2301      	movs	r3, #1
 80824a0:	6820      	ldr	r0, [r4, #0]
 80824a2:	f000 f880 	bl	80825a6 <_ZN7TwoWire11requestFromEiii>
    MSB = i2c_.read();
 80824a6:	6820      	ldr	r0, [r4, #0]
 80824a8:	6803      	ldr	r3, [r0, #0]
 80824aa:	695b      	ldr	r3, [r3, #20]
 80824ac:	4798      	blx	r3
 80824ae:	7030      	strb	r0, [r6, #0]
    LSB = i2c_.read();
 80824b0:	6820      	ldr	r0, [r4, #0]
 80824b2:	6803      	ldr	r3, [r0, #0]
 80824b4:	695b      	ldr	r3, [r3, #20]
 80824b6:	4798      	blx	r3
 80824b8:	7028      	strb	r0, [r5, #0]

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
      { _M_device.unlock(); }
 80824ba:	4620      	mov	r0, r4
}
 80824bc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80824c0:	f7ff bfcc 	b.w	808245c <_ZN9FuelGauge6unlockEv>

080824c4 <_ZN9FuelGauge6getSoCEv>:
	readRegister(VCELL_REGISTER, MSB, LSB);
	return detail::_getVCell(MSB, LSB);
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {
 80824c4:	b513      	push	{r0, r1, r4, lr}

	byte MSB = 0;
 80824c6:	2200      	movs	r2, #0
	byte LSB = 0;
 80824c8:	ab02      	add	r3, sp, #8
 80824ca:	f803 2d01 	strb.w	r2, [r3, #-1]!
}

// Read and return the state of charge of the cell
float FuelGauge::getSoC() {

	byte MSB = 0;
 80824ce:	f88d 2006 	strb.w	r2, [sp, #6]
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
 80824d2:	2104      	movs	r1, #4
 80824d4:	f10d 0206 	add.w	r2, sp, #6
 80824d8:	f7ff ffcb 	bl	8082472 <_ZN9FuelGauge12readRegisterEhRhS0_>
	// Converts SOC_REGISTER reading to state of charge of the cell as a percentage
	float _getSoC(byte MSB, byte LSB) {
		// MSB is the whole number
		// LSB is the decimal, resolution in units 1/256%
		float decimal = LSB / 256.0;
		return MSB + decimal;
 80824dc:	f89d 0007 	ldrb.w	r0, [sp, #7]
 80824e0:	f001 faf6 	bl	8083ad0 <__aeabi_i2d>
 80824e4:	2200      	movs	r2, #0
 80824e6:	4b08      	ldr	r3, [pc, #32]	; (8082508 <_ZN9FuelGauge6getSoCEv+0x44>)
 80824e8:	f001 fb58 	bl	8083b9c <__aeabi_dmul>
 80824ec:	f001 fd68 	bl	8083fc0 <__aeabi_d2f>
 80824f0:	4604      	mov	r4, r0
 80824f2:	f89d 0006 	ldrb.w	r0, [sp, #6]
 80824f6:	f001 fe6d 	bl	80841d4 <__aeabi_i2f>
 80824fa:	4601      	mov	r1, r0
 80824fc:	4620      	mov	r0, r4
 80824fe:	f001 fdb5 	bl	808406c <__addsf3>
	byte MSB = 0;
	byte LSB = 0;

	readRegister(SOC_REGISTER, MSB, LSB);
	return detail::_getSoC(MSB, LSB);
}
 8082502:	b002      	add	sp, #8
 8082504:	bd10      	pop	{r4, pc}
 8082506:	bf00      	nop
 8082508:	3f700000 	.word	0x3f700000

0808250c <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c);
  virtual ~TwoWire() {};
 808250c:	4770      	bx	lr

0808250e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
 808250e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082510:	4606      	mov	r6, r0
 8082512:	4615      	mov	r5, r2
 8082514:	460c      	mov	r4, r1
 8082516:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082518:	42bc      	cmp	r4, r7
 808251a:	d006      	beq.n	808252a <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
 808251c:	6833      	ldr	r3, [r6, #0]
 808251e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8082522:	689b      	ldr	r3, [r3, #8]
 8082524:	4630      	mov	r0, r6
 8082526:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
 8082528:	e7f6      	b.n	8082518 <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
 808252a:	4628      	mov	r0, r5
 808252c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0808252e <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
 808252e:	2200      	movs	r2, #0
 8082530:	7c00      	ldrb	r0, [r0, #16]
 8082532:	f7ff b955 	b.w	80817e0 <HAL_I2C_Write_Data>

08082536 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
 8082536:	2100      	movs	r1, #0
 8082538:	7c00      	ldrb	r0, [r0, #16]
 808253a:	f7ff b959 	b.w	80817f0 <HAL_I2C_Available_Data>

0808253e <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
 808253e:	2100      	movs	r1, #0
 8082540:	7c00      	ldrb	r0, [r0, #16]
 8082542:	f7ff b95d 	b.w	8081800 <HAL_I2C_Read_Data>

08082546 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
 8082546:	2100      	movs	r1, #0
 8082548:	7c00      	ldrb	r0, [r0, #16]
 808254a:	f7ff b961 	b.w	8081810 <HAL_I2C_Peek_Data>

0808254e <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
 808254e:	2100      	movs	r1, #0
 8082550:	7c00      	ldrb	r0, [r0, #16]
 8082552:	f7ff b965 	b.w	8081820 <HAL_I2C_Flush_Data>

08082556 <_ZN7TwoWireD0Ev>:
 8082556:	b510      	push	{r4, lr}
 8082558:	4604      	mov	r4, r0
 808255a:	f7fd fda0 	bl	808009e <_ZdlPv>
 808255e:	4620      	mov	r0, r4
 8082560:	bd10      	pop	{r4, pc}
	...

08082564 <_ZN7TwoWireC1E17HAL_I2C_Interface>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8082564:	b510      	push	{r4, lr}
 8082566:	4604      	mov	r4, r0
 8082568:	4608      	mov	r0, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
 808256a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 808256e:	60a3      	str	r3, [r4, #8]
 8082570:	4b04      	ldr	r3, [pc, #16]	; (8082584 <_ZN7TwoWireC1E17HAL_I2C_Interface+0x20>)
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8082572:	2100      	movs	r1, #0
{
  _i2c = i2c;
 8082574:	7420      	strb	r0, [r4, #16]
 8082576:	6061      	str	r1, [r4, #4]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c)
 8082578:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, NULL);
 808257a:	f7ff f961 	bl	8081840 <HAL_I2C_Init>

}
 808257e:	4620      	mov	r0, r4
 8082580:	bd10      	pop	{r4, pc}
 8082582:	bf00      	nop
 8082584:	0808566c 	.word	0x0808566c

08082588 <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
 8082588:	2300      	movs	r3, #0
 808258a:	461a      	mov	r2, r3
 808258c:	4619      	mov	r1, r3
 808258e:	7c00      	ldrb	r0, [r0, #16]
 8082590:	f7ff b906 	b.w	80817a0 <HAL_I2C_Begin>

08082594 <_ZN7TwoWire11requestFromEhhh>:
{
	HAL_I2C_End(_i2c, NULL);
}

uint8_t TwoWire::requestFrom(uint8_t address, uint8_t quantity, uint8_t sendStop)
{
 8082594:	b513      	push	{r0, r1, r4, lr}
  uint8_t result = HAL_I2C_Request_Data(_i2c, address, quantity, sendStop, NULL);
 8082596:	2400      	movs	r4, #0
 8082598:	7c00      	ldrb	r0, [r0, #16]
 808259a:	9400      	str	r4, [sp, #0]
 808259c:	f7ff f908 	bl	80817b0 <HAL_I2C_Request_Data>
  return result;
}
 80825a0:	b2c0      	uxtb	r0, r0
 80825a2:	b002      	add	sp, #8
 80825a4:	bd10      	pop	{r4, pc}

080825a6 <_ZN7TwoWire11requestFromEiii>:
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)true);
}

uint8_t TwoWire::requestFrom(int address, int quantity, int sendStop)
{
  return requestFrom((uint8_t)address, (uint8_t)quantity, (uint8_t)sendStop);
 80825a6:	b2db      	uxtb	r3, r3
 80825a8:	b2d2      	uxtb	r2, r2
 80825aa:	b2c9      	uxtb	r1, r1
 80825ac:	f7ff bff2 	b.w	8082594 <_ZN7TwoWire11requestFromEhhh>

080825b0 <_ZN7TwoWire17beginTransmissionEh>:
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
 80825b0:	2200      	movs	r2, #0
 80825b2:	7c00      	ldrb	r0, [r0, #16]
 80825b4:	f7ff b904 	b.w	80817c0 <HAL_I2C_Begin_Transmission>

080825b8 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
 80825b8:	b2c9      	uxtb	r1, r1
 80825ba:	f7ff bff9 	b.w	80825b0 <_ZN7TwoWire17beginTransmissionEh>

080825be <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
 80825be:	2200      	movs	r2, #0
 80825c0:	7c00      	ldrb	r0, [r0, #16]
 80825c2:	f7ff b905 	b.w	80817d0 <HAL_I2C_End_Transmission>

080825c6 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
 80825c6:	2100      	movs	r1, #0
 80825c8:	7c00      	ldrb	r0, [r0, #16]
 80825ca:	f7ff b931 	b.w	8081830 <HAL_I2C_Is_Enabled>

080825ce <_ZN7TwoWire4lockEv>:
{
  HAL_I2C_Reset(_i2c, 0, NULL);
}

bool TwoWire::lock()
{
 80825ce:	b508      	push	{r3, lr}
  return HAL_I2C_Acquire(_i2c, NULL) == 0;
 80825d0:	2100      	movs	r1, #0
 80825d2:	7c00      	ldrb	r0, [r0, #16]
 80825d4:	f7ff f93c 	bl	8081850 <HAL_I2C_Acquire>
}
 80825d8:	fab0 f080 	clz	r0, r0
 80825dc:	0940      	lsrs	r0, r0, #5
 80825de:	bd08      	pop	{r3, pc}

080825e0 <_ZN7TwoWire6unlockEv>:

bool TwoWire::unlock()
{
 80825e0:	b508      	push	{r3, lr}
  return HAL_I2C_Release(_i2c, NULL) == 0;
 80825e2:	2100      	movs	r1, #0
 80825e4:	7c00      	ldrb	r0, [r0, #16]
 80825e6:	f7ff f93b 	bl	8081860 <HAL_I2C_Release>
}
 80825ea:	fab0 f080 	clz	r0, r0
 80825ee:	0940      	lsrs	r0, r0, #5
 80825f0:	bd08      	pop	{r3, pc}

080825f2 <_Z26call_raw_interrupt_handlerPv>:
}

void call_raw_interrupt_handler(void* data)
{
    raw_interrupt_handler_t handler = raw_interrupt_handler_t(data);
    handler();
 80825f2:	4700      	bx	r0

080825f4 <_Z15attachInterrupttPFvvE13InterruptModeah>:
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 80825f4:	2807      	cmp	r0, #7
    }
    return handler!=NULL;
}

bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
 80825f6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80825fa:	4605      	mov	r5, r0
 80825fc:	460f      	mov	r7, r1
 80825fe:	4690      	mov	r8, r2
 8082600:	461e      	mov	r6, r3
 8082602:	f04f 0400 	mov.w	r4, #0
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 8082606:	d019      	beq.n	808263c <_Z15attachInterrupttPFvvE13InterruptModeah+0x48>
#endif
    HAL_Interrupts_Detach(pin);
 8082608:	f7ff f8b2 	bl	8081770 <HAL_Interrupts_Detach>
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
 808260c:	42a6      	cmp	r6, r4
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 808260e:	f04f 0304 	mov.w	r3, #4
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
 8082612:	9403      	str	r4, [sp, #12]
 * Return         : true if function handler was allocated, false otherwise.
 *******************************************************************************/

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
 8082614:	f88d 300c 	strb.w	r3, [sp, #12]
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8082618:	bfa2      	ittt	ge
 808261a:	f89d 3028 	ldrbge.w	r3, [sp, #40]	; 0x28
    return &extra;
 808261e:	ac03      	addge	r4, sp, #12
HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
    extra.IRQChannelSubPriority = subpriority;
 8082620:	f88d 300e 	strbge.w	r3, [sp, #14]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 8082624:	4628      	mov	r0, r5
 8082626:	9400      	str	r4, [sp, #0]
 8082628:	4643      	mov	r3, r8
 808262a:	463a      	mov	r2, r7
 808262c:	4905      	ldr	r1, [pc, #20]	; (8082644 <_Z15attachInterrupttPFvvE13InterruptModeah+0x50>)

HAL_InterruptExtraConfiguration* configure_interrupt(HAL_InterruptExtraConfiguration& extra, int8_t priority, uint8_t subpriority)
{
  extra.version = HAL_INTERRUPT_EXTRA_CONFIGURATION_VERSION_1;
  if (priority >= 0) {
    extra.IRQChannelPreemptionPriority = (uint8_t)priority;
 808262e:	bfa8      	it	ge
 8082630:	f88d 600d 	strbge.w	r6, [sp, #13]
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
 8082634:	f7ff f894 	bl	8081760 <HAL_Interrupts_Attach>
    return true;
 8082638:	2001      	movs	r0, #1
 808263a:	e000      	b.n	808263e <_Z15attachInterrupttPFvvE13InterruptModeah+0x4a>
bool attachInterrupt(uint16_t pin, raw_interrupt_handler_t handler, InterruptMode mode, int8_t priority, uint8_t subpriority)
{
#if Wiring_Cellular == 1
  /* safety check that prevents users from attaching an interrupt to D7
   * which is shared with BATT_INT_PC13 for power management */
  if (pin == D7) return false;
 808263c:	4620      	mov	r0, r4
#endif
    HAL_Interrupts_Detach(pin);
    HAL_InterruptExtraConfiguration extra = {0};
    HAL_Interrupts_Attach(pin, call_raw_interrupt_handler, (void*)handler, mode, configure_interrupt(extra, priority, subpriority));
    return true;
}
 808263e:	b004      	add	sp, #16
 8082640:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8082644:	080825f3 	.word	0x080825f3

08082648 <_Z12noInterruptsv>:
 * Return         : None.
 *******************************************************************************/
void noInterrupts(void)
{
  //Only disable the interrupts that are exposed to the user
  HAL_Interrupts_Disable_All();
 8082648:	f7ff b8a2 	b.w	8081790 <HAL_Interrupts_Disable_All>

0808264c <_Z10interruptsv>:
 * Return         : None.
 *******************************************************************************/
void interrupts(void)
{
  //Only enable the interrupts that are exposed to the user
  HAL_Interrupts_Enable_All();
 808264c:	f7ff b898 	b.w	8081780 <HAL_Interrupts_Enable_All>

08082650 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
 8082650:	4770      	bx	lr

08082652 <_ZN9IPAddressD0Ev>:
 8082652:	b510      	push	{r4, lr}
 8082654:	4604      	mov	r4, r0
 8082656:	f7fd fd22 	bl	808009e <_ZdlPv>
 808265a:	4620      	mov	r0, r4
 808265c:	bd10      	pop	{r4, pc}

0808265e <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
 808265e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082660:	460f      	mov	r7, r1
 8082662:	f100 0608 	add.w	r6, r0, #8
 8082666:	1d05      	adds	r5, r0, #4
 8082668:	2400      	movs	r4, #0
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 808266a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 808266e:	220a      	movs	r2, #10
 8082670:	4638      	mov	r0, r7
 8082672:	f000 fad4 	bl	8082c1e <_ZN5Print5printEhi>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 8082676:	42ae      	cmp	r6, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
 8082678:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
 808267a:	d007      	beq.n	808268c <_ZNK9IPAddress7printToER5Print+0x2e>
    {
        if (n)
 808267c:	2c00      	cmp	r4, #0
 808267e:	d0f4      	beq.n	808266a <_ZNK9IPAddress7printToER5Print+0xc>
            n += p.print('.');
 8082680:	212e      	movs	r1, #46	; 0x2e
 8082682:	4638      	mov	r0, r7
 8082684:	f000 fa88 	bl	8082b98 <_ZN5Print5printEc>
 8082688:	4404      	add	r4, r0
 808268a:	e7ee      	b.n	808266a <_ZNK9IPAddress7printToER5Print+0xc>
        n += p.print((*this)[i], DEC);
    }
    return n;
}
 808268c:	4620      	mov	r0, r4
 808268e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082690 <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
 8082690:	4a02      	ldr	r2, [pc, #8]	; (808269c <_ZN9IPAddressC1Ev+0xc>)
 8082692:	6002      	str	r2, [r0, #0]
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
 8082694:	2200      	movs	r2, #0
 8082696:	6042      	str	r2, [r0, #4]
{
    clear();
}
 8082698:	4770      	bx	lr
 808269a:	bf00      	nop
 808269c:	08085694 	.word	0x08085694

080826a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
 80826a0:	4a02      	ldr	r2, [pc, #8]	; (80826ac <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xc>)
 80826a2:	6002      	str	r2, [r0, #0]
{
    memcpy(&this->address, &address, sizeof(address));
 80826a4:	680a      	ldr	r2, [r1, #0]
 80826a6:	6042      	str	r2, [r0, #4]
}
 80826a8:	4770      	bx	lr
 80826aa:	bf00      	nop
 80826ac:	08085694 	.word	0x08085694

080826b0 <_ZN9IPAddressC1Em>:
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80826b0:	4a01      	ldr	r2, [pc, #4]	; (80826b8 <_ZN9IPAddressC1Em+0x8>)
    return *this;
}

IPAddress& IPAddress::operator=(uint32_t ipv4)
{
    address.ipv4 = ipv4;
 80826b2:	6041      	str	r1, [r0, #4]
IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
}

IPAddress::IPAddress(uint32_t address)
 80826b4:	6002      	str	r2, [r0, #0]
{
    *this = address;
}
 80826b6:	4770      	bx	lr
 80826b8:	08085694 	.word	0x08085694

080826bc <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
 80826bc:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
 80826be:	f89d 4008 	ldrb.w	r4, [sp, #8]
 80826c2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
 80826c6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80826ca:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
 80826ce:	6041      	str	r1, [r0, #4]
 80826d0:	bd10      	pop	{r4, pc}
	...

080826d4 <_ZN9IPAddressC1Ehhhh>:
{
    memcpy(&this->address, &address, sizeof(address));
}


IPAddress::IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet)
 80826d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80826d6:	4d04      	ldr	r5, [pc, #16]	; (80826e8 <_ZN9IPAddressC1Ehhhh+0x14>)
 80826d8:	6005      	str	r5, [r0, #0]
{
    set_ipv4(first_octet, second_octet, third_octet, fourth_octet);
 80826da:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80826de:	9500      	str	r5, [sp, #0]
 80826e0:	f7ff ffec 	bl	80826bc <_ZN9IPAddress8set_ipv4Ehhhh>
}
 80826e4:	b003      	add	sp, #12
 80826e6:	bd30      	pop	{r4, r5, pc}
 80826e8:	08085694 	.word	0x08085694

080826ec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
 80826ec:	4a01      	ldr	r2, [pc, #4]	; (80826f4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
 80826ee:	4b02      	ldr	r3, [pc, #8]	; (80826f8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
 80826f0:	601a      	str	r2, [r3, #0]
 80826f2:	4770      	bx	lr
 80826f4:	08085755 	.word	0x08085755
 80826f8:	200006a8 	.word	0x200006a8

080826fc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
 80826fc:	2300      	movs	r3, #0
 80826fe:	461a      	mov	r2, r3
 8082700:	6840      	ldr	r0, [r0, #4]
 8082702:	f7ff b9e9 	b.w	8081ad8 <network_connect>

08082706 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
 8082706:	2200      	movs	r2, #0
 8082708:	2102      	movs	r1, #2
 808270a:	6840      	ldr	r0, [r0, #4]
 808270c:	f7ff b9f4 	b.w	8081af8 <network_disconnect>

08082710 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
 8082710:	2200      	movs	r2, #0
 8082712:	4611      	mov	r1, r2
 8082714:	6840      	ldr	r0, [r0, #4]
 8082716:	f7ff b9e7 	b.w	8081ae8 <network_connecting>

0808271a <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
 808271a:	2200      	movs	r2, #0
 808271c:	4611      	mov	r1, r2
 808271e:	6840      	ldr	r0, [r0, #4]
 8082720:	f7ff b9f2 	b.w	8081b08 <network_ready>

08082724 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
 8082724:	2300      	movs	r3, #0
 8082726:	461a      	mov	r2, r3
 8082728:	4619      	mov	r1, r3
 808272a:	6840      	ldr	r0, [r0, #4]
 808272c:	f7ff b9f4 	b.w	8081b18 <network_on>

08082730 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
 8082730:	2300      	movs	r3, #0
 8082732:	461a      	mov	r2, r3
 8082734:	4619      	mov	r1, r3
 8082736:	6840      	ldr	r0, [r0, #4]
 8082738:	f7ff b9f6 	b.w	8081b28 <network_off>

0808273c <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
 808273c:	2200      	movs	r2, #0
 808273e:	f081 0101 	eor.w	r1, r1, #1
 8082742:	6840      	ldr	r0, [r0, #4]
 8082744:	f7ff b9f8 	b.w	8081b38 <network_listen>

08082748 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
 8082748:	2200      	movs	r2, #0
 808274a:	6840      	ldr	r0, [r0, #4]
 808274c:	f7ff ba04 	b.w	8081b58 <network_set_listen_timeout>

08082750 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
 8082750:	2200      	movs	r2, #0
 8082752:	4611      	mov	r1, r2
 8082754:	6840      	ldr	r0, [r0, #4]
 8082756:	f7ff ba07 	b.w	8081b68 <network_get_listen_timeout>

0808275a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
 808275a:	2200      	movs	r2, #0
 808275c:	4611      	mov	r1, r2
 808275e:	6840      	ldr	r0, [r0, #4]
 8082760:	f7ff b9f2 	b.w	8081b48 <network_listening>

08082764 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
 8082764:	b5f0      	push	{r4, r5, r6, r7, lr}
 8082766:	4617      	mov	r7, r2
 8082768:	b087      	sub	sp, #28
 808276a:	4605      	mov	r5, r0
    IPAddress addr;
 808276c:	a804      	add	r0, sp, #16
 808276e:	f7ff ff8f 	bl	8082690 <_ZN9IPAddressC1Ev>
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082772:	2600      	movs	r6, #0
 8082774:	ac06      	add	r4, sp, #24
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 8082776:	4638      	mov	r0, r7
    }

#if !HAL_USE_INET_HAL_POSIX
    IPAddress resolve(const char* name)
    {
        HAL_IPAddress ip = {0};
 8082778:	f844 6d0c 	str.w	r6, [r4, #-12]!
        return (inet_gethostbyname(name, strlen(name), &ip, *this, NULL) != 0) ?
 808277c:	f002 f919 	bl	80849b2 <strlen>
 8082780:	4b0a      	ldr	r3, [pc, #40]	; (80827ac <_ZN5spark12NetworkClass7resolveEPKc+0x48>)
 8082782:	9600      	str	r6, [sp, #0]
 8082784:	b281      	uxth	r1, r0
 8082786:	685b      	ldr	r3, [r3, #4]
 8082788:	4622      	mov	r2, r4
 808278a:	4638      	mov	r0, r7
 808278c:	f7fe ff38 	bl	8081600 <inet_gethostbyname>
                IPAddress(uint32_t(0)) : IPAddress(ip);
 8082790:	b120      	cbz	r0, 808279c <_ZN5spark12NetworkClass7resolveEPKc+0x38>
 8082792:	4631      	mov	r1, r6
 8082794:	4628      	mov	r0, r5
 8082796:	f7ff ff8b 	bl	80826b0 <_ZN9IPAddressC1Em>
 808279a:	e003      	b.n	80827a4 <_ZN5spark12NetworkClass7resolveEPKc+0x40>
 808279c:	4621      	mov	r1, r4
 808279e:	4628      	mov	r0, r5
 80827a0:	f7ff ff7e 	bl	80826a0 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
 80827a4:	4628      	mov	r0, r5
 80827a6:	b007      	add	sp, #28
 80827a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80827aa:	bf00      	nop
 80827ac:	2000064c 	.word	0x2000064c

080827b0 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
 80827b0:	4b02      	ldr	r3, [pc, #8]	; (80827bc <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
 80827b2:	4a03      	ldr	r2, [pc, #12]	; (80827c0 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
 80827b4:	601a      	str	r2, [r3, #0]
 80827b6:	2200      	movs	r2, #0
 80827b8:	605a      	str	r2, [r3, #4]
 80827ba:	4770      	bx	lr
 80827bc:	200006ac 	.word	0x200006ac
 80827c0:	08085788 	.word	0x08085788

080827c4 <_ZN4PMIC5beginEv>:
 * Description    : Initializes the I2C for the PMIC module
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
 80827c4:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80827c6:	f000 fe7b 	bl	80834c0 <_Z20__fetch_global_Wire3v>
 * Input          : NONE
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
 80827ca:	f7ff fefc 	bl	80825c6 <_ZN7TwoWire9isEnabledEv>
 80827ce:	b918      	cbnz	r0, 80827d8 <_ZN4PMIC5beginEv+0x14>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80827d0:	f000 fe76 	bl	80834c0 <_Z20__fetch_global_Wire3v>
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
 80827d4:	f7ff fed8 	bl	8082588 <_ZN7TwoWire5beginEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80827d8:	f000 fe72 	bl	80834c0 <_Z20__fetch_global_Wire3v>
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
}
 80827dc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::begin()
{
    if (!pmicWireInstance()->isEnabled()) {
        pmicWireInstance()->begin();
    }
    return pmicWireInstance()->isEnabled();
 80827e0:	f7ff bef1 	b.w	80825c6 <_ZN7TwoWire9isEnabledEv>

080827e4 <_ZN4PMIC4lockEv>:
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
 80827e4:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80827e6:	f000 fe6b 	bl	80834c0 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}
 80827ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}

bool PMIC::lock() {
    return pmicWireInstance()->lock();
 80827ee:	f7ff beee 	b.w	80825ce <_ZN7TwoWire4lockEv>

080827f2 <_ZN4PMICC1Eb>:

} // anonymous

#include <mutex>

PMIC::PMIC(bool _lock) :
 80827f2:	b510      	push	{r4, lr}
 80827f4:	4604      	mov	r4, r0
    lock_(_lock)
 80827f6:	7001      	strb	r1, [r0, #0]
{
    if (lock_) {
 80827f8:	b109      	cbz	r1, 80827fe <_ZN4PMICC1Eb+0xc>
        lock();
 80827fa:	f7ff fff3 	bl	80827e4 <_ZN4PMIC4lockEv>
    }
}
 80827fe:	4620      	mov	r0, r4
 8082800:	bd10      	pop	{r4, pc}

08082802 <_ZN4PMIC6unlockEv>:

bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
 8082802:	b508      	push	{r3, lr}
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082804:	f000 fe5c 	bl	80834c0 <_Z20__fetch_global_Wire3v>
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
}
 8082808:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
bool PMIC::lock() {
    return pmicWireInstance()->lock();
}

bool PMIC::unlock() {
    return pmicWireInstance()->unlock();
 808280c:	f7ff bee8 	b.w	80825e0 <_ZN7TwoWire6unlockEv>

08082810 <_ZN4PMICD1Ev>:
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8082810:	b510      	push	{r4, lr}
{
    if (lock_) {
 8082812:	7803      	ldrb	r3, [r0, #0]
    if (lock_) {
        lock();
    }
}

PMIC::~PMIC()
 8082814:	4604      	mov	r4, r0
{
    if (lock_) {
 8082816:	b10b      	cbz	r3, 808281c <_ZN4PMICD1Ev+0xc>
        unlock();
 8082818:	f7ff fff3 	bl	8082802 <_ZN4PMIC6unlockEv>
    }
}
 808281c:	4620      	mov	r0, r4
 808281e:	bd10      	pop	{r4, pc}

08082820 <_ZNSt10lock_guardI4PMICED1Ev>:
      { _M_device.lock(); }

      lock_guard(mutex_type& __m, adopt_lock_t) : _M_device(__m)
      { } // calling thread owns mutex

      ~lock_guard()
 8082820:	b510      	push	{r4, lr}
 8082822:	4604      	mov	r4, r0
      { _M_device.unlock(); }
 8082824:	6800      	ldr	r0, [r0, #0]
 8082826:	f7ff ffec 	bl	8082802 <_ZN4PMIC6unlockEv>
 808282a:	4620      	mov	r0, r4
 808282c:	bd10      	pop	{r4, pc}

0808282e <_ZN4PMIC12readRegisterEh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
 808282e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082830:	ac02      	add	r4, sp, #8
 8082832:	460d      	mov	r5, r1
 8082834:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8082838:	f7ff ffd4 	bl	80827e4 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808283c:	f000 fe40 	bl	80834c0 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8082840:	216b      	movs	r1, #107	; 0x6b
 8082842:	f7ff feb9 	bl	80825b8 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082846:	f000 fe3b 	bl	80834c0 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
 808284a:	6803      	ldr	r3, [r0, #0]
 808284c:	4629      	mov	r1, r5
 808284e:	689b      	ldr	r3, [r3, #8]
 8082850:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082852:	f000 fe35 	bl	80834c0 <_Z20__fetch_global_Wire3v>
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);
 8082856:	2101      	movs	r1, #1
 8082858:	f7ff feb1 	bl	80825be <_ZN7TwoWire15endTransmissionEh>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808285c:	f000 fe30 	bl	80834c0 <_Z20__fetch_global_Wire3v>
    byte DATA = 0;
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
 8082860:	2301      	movs	r3, #1
 8082862:	461a      	mov	r2, r3
 8082864:	216b      	movs	r1, #107	; 0x6b
 8082866:	f7ff fe9e 	bl	80825a6 <_ZN7TwoWire11requestFromEiii>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808286a:	f000 fe29 	bl	80834c0 <_Z20__fetch_global_Wire3v>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(startAddress);
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
 808286e:	6803      	ldr	r3, [r0, #0]
 8082870:	695b      	ldr	r3, [r3, #20]
 8082872:	4798      	blx	r3
 8082874:	4605      	mov	r5, r0
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
byte PMIC::readRegister(byte startAddress) {
    std::lock_guard<PMIC> l(*this);
 8082876:	4620      	mov	r0, r4
 8082878:	f7ff ffd2 	bl	8082820 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->endTransmission(true);

    pmicWireInstance()->requestFrom(PMIC_ADDRESS, 1, true);
    DATA = pmicWireInstance()->read();
    return DATA;
}
 808287c:	b2e8      	uxtb	r0, r5
 808287e:	b003      	add	sp, #12
 8082880:	bd30      	pop	{r4, r5, pc}

08082882 <_ZN4PMIC13writeRegisterEhh>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
 8082882:	b573      	push	{r0, r1, r4, r5, r6, lr}
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082884:	ac02      	add	r4, sp, #8
 8082886:	4615      	mov	r5, r2
 8082888:	460e      	mov	r6, r1
 808288a:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 808288e:	f7ff ffa9 	bl	80827e4 <_ZN4PMIC4lockEv>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 8082892:	f000 fe15 	bl	80834c0 <_Z20__fetch_global_Wire3v>
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
 8082896:	216b      	movs	r1, #107	; 0x6b
 8082898:	f7ff fe8e 	bl	80825b8 <_ZN7TwoWire17beginTransmissionEi>
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 808289c:	f000 fe10 	bl	80834c0 <_Z20__fetch_global_Wire3v>
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
 80828a0:	6803      	ldr	r3, [r0, #0]
 80828a2:	4631      	mov	r1, r6
 80828a4:	689b      	ldr	r3, [r3, #8]
 80828a6:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80828a8:	f000 fe0a 	bl	80834c0 <_Z20__fetch_global_Wire3v>
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
 80828ac:	6803      	ldr	r3, [r0, #0]
 80828ae:	4629      	mov	r1, r5
 80828b0:	689b      	ldr	r3, [r3, #8]
 80828b2:	4798      	blx	r3
            return &Wire1;
        }
#endif // Wiring_Wire1
#if Wiring_Wire3
        case HAL_I2C_INTERFACE3: {
            return &Wire3;
 80828b4:	f000 fe04 	bl	80834c0 <_Z20__fetch_global_Wire3v>
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
 80828b8:	2101      	movs	r1, #1
 80828ba:	f7ff fe80 	bl	80825be <_ZN7TwoWire15endTransmissionEh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
void PMIC::writeRegister(byte address, byte DATA) {
    std::lock_guard<PMIC> l(*this);
 80828be:	4620      	mov	r0, r4
 80828c0:	f7ff ffae 	bl	8082820 <_ZNSt10lock_guardI4PMICED1Ev>
    pmicWireInstance()->beginTransmission(PMIC_ADDRESS);
    pmicWireInstance()->write(address);
    pmicWireInstance()->write(DATA);
    pmicWireInstance()->endTransmission(true);
}
 80828c4:	b002      	add	sp, #8
 80828c6:	bd70      	pop	{r4, r5, r6, pc}

080828c8 <_ZN4PMIC20setInputVoltageLimitEt>:
                    5000
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
 80828c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80828ca:	4604      	mov	r4, r0
 80828cc:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80828ce:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80828d0:	f7ff ff88 	bl	80827e4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 80828d4:	2100      	movs	r1, #0
 80828d6:	4620      	mov	r0, r4
 80828d8:	f7ff ffa9 	bl	808282e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 80828dc:	f241 1358 	movw	r3, #4440	; 0x1158
 80828e0:	429d      	cmp	r5, r3
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;
 80828e2:	f000 0287 	and.w	r2, r0, #135	; 0x87

    switch(voltage) {
 80828e6:	d05b      	beq.n	80829a0 <_ZN4PMIC20setInputVoltageLimitEt+0xd8>
 80828e8:	d820      	bhi.n	808292c <_ZN4PMIC20setInputVoltageLimitEt+0x64>
 80828ea:	f241 0318 	movw	r3, #4120	; 0x1018
 80828ee:	429d      	cmp	r5, r3
 80828f0:	d04d      	beq.n	808298e <_ZN4PMIC20setInputVoltageLimitEt+0xc6>
 80828f2:	d80c      	bhi.n	808290e <_ZN4PMIC20setInputVoltageLimitEt+0x46>
 80828f4:	f640 7378 	movw	r3, #3960	; 0xf78
 80828f8:	429d      	cmp	r5, r3
 80828fa:	d042      	beq.n	8082982 <_ZN4PMIC20setInputVoltageLimitEt+0xba>
 80828fc:	f640 73c8 	movw	r3, #4040	; 0xfc8
 8082900:	429d      	cmp	r5, r3
 8082902:	d041      	beq.n	8082988 <_ZN4PMIC20setInputVoltageLimitEt+0xc0>
 8082904:	f640 7328 	movw	r3, #3880	; 0xf28
 8082908:	429d      	cmp	r5, r3
 808290a:	d160      	bne.n	80829ce <_ZN4PMIC20setInputVoltageLimitEt+0x106>
 808290c:	e059      	b.n	80829c2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
 808290e:	f241 03b8 	movw	r3, #4280	; 0x10b8
 8082912:	429d      	cmp	r5, r3
 8082914:	d03e      	beq.n	8082994 <_ZN4PMIC20setInputVoltageLimitEt+0xcc>
 8082916:	f241 1308 	movw	r3, #4360	; 0x1108
 808291a:	429d      	cmp	r5, r3
 808291c:	d03d      	beq.n	808299a <_ZN4PMIC20setInputVoltageLimitEt+0xd2>
 808291e:	f241 0368 	movw	r3, #4200	; 0x1068
 8082922:	429d      	cmp	r5, r3
 8082924:	d153      	bne.n	80829ce <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
        break;

        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
 8082926:	f042 0220 	orr.w	r2, r2, #32
 808292a:	e04a      	b.n	80829c2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 808292c:	f241 2398 	movw	r3, #4760	; 0x1298
 8082930:	429d      	cmp	r5, r3
 8082932:	d03e      	beq.n	80829b2 <_ZN4PMIC20setInputVoltageLimitEt+0xea>
 8082934:	d80e      	bhi.n	8082954 <_ZN4PMIC20setInputVoltageLimitEt+0x8c>
 8082936:	f241 13f8 	movw	r3, #4600	; 0x11f8
 808293a:	429d      	cmp	r5, r3
 808293c:	d033      	beq.n	80829a6 <_ZN4PMIC20setInputVoltageLimitEt+0xde>
 808293e:	f241 2348 	movw	r3, #4680	; 0x1248
 8082942:	429d      	cmp	r5, r3
 8082944:	d032      	beq.n	80829ac <_ZN4PMIC20setInputVoltageLimitEt+0xe4>
 8082946:	f241 13a8 	movw	r3, #4520	; 0x11a8
 808294a:	429d      	cmp	r5, r3
 808294c:	d13f      	bne.n	80829ce <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
        break;

        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
 808294e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8082952:	e036      	b.n	80829c2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 8082954:	f241 3338 	movw	r3, #4920	; 0x1338
 8082958:	429d      	cmp	r5, r3
 808295a:	d02d      	beq.n	80829b8 <_ZN4PMIC20setInputVoltageLimitEt+0xf0>
 808295c:	d806      	bhi.n	808296c <_ZN4PMIC20setInputVoltageLimitEt+0xa4>
 808295e:	f241 23e8 	movw	r3, #4840	; 0x12e8
 8082962:	429d      	cmp	r5, r3
 8082964:	d133      	bne.n	80829ce <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
        break;

        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
 8082966:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 808296a:	e02a      	b.n	80829c2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b10000111;

    switch(voltage) {
 808296c:	f241 3388 	movw	r3, #5000	; 0x1388
 8082970:	429d      	cmp	r5, r3
 8082972:	d024      	beq.n	80829be <_ZN4PMIC20setInputVoltageLimitEt+0xf6>
 8082974:	f241 33d8 	movw	r3, #5080	; 0x13d8
 8082978:	429d      	cmp	r5, r3
 808297a:	d128      	bne.n	80829ce <_ZN4PMIC20setInputVoltageLimitEt+0x106>
        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;

        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
 808297c:	f042 0278 	orr.w	r2, r2, #120	; 0x78
 8082980:	e01f      	b.n	80829c2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 3880:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 3960:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00001000));
 8082982:	f042 0208 	orr.w	r2, r2, #8
 8082986:	e01c      	b.n	80829c2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4040:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00010000));
 8082988:	f042 0210 	orr.w	r2, r2, #16
 808298c:	e019      	b.n	80829c2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4120:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00011000));
 808298e:	f042 0218 	orr.w	r2, r2, #24
 8082992:	e016      	b.n	80829c2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00100000));
        break;

        case 4280:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00101000));
 8082994:	f042 0228 	orr.w	r2, r2, #40	; 0x28
 8082998:	e013      	b.n	80829c2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4360:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00110000));
 808299a:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 808299e:	e010      	b.n	80829c2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4440:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00111000));
 80829a0:	f042 0238 	orr.w	r2, r2, #56	; 0x38
 80829a4:	e00d      	b.n	80829c2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4520:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01000000));
        break;

        case 4600:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01001000));
 80829a6:	f042 0248 	orr.w	r2, r2, #72	; 0x48
 80829aa:	e00a      	b.n	80829c2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4680:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01010000));
 80829ac:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80829b0:	e007      	b.n	80829c2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 4760:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01011000));
 80829b2:	f042 0258 	orr.w	r2, r2, #88	; 0x58
 80829b6:	e004      	b.n	80829c2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        case 4840:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01100000));
        break;

        case 4920:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
 80829b8:	f042 0268 	orr.w	r2, r2, #104	; 0x68
 80829bc:	e001      	b.n	80829c2 <_ZN4PMIC20setInputVoltageLimitEt+0xfa>
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
 80829be:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 80829c2:	4620      	mov	r0, r4
 80829c4:	2100      	movs	r1, #0
 80829c6:	f7ff ff5c 	bl	8082882 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 80829ca:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01101000));
        break;

        case 5000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01110000));
        break;
 80829cc:	e000      	b.n	80829d0 <_ZN4PMIC20setInputVoltageLimitEt+0x108>
        case 5080:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b01111000));
        break;

        default:
        return 0; // return error since the value passed didn't match
 80829ce:	2400      	movs	r4, #0
                    5080
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
// There is prolly a better way to do this. TODO: Optimize
bool PMIC::setInputVoltageLimit(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 80829d0:	a801      	add	r0, sp, #4
 80829d2:	f7ff ff25 	bl	8082820 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 80829d6:	4620      	mov	r0, r4
 80829d8:	b003      	add	sp, #12
 80829da:	bd30      	pop	{r4, r5, pc}

080829dc <_ZN4PMIC20setInputCurrentLimitEt>:
 * Function Name  : setInputCurrentLimit
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
 80829dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80829de:	4604      	mov	r4, r0
 80829e0:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 80829e2:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 80829e4:	f7ff fefe 	bl	80827e4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
 80829e8:	2100      	movs	r1, #0
 80829ea:	4620      	mov	r0, r4
 80829ec:	f7ff ff1f 	bl	808282e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b11111000;

    switch (current) {
 80829f0:	f5b5 7f61 	cmp.w	r5, #900	; 0x384
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;
 80829f4:	f000 02f8 	and.w	r2, r0, #248	; 0xf8

    switch (current) {
 80829f8:	d023      	beq.n	8082a42 <_ZN4PMIC20setInputCurrentLimitEt+0x66>
 80829fa:	d807      	bhi.n	8082a0c <_ZN4PMIC20setInputCurrentLimitEt+0x30>
 80829fc:	2d96      	cmp	r5, #150	; 0x96
 80829fe:	d01a      	beq.n	8082a36 <_ZN4PMIC20setInputCurrentLimitEt+0x5a>
 8082a00:	f5b5 7ffa 	cmp.w	r5, #500	; 0x1f4
 8082a04:	d01a      	beq.n	8082a3c <_ZN4PMIC20setInputCurrentLimitEt+0x60>
 8082a06:	2d64      	cmp	r5, #100	; 0x64
 8082a08:	d129      	bne.n	8082a5e <_ZN4PMIC20setInputCurrentLimitEt+0x82>
 8082a0a:	e022      	b.n	8082a52 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
 8082a0c:	f240 53dc 	movw	r3, #1500	; 0x5dc
 8082a10:	429d      	cmp	r5, r3
 8082a12:	d019      	beq.n	8082a48 <_ZN4PMIC20setInputCurrentLimitEt+0x6c>
 8082a14:	d805      	bhi.n	8082a22 <_ZN4PMIC20setInputCurrentLimitEt+0x46>
 8082a16:	f5b5 6f96 	cmp.w	r5, #1200	; 0x4b0
 8082a1a:	d120      	bne.n	8082a5e <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
        break;

        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
 8082a1c:	f042 0204 	orr.w	r2, r2, #4
 8082a20:	e017      	b.n	8082a52 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
    std::lock_guard<PMIC> l(*this);

    byte DATA = readRegister(INPUT_SOURCE_REGISTER);
    byte mask = DATA & 0b11111000;

    switch (current) {
 8082a22:	f5b5 6ffa 	cmp.w	r5, #2000	; 0x7d0
 8082a26:	d012      	beq.n	8082a4e <_ZN4PMIC20setInputCurrentLimitEt+0x72>
 8082a28:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8082a2c:	429d      	cmp	r5, r3
 8082a2e:	d116      	bne.n	8082a5e <_ZN4PMIC20setInputCurrentLimitEt+0x82>
        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;

        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
 8082a30:	f042 0207 	orr.w	r2, r2, #7
 8082a34:	e00d      	b.n	8082a52 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 100:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000000));
        break;

        case 150:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000001));
 8082a36:	f042 0201 	orr.w	r2, r2, #1
 8082a3a:	e00a      	b.n	8082a52 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000010));
 8082a3c:	f042 0202 	orr.w	r2, r2, #2
 8082a40:	e007      	b.n	8082a52 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 900:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000011));
 8082a42:	f042 0203 	orr.w	r2, r2, #3
 8082a46:	e004      	b.n	8082a52 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        case 1200:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000100));
        break;

        case 1500:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
 8082a48:	f042 0205 	orr.w	r2, r2, #5
 8082a4c:	e001      	b.n	8082a52 <_ZN4PMIC20setInputCurrentLimitEt+0x76>
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
 8082a4e:	f042 0206 	orr.w	r2, r2, #6
 8082a52:	4620      	mov	r0, r4
 8082a54:	2100      	movs	r1, #0
 8082a56:	f7ff ff14 	bl	8082882 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8082a5a:	2401      	movs	r4, #1
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000101));
        break;

        case 2000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000110));
        break;
 8082a5c:	e000      	b.n	8082a60 <_ZN4PMIC20setInputCurrentLimitEt+0x84>
        case 3000:
        writeRegister(INPUT_SOURCE_REGISTER, (mask | 0b00000111));
        break;

        default:
        return 0; // return error since the value passed didn't match
 8082a5e:	2400      	movs	r4, #0
 * Description    : Sets the input current limit for the PMIC
 * Input          : 100,150,500,900,1200,1500,2000,3000 (mAmp)
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setInputCurrentLimit(uint16_t current) {
    std::lock_guard<PMIC> l(*this);
 8082a60:	a801      	add	r0, sp, #4
 8082a62:	f7ff fedd 	bl	8082820 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8082a66:	4620      	mov	r0, r4
 8082a68:	b003      	add	sp, #12
 8082a6a:	bd30      	pop	{r4, r5, pc}

08082a6c <_ZN4PMIC16setChargeCurrentEbbbbbb>:
                    For example,
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
 8082a6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8082a6e:	460c      	mov	r4, r1
 8082a70:	4617      	mov	r7, r2
 8082a72:	4605      	mov	r5, r0
 8082a74:	461e      	mov	r6, r3
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082a76:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8082a78:	f7ff feb4 	bl	80827e4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte current = 0;
    if (bit7) current = current | 0b10000000;
 8082a7c:	2c00      	cmp	r4, #0
 8082a7e:	bf0c      	ite	eq
 8082a80:	2400      	moveq	r4, #0
 8082a82:	2480      	movne	r4, #128	; 0x80
    if (bit6) current = current | 0b01000000;
 8082a84:	b117      	cbz	r7, 8082a8c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x20>
 8082a86:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8082a8a:	b2e4      	uxtb	r4, r4
    if (bit5) current = current | 0b00100000;
 8082a8c:	b10e      	cbz	r6, 8082a92 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x26>
 8082a8e:	f044 0420 	orr.w	r4, r4, #32
    if (bit4) current = current | 0b00010000;
 8082a92:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8082a96:	b10b      	cbz	r3, 8082a9c <_ZN4PMIC16setChargeCurrentEbbbbbb+0x30>
 8082a98:	f044 0410 	orr.w	r4, r4, #16
    if (bit3) current = current | 0b00001000;
 8082a9c:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 8082aa0:	b10b      	cbz	r3, 8082aa6 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x3a>
 8082aa2:	f044 0408 	orr.w	r4, r4, #8
    if (bit2) current = current | 0b00000100;
 8082aa6:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
 8082aaa:	b10b      	cbz	r3, 8082ab0 <_ZN4PMIC16setChargeCurrentEbbbbbb+0x44>
 8082aac:	f044 0404 	orr.w	r4, r4, #4

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
 8082ab0:	2102      	movs	r1, #2
 8082ab2:	4628      	mov	r0, r5
 8082ab4:	f7ff febb 	bl	808282e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
 8082ab8:	f000 0201 	and.w	r2, r0, #1
 8082abc:	4322      	orrs	r2, r4
 8082abe:	2102      	movs	r1, #2
 8082ac0:	4628      	mov	r0, r5
 8082ac2:	f7ff fede 	bl	8082882 <_ZN4PMIC13writeRegisterEhh>
                    setChargeCurrent(0,0,1,1,1,0) will set the charge current to
                    512mA + [0+0+512mA+256mA+128mA+0] = 1408mA
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeCurrent(bool bit7, bool bit6, bool bit5, bool bit4, bool bit3, bool bit2) {
    std::lock_guard<PMIC> l(*this);
 8082ac6:	a801      	add	r0, sp, #4
 8082ac8:	f7ff feaa 	bl	8082820 <_ZNSt10lock_guardI4PMICED1Ev>

    byte DATA = readRegister(CHARGE_CURRENT_CONTROL_REGISTER);
    byte mask = DATA & 0b00000001;
    writeRegister(CHARGE_CURRENT_CONTROL_REGISTER, current | mask);
    return 1;
}
 8082acc:	2001      	movs	r0, #1
 8082ace:	b003      	add	sp, #12
 8082ad0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08082ad2 <_ZN4PMIC16setChargeVoltageEt>:
                    4208 is the default
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
 8082ad2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082ad4:	4604      	mov	r4, r0
 8082ad6:	460d      	mov	r5, r1
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082ad8:	9001      	str	r0, [sp, #4]
      { _M_device.lock(); }
 8082ada:	f7ff fe83 	bl	80827e4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
 8082ade:	2104      	movs	r1, #4
 8082ae0:	4620      	mov	r0, r4
 8082ae2:	f7ff fea4 	bl	808282e <_ZN4PMIC12readRegisterEh>
    byte mask = DATA & 0b000000011;

    switch (voltage) {
 8082ae6:	f241 0310 	movw	r3, #4112	; 0x1010
 8082aea:	429d      	cmp	r5, r3
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_VOLTAGE_CONTROL_REGISTER);
    byte mask = DATA & 0b000000011;
 8082aec:	f000 0203 	and.w	r2, r0, #3

    switch (voltage) {
 8082af0:	d006      	beq.n	8082b00 <_ZN4PMIC16setChargeVoltageEt+0x2e>
 8082af2:	f241 0370 	movw	r3, #4208	; 0x1070
 8082af6:	429d      	cmp	r5, r3
 8082af8:	d10a      	bne.n	8082b10 <_ZN4PMIC16setChargeVoltageEt+0x3e>
        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8082afa:	f042 02b0 	orr.w	r2, r2, #176	; 0xb0
 8082afe:	e001      	b.n	8082b04 <_ZN4PMIC16setChargeVoltageEt+0x32>
    byte mask = DATA & 0b000000011;

    switch (voltage) {

        case 4112:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
 8082b00:	f042 0298 	orr.w	r2, r2, #152	; 0x98
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
 8082b04:	4620      	mov	r0, r4
 8082b06:	2104      	movs	r1, #4
 8082b08:	f7ff febb 	bl	8082882 <_ZN4PMIC13writeRegisterEhh>

        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
 8082b0c:	2401      	movs	r4, #1
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10011000));
        break;

        case 4208:
        writeRegister(CHARGE_VOLTAGE_CONTROL_REGISTER, (mask | 0b10110000));
        break;
 8082b0e:	e000      	b.n	8082b12 <_ZN4PMIC16setChargeVoltageEt+0x40>

        default:
        return 0; // return error since the value passed didn't match
 8082b10:	2400      	movs	r4, #0
                    4112 is a safer termination voltage if exposing the
                    battery to temperatures above 45°C
 * Return         : 0 Error, 1 Success
 *******************************************************************************/
bool PMIC::setChargeVoltage(uint16_t voltage) {
    std::lock_guard<PMIC> l(*this);
 8082b12:	a801      	add	r0, sp, #4
 8082b14:	f7ff fe84 	bl	8082820 <_ZNSt10lock_guardI4PMICED1Ev>
        default:
        return 0; // return error since the value passed didn't match
    }

    return 1; // value was written successfully
}
 8082b18:	4620      	mov	r0, r4
 8082b1a:	b003      	add	sp, #12
 8082b1c:	bd30      	pop	{r4, r5, pc}

08082b1e <_ZN4PMIC15disableWatchdogEv>:
 * Function Name  :
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
 8082b1e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8082b20:	4605      	mov	r5, r0
    class lock_guard
    {
    public:
      typedef _Mutex mutex_type;

      explicit lock_guard(mutex_type& __m) : _M_device(__m)
 8082b22:	ac02      	add	r4, sp, #8
 8082b24:	f844 0d04 	str.w	r0, [r4, #-4]!
      { _M_device.lock(); }
 8082b28:	f7ff fe5c 	bl	80827e4 <_ZN4PMIC4lockEv>
    std::lock_guard<PMIC> l(*this);
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
 8082b2c:	2105      	movs	r1, #5
 8082b2e:	4628      	mov	r0, r5
 8082b30:	f7ff fe7d 	bl	808282e <_ZN4PMIC12readRegisterEh>
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
 8082b34:	2105      	movs	r1, #5
 8082b36:	f000 02ce 	and.w	r2, r0, #206	; 0xce
 8082b3a:	4628      	mov	r0, r5
 8082b3c:	f7ff fea1 	bl	8082882 <_ZN4PMIC13writeRegisterEhh>
 * Description    :
 * Input          :
 * Return         :
 *******************************************************************************/
bool PMIC::disableWatchdog(void) {
    std::lock_guard<PMIC> l(*this);
 8082b40:	4620      	mov	r0, r4
 8082b42:	f7ff fe6d 	bl	8082820 <_ZNSt10lock_guardI4PMICED1Ev>
    byte DATA = readRegister(CHARGE_TIMER_CONTROL_REGISTER);
    writeRegister(CHARGE_TIMER_CONTROL_REGISTER, (DATA & 0b11001110));
    return 1;
}
 8082b46:	2001      	movs	r0, #1
 8082b48:	b003      	add	sp, #12
 8082b4a:	bd30      	pop	{r4, r5, pc}

08082b4c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
 8082b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8082b4e:	4606      	mov	r6, r0
 8082b50:	460d      	mov	r5, r1
 8082b52:	188f      	adds	r7, r1, r2
  size_t n = 0;
 8082b54:	2400      	movs	r4, #0
  while (size--) {
 8082b56:	42bd      	cmp	r5, r7
 8082b58:	d00c      	beq.n	8082b74 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
 8082b5a:	6833      	ldr	r3, [r6, #0]
 8082b5c:	f815 1b01 	ldrb.w	r1, [r5], #1
 8082b60:	689b      	ldr	r3, [r3, #8]
 8082b62:	4630      	mov	r0, r6
 8082b64:	4798      	blx	r3
     if (chunk>=0)
 8082b66:	2800      	cmp	r0, #0
 8082b68:	db01      	blt.n	8082b6e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
 8082b6a:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
 8082b6c:	e7f3      	b.n	8082b56 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
 8082b6e:	2c00      	cmp	r4, #0
 8082b70:	bf08      	it	eq
 8082b72:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
 8082b74:	4620      	mov	r0, r4
 8082b76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08082b78 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
 8082b78:	b570      	push	{r4, r5, r6, lr}
 8082b7a:	4605      	mov	r5, r0
      if (str == NULL) return 0;
 8082b7c:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
 8082b7e:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
 8082b80:	b149      	cbz	r1, 8082b96 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
 8082b82:	f001 ff16 	bl	80849b2 <strlen>
 8082b86:	682b      	ldr	r3, [r5, #0]
 8082b88:	4602      	mov	r2, r0
 8082b8a:	4621      	mov	r1, r4
 8082b8c:	4628      	mov	r0, r5
    }
 8082b8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
 8082b92:	68db      	ldr	r3, [r3, #12]
 8082b94:	4718      	bx	r3
    }
 8082b96:	bd70      	pop	{r4, r5, r6, pc}

08082b98 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
 8082b98:	6803      	ldr	r3, [r0, #0]
 8082b9a:	689b      	ldr	r3, [r3, #8]
 8082b9c:	4718      	bx	r3

08082b9e <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8082b9e:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
 8082ba0:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
 8082ba2:	4605      	mov	r5, r0
  size_t n = print('\r');
 8082ba4:	f7ff fff8 	bl	8082b98 <_ZN5Print5printEc>
  n += print('\n');
 8082ba8:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
 8082baa:	4604      	mov	r4, r0
  n += print('\n');
 8082bac:	4628      	mov	r0, r5
 8082bae:	f7ff fff3 	bl	8082b98 <_ZN5Print5printEc>
  return n;
}
 8082bb2:	4420      	add	r0, r4
 8082bb4:	bd38      	pop	{r3, r4, r5, pc}

08082bb6 <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
 8082bb6:	b538      	push	{r3, r4, r5, lr}
 8082bb8:	4605      	mov	r5, r0
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
 8082bba:	f7ff ffdd 	bl	8082b78 <_ZN5Print5writeEPKc>
 8082bbe:	4604      	mov	r4, r0
}

size_t Print::println(const char c[])
{
  size_t n = print(c);
  n += println();
 8082bc0:	4628      	mov	r0, r5
 8082bc2:	f7ff ffec 	bl	8082b9e <_ZN5Print7printlnEv>
  return n;
}
 8082bc6:	4420      	add	r0, r4
 8082bc8:	bd38      	pop	{r3, r4, r5, pc}

08082bca <_ZN5Print11printNumberEmh>:
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8082bca:	2a01      	cmp	r2, #1
 8082bcc:	bf98      	it	ls
 8082bce:	220a      	movls	r2, #10
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
 8082bd0:	b530      	push	{r4, r5, lr}
 8082bd2:	460b      	mov	r3, r1
 8082bd4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
 8082bd6:	2100      	movs	r1, #0
 8082bd8:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24
 8082bdc:	f10d 0423 	add.w	r4, sp, #35	; 0x23
  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
    unsigned long m = n;
    n /= base;
 8082be0:	fbb3 f5f2 	udiv	r5, r3, r2
    char c = m - base * n;
 8082be4:	fb05 3312 	mls	r3, r5, r2, r3
 8082be8:	b2db      	uxtb	r3, r3
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
 8082bea:	2b09      	cmp	r3, #9
 8082bec:	bf94      	ite	ls
 8082bee:	3330      	addls	r3, #48	; 0x30
 8082bf0:	3337      	addhi	r3, #55	; 0x37
 8082bf2:	b2db      	uxtb	r3, r3
 8082bf4:	4621      	mov	r1, r4
 8082bf6:	f804 3901 	strb.w	r3, [r4], #-1
 8082bfa:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
 8082bfc:	2d00      	cmp	r5, #0
 8082bfe:	d1ef      	bne.n	8082be0 <_ZN5Print11printNumberEmh+0x16>
    n /= base;
    char c = m - base * n;
    *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
 8082c00:	f7ff ffba 	bl	8082b78 <_ZN5Print5writeEPKc>
}
 8082c04:	b00b      	add	sp, #44	; 0x2c
 8082c06:	bd30      	pop	{r4, r5, pc}

08082c08 <_ZN5Print5printEmi>:
    return printNumber(n, base);
  }
}

size_t Print::print(unsigned long n, int base)
{
 8082c08:	b410      	push	{r4}
  if (base == 0) return write(n);
 8082c0a:	b922      	cbnz	r2, 8082c16 <_ZN5Print5printEmi+0xe>
 8082c0c:	6803      	ldr	r3, [r0, #0]
 8082c0e:	b2c9      	uxtb	r1, r1
 8082c10:	689b      	ldr	r3, [r3, #8]
  else return printNumber(n, base);
}
 8082c12:	bc10      	pop	{r4}
  }
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
 8082c14:	4718      	bx	r3
  else return printNumber(n, base);
 8082c16:	b2d2      	uxtb	r2, r2
}
 8082c18:	bc10      	pop	{r4}
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
 8082c1a:	f7ff bfd6 	b.w	8082bca <_ZN5Print11printNumberEmh>

08082c1e <_ZN5Print5printEhi>:
  return write(c);
}

size_t Print::print(unsigned char b, int base)
{
  return print((unsigned long) b, base);
 8082c1e:	f7ff bff3 	b.w	8082c08 <_ZN5Print5printEmi>

08082c22 <_ZN5Print5printEli>:
{
  return print((unsigned long) n, base);
}

size_t Print::print(long n, int base)
{
 8082c22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8082c26:	4607      	mov	r7, r0
 8082c28:	460e      	mov	r6, r1
  if (base == 0) {
 8082c2a:	4615      	mov	r5, r2
 8082c2c:	b92a      	cbnz	r2, 8082c3a <_ZN5Print5printEli+0x18>
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8082c2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
}

size_t Print::print(long n, int base)
{
  if (base == 0) {
    return write(n);
 8082c32:	6803      	ldr	r3, [r0, #0]
 8082c34:	b2c9      	uxtb	r1, r1
 8082c36:	689b      	ldr	r3, [r3, #8]
 8082c38:	4718      	bx	r3
  } else if (base == 10) {
 8082c3a:	2a0a      	cmp	r2, #10
 8082c3c:	d102      	bne.n	8082c44 <_ZN5Print5printEli+0x22>
    if (n < 0) {
 8082c3e:	2900      	cmp	r1, #0
 8082c40:	da01      	bge.n	8082c46 <_ZN5Print5printEli+0x24>
 8082c42:	e004      	b.n	8082c4e <_ZN5Print5printEli+0x2c>
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8082c44:	b2d2      	uxtb	r2, r2
  }
}
 8082c46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      n = -n;
      return printNumber(n, 10) + t;
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
 8082c4a:	f7ff bfbe 	b.w	8082bca <_ZN5Print11printNumberEmh>
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8082c4e:	212d      	movs	r1, #45	; 0x2d
 8082c50:	f7ff ffa2 	bl	8082b98 <_ZN5Print5printEc>
      n = -n;
      return printNumber(n, 10) + t;
 8082c54:	462a      	mov	r2, r5
{
  if (base == 0) {
    return write(n);
  } else if (base == 10) {
    if (n < 0) {
      int t = print('-');
 8082c56:	4604      	mov	r4, r0
      n = -n;
      return printNumber(n, 10) + t;
 8082c58:	4271      	negs	r1, r6
 8082c5a:	4638      	mov	r0, r7
 8082c5c:	f7ff ffb5 	bl	8082bca <_ZN5Print11printNumberEmh>
 8082c60:	4420      	add	r0, r4
    }
    return printNumber(n, 10);
  } else {
    return printNumber(n, base);
  }
}
 8082c62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08082c66 <_ZN5Print5printEii>:
  return print((unsigned long) b, base);
}

size_t Print::print(int n, int base)
{
  return print((long) n, base);
 8082c66:	f7ff bfdc 	b.w	8082c22 <_ZN5Print5printEli>

08082c6a <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
 8082c6a:	b510      	push	{r4, lr}
 8082c6c:	4604      	mov	r4, r0
 8082c6e:	f7ff f91b 	bl	8081ea8 <_ZNSt14_Function_baseD1Ev>
 8082c72:	4620      	mov	r0, r4
 8082c74:	bd10      	pop	{r4, pc}
	...

08082c78 <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
 8082c78:	4803      	ldr	r0, [pc, #12]	; (8082c88 <_GLOBAL__sub_I_RGB+0x10>)
 8082c7a:	2300      	movs	r3, #0
 8082c7c:	6083      	str	r3, [r0, #8]
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
 8082c7e:	4a03      	ldr	r2, [pc, #12]	; (8082c8c <_GLOBAL__sub_I_RGB+0x14>)
 8082c80:	4903      	ldr	r1, [pc, #12]	; (8082c90 <_GLOBAL__sub_I_RGB+0x18>)
 8082c82:	f000 bc83 	b.w	808358c <__aeabi_atexit>
 8082c86:	bf00      	nop
 8082c88:	200006b4 	.word	0x200006b4
 8082c8c:	20000550 	.word	0x20000550
 8082c90:	08082c6b 	.word	0x08082c6b

08082c94 <_ZN8SPIClassD1Ev>:
  Mutex mutex_;
#endif

public:
  SPIClass(HAL_SPI_Interface spi);
  virtual ~SPIClass() {};
 8082c94:	4770      	bx	lr

08082c96 <_ZN8SPIClassD0Ev>:
 8082c96:	b510      	push	{r4, lr}
 8082c98:	4604      	mov	r4, r0
 8082c9a:	f7fd fa00 	bl	808009e <_ZdlPv>
 8082c9e:	4620      	mov	r0, r4
 8082ca0:	bd10      	pop	{r4, pc}
	...

08082ca4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
  if (!info->enabled || info->default_settings)
    return particle::__SPISettings();
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
 8082ca4:	b570      	push	{r4, r5, r6, lr}
 8082ca6:	4604      	mov	r4, r0
 8082ca8:	460e      	mov	r6, r1
 8082caa:	4b07      	ldr	r3, [pc, #28]	; (8082cc8 <_ZN8SPIClassC1E17HAL_SPI_Interface+0x24>)
    Mutex(os_mutex_t handle) : handle_(handle) {}

    /**
     * Creates a new mutex.
     */
    Mutex() : handle_(nullptr)
 8082cac:	2500      	movs	r5, #0
 8082cae:	6003      	str	r3, [r0, #0]
 8082cb0:	f840 5f0c 	str.w	r5, [r0, #12]!
    {
        os_mutex_create(&handle_);
 8082cb4:	f7fe fcbc 	bl	8081630 <os_mutex_create>
{
  _spi = spi;
  HAL_SPI_Init(_spi);
 8082cb8:	4630      	mov	r0, r6
  return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}

SPIClass::SPIClass(HAL_SPI_Interface spi)
{
  _spi = spi;
 8082cba:	7126      	strb	r6, [r4, #4]
  HAL_SPI_Init(_spi);
 8082cbc:	f7fe fdd8 	bl	8081870 <HAL_SPI_Init>
  dividerReference = SPI_CLK_SYSTEM;     // 0 indicates the system clock
 8082cc0:	60a5      	str	r5, [r4, #8]
}
 8082cc2:	4620      	mov	r0, r4
 8082cc4:	bd70      	pop	{r4, r5, r6, pc}
 8082cc6:	bf00      	nop
 8082cc8:	080857bc 	.word	0x080857bc

08082ccc <_ZN8SPIClass9isEnabledEv>:
  //To Do
}

bool SPIClass::isEnabled()
{
  return HAL_SPI_Is_Enabled(_spi);
 8082ccc:	7900      	ldrb	r0, [r0, #4]
 8082cce:	f7fe bdd7 	b.w	8081880 <HAL_SPI_Is_Enabled>

08082cd2 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
 8082cd2:	b510      	push	{r4, lr}
 8082cd4:	4604      	mov	r4, r0
{
	free(buffer);
 8082cd6:	6800      	ldr	r0, [r0, #0]
 8082cd8:	f7fe ff56 	bl	8081b88 <free>
}
 8082cdc:	4620      	mov	r0, r4
 8082cde:	bd10      	pop	{r4, pc}

08082ce0 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
 8082ce0:	b510      	push	{r4, lr}
 8082ce2:	4604      	mov	r4, r0
	if (buffer) free(buffer);
 8082ce4:	6800      	ldr	r0, [r0, #0]
 8082ce6:	b108      	cbz	r0, 8082cec <_ZN6String10invalidateEv+0xc>
 8082ce8:	f7fe ff4e 	bl	8081b88 <free>
	buffer = NULL;
 8082cec:	2300      	movs	r3, #0
 8082cee:	6023      	str	r3, [r4, #0]
	capacity = len = 0;
 8082cf0:	60a3      	str	r3, [r4, #8]
 8082cf2:	6063      	str	r3, [r4, #4]
 8082cf4:	bd10      	pop	{r4, pc}

08082cf6 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
 8082cf6:	b538      	push	{r3, r4, r5, lr}
 8082cf8:	4604      	mov	r4, r0
 8082cfa:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
 8082cfc:	6800      	ldr	r0, [r0, #0]
 8082cfe:	3101      	adds	r1, #1
 8082d00:	f7fe ff4a 	bl	8081b98 <realloc>
	if (newbuffer) {
 8082d04:	b110      	cbz	r0, 8082d0c <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
 8082d06:	e884 0021 	stmia.w	r4, {r0, r5}
		return 1;
 8082d0a:	2001      	movs	r0, #1
	}
	return 0;
}
 8082d0c:	bd38      	pop	{r3, r4, r5, pc}

08082d0e <_ZN6String7reserveEj>:
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082d0e:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
 8082d10:	6803      	ldr	r3, [r0, #0]
	buffer = NULL;
	capacity = len = 0;
}

unsigned char String::reserve(unsigned int size)
{
 8082d12:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
 8082d14:	b113      	cbz	r3, 8082d1c <_ZN6String7reserveEj+0xe>
 8082d16:	6843      	ldr	r3, [r0, #4]
 8082d18:	428b      	cmp	r3, r1
 8082d1a:	d207      	bcs.n	8082d2c <_ZN6String7reserveEj+0x1e>
	if (changeBuffer(size)) {
 8082d1c:	4620      	mov	r0, r4
 8082d1e:	f7ff ffea 	bl	8082cf6 <_ZN6String12changeBufferEj>
 8082d22:	b120      	cbz	r0, 8082d2e <_ZN6String7reserveEj+0x20>
		if (len == 0) buffer[0] = 0;
 8082d24:	68a3      	ldr	r3, [r4, #8]
 8082d26:	b90b      	cbnz	r3, 8082d2c <_ZN6String7reserveEj+0x1e>
 8082d28:	6822      	ldr	r2, [r4, #0]
 8082d2a:	7013      	strb	r3, [r2, #0]
 8082d2c:	2001      	movs	r0, #1
		return 1;
	}
	return 0;
}
 8082d2e:	bd10      	pop	{r4, pc}

08082d30 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082d30:	b570      	push	{r4, r5, r6, lr}
 8082d32:	460e      	mov	r6, r1
	if (!reserve(length)) {
 8082d34:	4611      	mov	r1, r2
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
 8082d36:	4604      	mov	r4, r0
 8082d38:	4615      	mov	r5, r2
	if (!reserve(length)) {
 8082d3a:	f7ff ffe8 	bl	8082d0e <_ZN6String7reserveEj>
 8082d3e:	b918      	cbnz	r0, 8082d48 <_ZN6String4copyEPKcj+0x18>
		invalidate();
 8082d40:	4620      	mov	r0, r4
 8082d42:	f7ff ffcd 	bl	8082ce0 <_ZN6String10invalidateEv>
		return *this;
 8082d46:	e009      	b.n	8082d5c <_ZN6String4copyEPKcj+0x2c>
	}
	len = length;
	memcpy(buffer, cstr, length);
 8082d48:	462a      	mov	r2, r5
 8082d4a:	4631      	mov	r1, r6
{
	if (!reserve(length)) {
		invalidate();
		return *this;
	}
	len = length;
 8082d4c:	60a5      	str	r5, [r4, #8]
	memcpy(buffer, cstr, length);
 8082d4e:	6820      	ldr	r0, [r4, #0]
 8082d50:	f001 fdc6 	bl	80848e0 <memcpy>
	buffer[len] = 0;
 8082d54:	6822      	ldr	r2, [r4, #0]
 8082d56:	68a3      	ldr	r3, [r4, #8]
 8082d58:	2100      	movs	r1, #0
 8082d5a:	54d1      	strb	r1, [r2, r3]
	return *this;
}
 8082d5c:	4620      	mov	r0, r4
 8082d5e:	bd70      	pop	{r4, r5, r6, pc}

08082d60 <_ZN6StringC1EPK19__FlashStringHelper>:
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082d60:	b538      	push	{r3, r4, r5, lr}
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082d62:	2300      	movs	r3, #0
{
	init();
	*this = value;
}

String::String(const __FlashStringHelper *pstr)
 8082d64:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082d66:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8082d68:	6043      	str	r3, [r0, #4]
	len = 0;
 8082d6a:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082d6c:	7303      	strb	r3, [r0, #12]

String::String(const __FlashStringHelper *pstr)
{
	init();
	const char* cstr = reinterpret_cast<const char*>(pstr);
	if (cstr) copy(cstr, strlen(cstr));
 8082d6e:	460d      	mov	r5, r1
 8082d70:	b139      	cbz	r1, 8082d82 <_ZN6StringC1EPK19__FlashStringHelper+0x22>
 8082d72:	4608      	mov	r0, r1
 8082d74:	f001 fe1d 	bl	80849b2 <strlen>
 8082d78:	4629      	mov	r1, r5
 8082d7a:	4602      	mov	r2, r0
 8082d7c:	4620      	mov	r0, r4
 8082d7e:	f7ff ffd7 	bl	8082d30 <_ZN6String4copyEPKcj>
}
 8082d82:	4620      	mov	r0, r4
 8082d84:	bd38      	pop	{r3, r4, r5, pc}

08082d86 <_ZN6StringaSERKS_>:
}
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
 8082d86:	4288      	cmp	r0, r1
	rhs.len = 0;
}
#endif

String & String::operator = (const String &rhs)
{
 8082d88:	b510      	push	{r4, lr}
 8082d8a:	460b      	mov	r3, r1
 8082d8c:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
 8082d8e:	d007      	beq.n	8082da0 <_ZN6StringaSERKS_+0x1a>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
 8082d90:	6809      	ldr	r1, [r1, #0]
 8082d92:	b119      	cbz	r1, 8082d9c <_ZN6StringaSERKS_+0x16>
 8082d94:	689a      	ldr	r2, [r3, #8]
 8082d96:	f7ff ffcb 	bl	8082d30 <_ZN6String4copyEPKcj>
 8082d9a:	e001      	b.n	8082da0 <_ZN6StringaSERKS_+0x1a>
	else invalidate();
 8082d9c:	f7ff ffa0 	bl	8082ce0 <_ZN6String10invalidateEv>

	return *this;
}
 8082da0:	4620      	mov	r0, r4
 8082da2:	bd10      	pop	{r4, pc}

08082da4 <_ZN6StringC1ERKS_>:
{
	init();
	if (cstr) copy(cstr, length);
}

String::String(const String &value)
 8082da4:	b510      	push	{r4, lr}
 8082da6:	4604      	mov	r4, r0
/*  Memory Management                        */
/*********************************************/

inline void String::init(void)
{
	buffer = NULL;
 8082da8:	2300      	movs	r3, #0
 8082daa:	6003      	str	r3, [r0, #0]
	capacity = 0;
 8082dac:	6043      	str	r3, [r0, #4]
	len = 0;
 8082dae:	6083      	str	r3, [r0, #8]
	flags = 0;
 8082db0:	7303      	strb	r3, [r0, #12]
}

String::String(const String &value)
{
	init();
	*this = value;
 8082db2:	f7ff ffe8 	bl	8082d86 <_ZN6StringaSERKS_>
}
 8082db6:	4620      	mov	r0, r4
 8082db8:	bd10      	pop	{r4, pc}

08082dba <_ZNK6String6equalsEPKc>:
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082dba:	b508      	push	{r3, lr}
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082dbc:	6882      	ldr	r2, [r0, #8]
{
	return (len == s2.len && compareTo(s2) == 0);
}

unsigned char String::equals(const char *cstr) const
{
 8082dbe:	460b      	mov	r3, r1
	if (len == 0) return (cstr == NULL || *cstr == 0);
 8082dc0:	b912      	cbnz	r2, 8082dc8 <_ZNK6String6equalsEPKc+0xe>
 8082dc2:	b919      	cbnz	r1, 8082dcc <_ZNK6String6equalsEPKc+0x12>
 8082dc4:	2001      	movs	r0, #1
 8082dc6:	bd08      	pop	{r3, pc}
	if (cstr == NULL) return buffer[0] == 0;
 8082dc8:	b911      	cbnz	r1, 8082dd0 <_ZNK6String6equalsEPKc+0x16>
 8082dca:	6803      	ldr	r3, [r0, #0]
 8082dcc:	7818      	ldrb	r0, [r3, #0]
 8082dce:	e002      	b.n	8082dd6 <_ZNK6String6equalsEPKc+0x1c>
	return strcmp(buffer, cstr) == 0;
 8082dd0:	6800      	ldr	r0, [r0, #0]
 8082dd2:	f001 fdc1 	bl	8084958 <strcmp>
 8082dd6:	fab0 f080 	clz	r0, r0
 8082dda:	0940      	lsrs	r0, r0, #5
}
 8082ddc:	bd08      	pop	{r3, pc}

08082dde <_ZNK6String8getBytesEPhjj>:
	if (index >= len || !buffer) return 0;
	return buffer[index];
}

void String::getBytes(unsigned char *buf, unsigned int bufsize, unsigned int index) const
{
 8082dde:	b570      	push	{r4, r5, r6, lr}
 8082de0:	460e      	mov	r6, r1
	if (!bufsize || !buf) return;
 8082de2:	b19a      	cbz	r2, 8082e0c <_ZNK6String8getBytesEPhjj+0x2e>
 8082de4:	b191      	cbz	r1, 8082e0c <_ZNK6String8getBytesEPhjj+0x2e>
	if (index >= len) {
 8082de6:	6885      	ldr	r5, [r0, #8]
 8082de8:	429d      	cmp	r5, r3
 8082dea:	d802      	bhi.n	8082df2 <_ZNK6String8getBytesEPhjj+0x14>
		buf[0] = 0;
 8082dec:	2300      	movs	r3, #0
 8082dee:	700b      	strb	r3, [r1, #0]
		return;
 8082df0:	bd70      	pop	{r4, r5, r6, pc}
	}
	unsigned int n = bufsize - 1;
 8082df2:	1e54      	subs	r4, r2, #1
	if (n > len - index) n = len - index;
 8082df4:	1aed      	subs	r5, r5, r3
 8082df6:	42ac      	cmp	r4, r5
 8082df8:	bf28      	it	cs
 8082dfa:	462c      	movcs	r4, r5
	strncpy((char *)buf, buffer + index, n);
 8082dfc:	6801      	ldr	r1, [r0, #0]
 8082dfe:	4622      	mov	r2, r4
 8082e00:	4419      	add	r1, r3
 8082e02:	4630      	mov	r0, r6
 8082e04:	f001 fdf2 	bl	80849ec <strncpy>
	buf[n] = 0;
 8082e08:	2300      	movs	r3, #0
 8082e0a:	5533      	strb	r3, [r6, r4]
 8082e0c:	bd70      	pop	{r4, r5, r6, pc}

08082e0e <_ZN11SystemClass5resetEm>:
    reset(0);
}

void SystemClass::reset(uint32_t data)
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
 8082e0e:	4601      	mov	r1, r0
 8082e10:	2200      	movs	r2, #0
 8082e12:	208c      	movs	r0, #140	; 0x8c
 8082e14:	f7fe bc1c 	b.w	8081650 <HAL_Core_System_Reset_Ex>

08082e18 <_ZN11SystemClass5resetEv>:
    HAL_Core_Enter_Bootloader(persist);
}

void SystemClass::reset(void)
{
    reset(0);
 8082e18:	2000      	movs	r0, #0
 8082e1a:	f7ff bff8 	b.w	8082e0e <_ZN11SystemClass5resetEm>
	...

08082e20 <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE>:
{
    HAL_Core_System_Reset_Ex(RESET_REASON_USER, data, nullptr);
}

SleepResult SystemClass::sleep(Spark_Sleep_TypeDef sleepMode, long seconds, SleepOptionFlags flags)
{
 8082e20:	b510      	push	{r4, lr}
 8082e22:	4604      	mov	r4, r0
 8082e24:	4608      	mov	r0, r1
 8082e26:	4611      	mov	r1, r2
 8082e28:	461a      	mov	r2, r3
    int ret = system_sleep(sleepMode, seconds, flags.value(), NULL);
 8082e2a:	2300      	movs	r3, #0
 8082e2c:	f7fe fdb8 	bl	80819a0 <system_sleep>
    System.sleepResult_ = SleepResult(WAKEUP_REASON_NONE, static_cast<system_error_t>(ret));
 8082e30:	4b06      	ldr	r3, [pc, #24]	; (8082e4c <_ZN11SystemClass5sleepE19Spark_Sleep_TypeDeflN8particle5FlagsI19SleepOptionFlagTypemEE+0x2c>)
 8082e32:	2200      	movs	r2, #0
 8082e34:	701a      	strb	r2, [r3, #0]
 8082e36:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8082e3a:	8058      	strh	r0, [r3, #2]
 8082e3c:	809a      	strh	r2, [r3, #4]
    return System.sleepResult_;
 8082e3e:	681a      	ldr	r2, [r3, #0]
 8082e40:	889b      	ldrh	r3, [r3, #4]
 8082e42:	6022      	str	r2, [r4, #0]
 8082e44:	80a3      	strh	r3, [r4, #4]
}
 8082e46:	4620      	mov	r0, r4
 8082e48:	bd10      	pop	{r4, pc}
 8082e4a:	bf00      	nop
 8082e4c:	200006c4 	.word	0x200006c4

08082e50 <_GLOBAL__sub_I_System>:
    WAKEUP_REASON_RTC = 2,
    WAKEUP_REASON_PIN_OR_RTC = 3
};

struct SleepResult {
    SleepResult() {}
 8082e50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8082e54:	4b03      	ldr	r3, [pc, #12]	; (8082e64 <_GLOBAL__sub_I_System+0x14>)
 8082e56:	2000      	movs	r0, #0
 8082e58:	7018      	strb	r0, [r3, #0]
 8082e5a:	8058      	strh	r0, [r3, #2]
 8082e5c:	809a      	strh	r2, [r3, #4]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
 8082e5e:	f7fe bd8f 	b.w	8081980 <set_system_mode>
 8082e62:	bf00      	nop
 8082e64:	200006c4 	.word	0x200006c4

08082e68 <_ZL22Refresh_UnixTime_Cachel>:
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082e68:	b5f0      	push	{r4, r5, r6, r7, lr}
    unix_time += time_zone_cache;
 8082e6a:	4b14      	ldr	r3, [pc, #80]	; (8082ebc <_ZL22Refresh_UnixTime_Cachel+0x54>)
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8082e6c:	4f14      	ldr	r7, [pc, #80]	; (8082ec0 <_ZL22Refresh_UnixTime_Cachel+0x58>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8082e6e:	681e      	ldr	r6, [r3, #0]
    unix_time += dst_current_cache;
 8082e70:	4b14      	ldr	r3, [pc, #80]	; (8082ec4 <_ZL22Refresh_UnixTime_Cachel+0x5c>)
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
 8082e72:	4406      	add	r6, r0
    unix_time += dst_current_cache;
 8082e74:	6818      	ldr	r0, [r3, #0]
    if(unix_time != unix_time_cache)
 8082e76:	683b      	ldr	r3, [r7, #0]

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
 8082e78:	4406      	add	r6, r0
    if(unix_time != unix_time_cache)
 8082e7a:	429e      	cmp	r6, r3
}
*/

/* Refresh Unix/RTC time cache */
static void Refresh_UnixTime_Cache(time_t unix_time)
{
 8082e7c:	b08b      	sub	sp, #44	; 0x2c
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
 8082e7e:	d01b      	beq.n	8082eb8 <_ZL22Refresh_UnixTime_Cachel+0x50>
 8082e80:	a80a      	add	r0, sp, #40	; 0x28
 8082e82:	f840 6d28 	str.w	r6, [r0, #-40]!

/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
 8082e86:	f001 fc33 	bl	80846f0 <localtime>
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8082e8a:	4604      	mov	r4, r0
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8082e8c:	6943      	ldr	r3, [r0, #20]
	return *calendar_time;
 8082e8e:	ad01      	add	r5, sp, #4
/* Convert Unix/RTC time to Calendar time */
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
 8082e90:	f203 736c 	addw	r3, r3, #1900	; 0x76c
 8082e94:	6143      	str	r3, [r0, #20]
	return *calendar_time;
 8082e96:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082e98:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8082e9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8082e9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8082e9e:	f8d4 e000 	ldr.w	lr, [r4]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082ea2:	4c09      	ldr	r4, [pc, #36]	; (8082ec8 <_ZL22Refresh_UnixTime_Cachel+0x60>)
static struct tm Convert_UnixTime_To_CalendarTime(time_t unix_time)
{
	struct tm *calendar_time;
	calendar_time = localtime(&unix_time);
	calendar_time->tm_year += 1900;
	return *calendar_time;
 8082ea4:	f8c5 e000 	str.w	lr, [r5]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082ea8:	ad01      	add	r5, sp, #4
 8082eaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082eac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8082eae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8082eb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
            unix_time_cache = unix_time;
 8082eb2:	603e      	str	r6, [r7, #0]
{
    unix_time += time_zone_cache;
    unix_time += dst_current_cache;
    if(unix_time != unix_time_cache)
    {
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
 8082eb4:	f8c4 e000 	str.w	lr, [r4]
            unix_time_cache = unix_time;
    }
}
 8082eb8:	b00b      	add	sp, #44	; 0x2c
 8082eba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8082ebc:	200006fc 	.word	0x200006fc
 8082ec0:	200006f8 	.word	0x200006f8
 8082ec4:	200006f4 	.word	0x200006f4
 8082ec8:	200006cc 	.word	0x200006cc

08082ecc <_ZN10CloudClass12syncTimeDoneEv.isra.1>:
    bool syncTimePending(void)
    {
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
 8082ecc:	b508      	push	{r3, lr}
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8082ece:	2000      	movs	r0, #0
 8082ed0:	f7fe fdf2 	bl	8081ab8 <spark_sync_time_pending>
 8082ed4:	b128      	cbz	r0, 8082ee2 <_ZN10CloudClass12syncTimeDoneEv.isra.1+0x16>
    static void sleep(Spark_Sleep_TypeDef sleepMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(sleepMode, seconds); }
    static void sleep(uint16_t wakeUpPin, InterruptMode edgeTriggerMode, long seconds=0) __attribute__ ((deprecated("Please use System.sleep() instead.")))
    { SystemClass::sleep(wakeUpPin, edgeTriggerMode, seconds); }

    static bool connected(void) { return spark_cloud_flag_connected(); }
 8082ed6:	f7fe fdc7 	bl	8081a68 <spark_cloud_flag_connected>
        return connected() && CLOUD_FN(spark_sync_time_pending(nullptr), false);
    }

    bool syncTimeDone(void)
    {
        return !CLOUD_FN(spark_sync_time_pending(nullptr), false) || disconnected();
 8082eda:	f080 0001 	eor.w	r0, r0, #1
 8082ede:	b2c0      	uxtb	r0, r0
 8082ee0:	bd08      	pop	{r3, pc}
 8082ee2:	2001      	movs	r0, #1
    }
 8082ee4:	bd08      	pop	{r3, pc}
	...

08082ee8 <_ZN9TimeClass4zoneEf>:
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8082ee8:	b510      	push	{r4, lr}
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8082eea:	4909      	ldr	r1, [pc, #36]	; (8082f10 <_ZN9TimeClass4zoneEf+0x28>)
	return HAL_RTC_Get_UnixTime()+time_zone_cache+dst_current_cache;
}

/* set the time zone (+/-) offset from GMT */
void TimeClass::zone(float GMT_Offset)
{
 8082eec:	4604      	mov	r4, r0
	if(GMT_Offset < -12 || GMT_Offset > 14)
 8082eee:	f001 fb63 	bl	80845b8 <__aeabi_fcmplt>
 8082ef2:	b960      	cbnz	r0, 8082f0e <_ZN9TimeClass4zoneEf+0x26>
 8082ef4:	4907      	ldr	r1, [pc, #28]	; (8082f14 <_ZN9TimeClass4zoneEf+0x2c>)
 8082ef6:	4620      	mov	r0, r4
 8082ef8:	f001 fb7c 	bl	80845f4 <__aeabi_fcmpgt>
 8082efc:	b938      	cbnz	r0, 8082f0e <_ZN9TimeClass4zoneEf+0x26>
	{
		return;
	}
	time_zone_cache = GMT_Offset * 3600;
 8082efe:	4906      	ldr	r1, [pc, #24]	; (8082f18 <_ZN9TimeClass4zoneEf+0x30>)
 8082f00:	4620      	mov	r0, r4
 8082f02:	f001 f9bb 	bl	808427c <__aeabi_fmul>
 8082f06:	f001 fb7f 	bl	8084608 <__aeabi_f2iz>
 8082f0a:	4b04      	ldr	r3, [pc, #16]	; (8082f1c <_ZN9TimeClass4zoneEf+0x34>)
 8082f0c:	6018      	str	r0, [r3, #0]
 8082f0e:	bd10      	pop	{r4, pc}
 8082f10:	c1400000 	.word	0xc1400000
 8082f14:	41600000 	.word	0x41600000
 8082f18:	45610000 	.word	0x45610000
 8082f1c:	200006fc 	.word	0x200006fc

08082f20 <_ZN9TimeClass7timeStrEl>:
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8082f20:	b537      	push	{r0, r1, r2, r4, r5, lr}
	t += time_zone_cache;
    t += dst_current_cache;
 8082f22:	4b0e      	ldr	r3, [pc, #56]	; (8082f5c <_ZN9TimeClass7timeStrEl+0x3c>)
    system_notify_time_changed((uint32_t)time_changed_manually, nullptr, nullptr);
}

/* return string representation for the given time */
String TimeClass::timeStr(time_t t)
{
 8082f24:	4604      	mov	r4, r0
	t += time_zone_cache;
    t += dst_current_cache;
 8082f26:	681b      	ldr	r3, [r3, #0]
 8082f28:	a802      	add	r0, sp, #8
 8082f2a:	4419      	add	r1, r3
 8082f2c:	4b0c      	ldr	r3, [pc, #48]	; (8082f60 <_ZN9TimeClass7timeStrEl+0x40>)
 8082f2e:	681b      	ldr	r3, [r3, #0]
 8082f30:	4419      	add	r1, r3
 8082f32:	f840 1d04 	str.w	r1, [r0, #-4]!
	tm* calendar_time = localtime(&t);
 8082f36:	f001 fbdb 	bl	80846f0 <localtime>
        char* ascstr = asctime(calendar_time);
 8082f3a:	f001 fb8b 	bl	8084654 <asctime>
 8082f3e:	4605      	mov	r5, r0
        int len = strlen(ascstr);
 8082f40:	f001 fd37 	bl	80849b2 <strlen>
        ascstr[len-1] = 0; // remove final newline
 8082f44:	2300      	movs	r3, #0
 8082f46:	4428      	add	r0, r5
 8082f48:	f800 3c01 	strb.w	r3, [r0, #-1]
	return String(ascstr);
 8082f4c:	4629      	mov	r1, r5
 8082f4e:	4620      	mov	r0, r4
 8082f50:	f7ff ff06 	bl	8082d60 <_ZN6StringC1EPK19__FlashStringHelper>
}
 8082f54:	4620      	mov	r0, r4
 8082f56:	b003      	add	sp, #12
 8082f58:	bd30      	pop	{r4, r5, pc}
 8082f5a:	bf00      	nop
 8082f5c:	200006fc 	.word	0x200006fc
 8082f60:	200006f4 	.word	0x200006f4

08082f64 <_ZN9TimeClass7isValidEv>:
    strftime(buf, 50, format_str, calendar_time);
    return String(buf);
}

bool TimeClass::isValid()
{
 8082f64:	b510      	push	{r4, lr}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
 8082f66:	2000      	movs	r0, #0
 8082f68:	f7fe fbc2 	bl	80816f0 <HAL_RTC_Time_Is_Valid>
    if (rtcstate)
 8082f6c:	4604      	mov	r4, r0
 8082f6e:	b968      	cbnz	r0, 8082f8c <_ZN9TimeClass7isValidEv+0x28>
    }

    static System_Mode_TypeDef mode(void) {
        return system_mode();
 8082f70:	f7fe fcfe 	bl	8081970 <system_mode>
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
 8082f74:	2801      	cmp	r0, #1
 8082f76:	d10b      	bne.n	8082f90 <_ZN9TimeClass7isValidEv+0x2c>
 8082f78:	4620      	mov	r0, r4
 8082f7a:	f7fe fd31 	bl	80819e0 <system_thread_get_state>
 8082f7e:	b938      	cbnz	r0, 8082f90 <_ZN9TimeClass7isValidEv+0x2c>
    {
        waitUntil(Particle.syncTimeDone);
 8082f80:	f7ff ffa4 	bl	8082ecc <_ZN10CloudClass12syncTimeDoneEv.isra.1>


    static uint32_t freeMemory();

    template<typename Condition, typename While> static bool waitConditionWhile(Condition _condition, While _while) {
        while (_while() && !_condition()) {
 8082f84:	b930      	cbnz	r0, 8082f94 <_ZN9TimeClass7isValidEv+0x30>
            spark_process();
 8082f86:	f7fe fd57 	bl	8081a38 <spark_process>
 8082f8a:	e7f9      	b.n	8082f80 <_ZN9TimeClass7isValidEv+0x1c>

bool TimeClass::isValid()
{
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
 8082f8c:	2001      	movs	r0, #1
 8082f8e:	bd10      	pop	{r4, pc}
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
        return HAL_RTC_Time_Is_Valid(nullptr);
    }
    return rtcstate;
 8082f90:	2000      	movs	r0, #0
 8082f92:	bd10      	pop	{r4, pc}
    bool rtcstate = HAL_RTC_Time_Is_Valid(nullptr);
    if (rtcstate)
        return rtcstate;
    if (System.mode() == AUTOMATIC && system_thread_get_state(nullptr) == spark::feature::DISABLED)
    {
        waitUntil(Particle.syncTimeDone);
 8082f94:	f7ff ff9a 	bl	8082ecc <_ZN10CloudClass12syncTimeDoneEv.isra.1>
        return HAL_RTC_Time_Is_Valid(nullptr);
 8082f98:	2000      	movs	r0, #0
 8082f9a:	f7fe fba9 	bl	80816f0 <HAL_RTC_Time_Is_Valid>
 8082f9e:	3000      	adds	r0, #0
 8082fa0:	bf18      	it	ne
 8082fa2:	2001      	movne	r0, #1
    }
    return rtcstate;
}
 8082fa4:	bd10      	pop	{r4, pc}

08082fa6 <_ZN9TimeClass3nowEv>:
	return calendar_time_cache.tm_year;
}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
 8082fa6:	b508      	push	{r3, lr}
    (void)isValid();
 8082fa8:	f7ff ffdc 	bl	8082f64 <_ZN9TimeClass7isValidEv>
	return HAL_RTC_Get_UnixTime();
}
 8082fac:	e8bd 4008 	ldmia.w	sp!, {r3, lr}

/* return the current time as seconds since Jan 1 1970 */
time_t TimeClass::now()
{
    (void)isValid();
	return HAL_RTC_Get_UnixTime();
 8082fb0:	f7fe bb76 	b.w	80816a0 <HAL_RTC_Get_UnixTime>

08082fb4 <_ZN9TimeClass4hourEv>:

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;

/* current hour */
int TimeClass::hour()
{
 8082fb4:	b508      	push	{r3, lr}
	return hour(now());
 8082fb6:	f7ff fff6 	bl	8082fa6 <_ZN9TimeClass3nowEv>
}

/* the hour for the given time */
int TimeClass::hour(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082fba:	f7ff ff55 	bl	8082e68 <_ZL22Refresh_UnixTime_Cachel>

/* current hour */
int TimeClass::hour()
{
	return hour(now());
}
 8082fbe:	4b01      	ldr	r3, [pc, #4]	; (8082fc4 <_ZN9TimeClass4hourEv+0x10>)
 8082fc0:	6898      	ldr	r0, [r3, #8]
 8082fc2:	bd08      	pop	{r3, pc}
 8082fc4:	200006cc 	.word	0x200006cc

08082fc8 <_ZN9TimeClass6minuteEv>:
	return (hour(t) >= 12);
}

/* current minute */
int TimeClass::minute()
{
 8082fc8:	b508      	push	{r3, lr}
	return minute(now());
 8082fca:	f7ff ffec 	bl	8082fa6 <_ZN9TimeClass3nowEv>
}

/* the minute for the given time */
int TimeClass::minute(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082fce:	f7ff ff4b 	bl	8082e68 <_ZL22Refresh_UnixTime_Cachel>

/* current minute */
int TimeClass::minute()
{
	return minute(now());
}
 8082fd2:	4b01      	ldr	r3, [pc, #4]	; (8082fd8 <_ZN9TimeClass6minuteEv+0x10>)
 8082fd4:	6858      	ldr	r0, [r3, #4]
 8082fd6:	bd08      	pop	{r3, pc}
 8082fd8:	200006cc 	.word	0x200006cc

08082fdc <_ZN9TimeClass3dayEv>:
	return calendar_time_cache.tm_sec;
}

/* current day */
int TimeClass::day()
{
 8082fdc:	b508      	push	{r3, lr}
	return day(now());
 8082fde:	f7ff ffe2 	bl	8082fa6 <_ZN9TimeClass3nowEv>
}

/* the day for the given time */
int TimeClass::day(time_t t)
{
	Refresh_UnixTime_Cache(t);
 8082fe2:	f7ff ff41 	bl	8082e68 <_ZL22Refresh_UnixTime_Cachel>

/* current day */
int TimeClass::day()
{
	return day(now());
}
 8082fe6:	4b01      	ldr	r3, [pc, #4]	; (8082fec <_ZN9TimeClass3dayEv+0x10>)
 8082fe8:	68d8      	ldr	r0, [r3, #12]
 8082fea:	bd08      	pop	{r3, pc}
 8082fec:	200006cc 	.word	0x200006cc

08082ff0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
 8082ff0:	4b02      	ldr	r3, [pc, #8]	; (8082ffc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
 8082ff2:	681a      	ldr	r2, [r3, #0]
 8082ff4:	4b02      	ldr	r3, [pc, #8]	; (8083000 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
 8082ff6:	601a      	str	r2, [r3, #0]
 8082ff8:	4770      	bx	lr
 8082ffa:	bf00      	nop
 8082ffc:	20000498 	.word	0x20000498
 8083000:	200006f0 	.word	0x200006f0

08083004 <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
 8083004:	4770      	bx	lr

08083006 <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 8083006:	7441      	strb	r1, [r0, #17]
 8083008:	4770      	bx	lr

0808300a <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
  return HAL_USART_Available_Data_For_Write(_serial);
 808300a:	7c00      	ldrb	r0, [r0, #16]
 808300c:	f7fe bc78 	b.w	8081900 <HAL_USART_Available_Data_For_Write>

08083010 <_ZN11USARTSerial9availableEv>:
}

int USARTSerial::available(void)
{
  return HAL_USART_Available_Data(_serial);
 8083010:	7c00      	ldrb	r0, [r0, #16]
 8083012:	f7fe bc4d 	b.w	80818b0 <HAL_USART_Available_Data>

08083016 <_ZN11USARTSerial4peekEv>:
}

int USARTSerial::peek(void)
{
  return HAL_USART_Peek_Data(_serial);
 8083016:	7c00      	ldrb	r0, [r0, #16]
 8083018:	f7fe bc5a 	b.w	80818d0 <HAL_USART_Peek_Data>

0808301c <_ZN11USARTSerial4readEv>:
}

int USARTSerial::read(void)
{
  return HAL_USART_Read_Data(_serial);
 808301c:	7c00      	ldrb	r0, [r0, #16]
 808301e:	f7fe bc4f 	b.w	80818c0 <HAL_USART_Read_Data>

08083022 <_ZN11USARTSerial5flushEv>:
}

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
 8083022:	7c00      	ldrb	r0, [r0, #16]
 8083024:	f7fe bc5c 	b.w	80818e0 <HAL_USART_Flush_Data>

08083028 <_ZN11USARTSerialD0Ev>:
 8083028:	b510      	push	{r4, lr}
 808302a:	4604      	mov	r4, r0
 808302c:	f7fd f837 	bl	808009e <_ZdlPv>
 8083030:	4620      	mov	r0, r4
 8083032:	bd10      	pop	{r4, pc}

08083034 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
 8083034:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 8083036:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
 8083038:	4604      	mov	r4, r0
 808303a:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
 808303c:	b925      	cbnz	r5, 8083048 <_ZN11USARTSerial5writeEh+0x14>
 808303e:	7c00      	ldrb	r0, [r0, #16]
 8083040:	f7fe fc5e 	bl	8081900 <HAL_USART_Available_Data_For_Write>
 8083044:	2800      	cmp	r0, #0
 8083046:	dd05      	ble.n	8083054 <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8083048:	4631      	mov	r1, r6
 808304a:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
 808304c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
 8083050:	f7fe bc26 	b.w	80818a0 <HAL_USART_Write_Data>
  }
  return 0;
}
 8083054:	4628      	mov	r0, r5
 8083056:	bd70      	pop	{r4, r5, r6, pc}

08083058 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 8083058:	b510      	push	{r4, lr}
 808305a:	4604      	mov	r4, r0
 808305c:	4608      	mov	r0, r1
 808305e:	4611      	mov	r1, r2
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
 8083060:	2200      	movs	r2, #0
 8083062:	6062      	str	r2, [r4, #4]
 8083064:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8083068:	60a2      	str	r2, [r4, #8]
 808306a:	4a05      	ldr	r2, [pc, #20]	; (8083080 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
{
  _serial = serial;
 808306c:	7420      	strb	r0, [r4, #16]
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
 808306e:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
 8083070:	2201      	movs	r2, #1
 8083072:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
 8083074:	461a      	mov	r2, r3
 8083076:	f7fe fc0b 	bl	8081890 <HAL_USART_Init>
}
 808307a:	4620      	mov	r0, r4
 808307c:	bd10      	pop	{r4, pc}
 808307e:	bf00      	nop
 8083080:	080857f4 	.word	0x080857f4

08083084 <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
 8083084:	7c00      	ldrb	r0, [r0, #16]
 8083086:	f7fe bc33 	b.w	80818f0 <HAL_USART_Is_Enabled>
	...

0808308c <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
 808308c:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
 808308e:	4d0c      	ldr	r5, [pc, #48]	; (80830c0 <_Z22__fetch_global_Serial1v+0x34>)
 8083090:	6829      	ldr	r1, [r5, #0]
 8083092:	f011 0401 	ands.w	r4, r1, #1
 8083096:	d111      	bne.n	80830bc <_Z22__fetch_global_Serial1v+0x30>
 8083098:	4628      	mov	r0, r5
 808309a:	f7fd f802 	bl	80800a2 <__cxa_guard_acquire>
 808309e:	b168      	cbz	r0, 80830bc <_Z22__fetch_global_Serial1v+0x30>
 80830a0:	4a08      	ldr	r2, [pc, #32]	; (80830c4 <_Z22__fetch_global_Serial1v+0x38>)
 80830a2:	4621      	mov	r1, r4
 80830a4:	4b08      	ldr	r3, [pc, #32]	; (80830c8 <_Z22__fetch_global_Serial1v+0x3c>)
 80830a6:	4809      	ldr	r0, [pc, #36]	; (80830cc <_Z22__fetch_global_Serial1v+0x40>)
 80830a8:	f7ff ffd6 	bl	8083058 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
 80830ac:	4628      	mov	r0, r5
 80830ae:	f7fc fffd 	bl	80800ac <__cxa_guard_release>
 80830b2:	4a07      	ldr	r2, [pc, #28]	; (80830d0 <_Z22__fetch_global_Serial1v+0x44>)
 80830b4:	4907      	ldr	r1, [pc, #28]	; (80830d4 <_Z22__fetch_global_Serial1v+0x48>)
 80830b6:	4805      	ldr	r0, [pc, #20]	; (80830cc <_Z22__fetch_global_Serial1v+0x40>)
 80830b8:	f000 fa68 	bl	808358c <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
 80830bc:	4803      	ldr	r0, [pc, #12]	; (80830cc <_Z22__fetch_global_Serial1v+0x40>)
 80830be:	bd38      	pop	{r3, r4, r5, pc}
 80830c0:	20000798 	.word	0x20000798
 80830c4:	2000079c 	.word	0x2000079c
 80830c8:	20000714 	.word	0x20000714
 80830cc:	20000700 	.word	0x20000700
 80830d0:	20000550 	.word	0x20000550
 80830d4:	08083005 	.word	0x08083005

080830d8 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
 80830d8:	7441      	strb	r1, [r0, #17]
 80830da:	4770      	bx	lr

080830dc <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
 80830dc:	4770      	bx	lr

080830de <_ZN9USBSerial4readEv>:


// Read data from buffer
int USBSerial::read()
{
	return HAL_USB_USART_Receive_Data(_serial, false);
 80830de:	2100      	movs	r1, #0
 80830e0:	7c00      	ldrb	r0, [r0, #16]
 80830e2:	f7fe bc2d 	b.w	8081940 <HAL_USB_USART_Receive_Data>

080830e6 <_ZN9USBSerial4peekEv>:
  _blocking = block;
}

int USBSerial::peek()
{
	return HAL_USB_USART_Receive_Data(_serial, true);
 80830e6:	2101      	movs	r1, #1
 80830e8:	7c00      	ldrb	r0, [r0, #16]
 80830ea:	f7fe bc29 	b.w	8081940 <HAL_USB_USART_Receive_Data>

080830ee <_ZN9USBSerial17availableForWriteEv>:
	return HAL_USB_USART_Receive_Data(_serial, false);
}

int USBSerial::availableForWrite()
{
  return HAL_USB_USART_Available_Data_For_Write(_serial);
 80830ee:	7c00      	ldrb	r0, [r0, #16]
 80830f0:	f7fe bc1e 	b.w	8081930 <HAL_USB_USART_Available_Data_For_Write>

080830f4 <_ZN9USBSerial9availableEv>:
}

int USBSerial::available()
{
	return HAL_USB_USART_Available_Data(_serial);
 80830f4:	7c00      	ldrb	r0, [r0, #16]
 80830f6:	f7fe bc13 	b.w	8081920 <HAL_USB_USART_Available_Data>

080830fa <_ZN9USBSerial5writeEh>:
}

size_t USBSerial::write(uint8_t byte)
{
 80830fa:	b538      	push	{r3, r4, r5, lr}
 80830fc:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 80830fe:	7c00      	ldrb	r0, [r0, #16]
{
	return HAL_USB_USART_Available_Data(_serial);
}

size_t USBSerial::write(uint8_t byte)
{
 8083100:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
 8083102:	f7fe fc15 	bl	8081930 <HAL_USB_USART_Available_Data_For_Write>
 8083106:	2800      	cmp	r0, #0
 8083108:	dc01      	bgt.n	808310e <_ZN9USBSerial5writeEh+0x14>
 808310a:	7c60      	ldrb	r0, [r4, #17]
 808310c:	b120      	cbz	r0, 8083118 <_ZN9USBSerial5writeEh+0x1e>
    HAL_USB_USART_Send_Data(_serial, byte);
 808310e:	4629      	mov	r1, r5
 8083110:	7c20      	ldrb	r0, [r4, #16]
 8083112:	f7fe fc1d 	bl	8081950 <HAL_USB_USART_Send_Data>
    return 1;
 8083116:	2001      	movs	r0, #1
  }
  return 0;
}
 8083118:	bd38      	pop	{r3, r4, r5, pc}

0808311a <_ZN9USBSerial5flushEv>:

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
 808311a:	7c00      	ldrb	r0, [r0, #16]
 808311c:	f7fe bc20 	b.w	8081960 <HAL_USB_USART_Flush_Data>

08083120 <_ZN9USBSerialD0Ev>:
 8083120:	b510      	push	{r4, lr}
 8083122:	4604      	mov	r4, r0
 8083124:	f7fc ffbb 	bl	808009e <_ZdlPv>
 8083128:	4620      	mov	r0, r4
 808312a:	bd10      	pop	{r4, pc}

0808312c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
 808312c:	b510      	push	{r4, lr}
 808312e:	4604      	mov	r4, r0
 8083130:	2300      	movs	r3, #0
 8083132:	6063      	str	r3, [r4, #4]
 8083134:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8083138:	60a3      	str	r3, [r4, #8]
 808313a:	4b05      	ldr	r3, [pc, #20]	; (8083150 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
 808313c:	4608      	mov	r0, r1
 808313e:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
 8083140:	2301      	movs	r3, #1
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
{
  _serial = serial;
 8083142:	7421      	strb	r1, [r4, #16]
  _blocking = true;
 8083144:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
 8083146:	4611      	mov	r1, r2
 8083148:	f7fe fbe2 	bl	8081910 <HAL_USB_USART_Init>
}
 808314c:	4620      	mov	r0, r4
 808314e:	bd10      	pop	{r4, pc}
 8083150:	08085824 	.word	0x08085824

08083154 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
 8083154:	b510      	push	{r4, lr}
 8083156:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 8083158:	2214      	movs	r2, #20
 808315a:	2100      	movs	r1, #0
 808315c:	f001 fbcb 	bl	80848f6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8083160:	4b05      	ldr	r3, [pc, #20]	; (8083178 <_Z19acquireSerialBufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 8083162:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t serial_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t serial_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = serial_rx_buffer;
 8083164:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = serial_tx_buffer;
 8083166:	4b05      	ldr	r3, [pc, #20]	; (808317c <_Z19acquireSerialBufferv+0x28>)
 8083168:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 808316a:	f240 1301 	movw	r3, #257	; 0x101
 808316e:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 8083170:	2381      	movs	r3, #129	; 0x81
 8083172:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 8083174:	bd10      	pop	{r4, pc}
 8083176:	bf00      	nop
 8083178:	200008a5 	.word	0x200008a5
 808317c:	20000824 	.word	0x20000824

08083180 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
 8083180:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 8083182:	4d0e      	ldr	r5, [pc, #56]	; (80831bc <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
 8083184:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
 8083186:	a801      	add	r0, sp, #4
 8083188:	f7ff ffe4 	bl	8083154 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
 808318c:	6829      	ldr	r1, [r5, #0]
 808318e:	f011 0401 	ands.w	r4, r1, #1
 8083192:	d110      	bne.n	80831b6 <_Z16_fetch_usbserialv+0x36>
 8083194:	4628      	mov	r0, r5
 8083196:	f7fc ff84 	bl	80800a2 <__cxa_guard_acquire>
 808319a:	b160      	cbz	r0, 80831b6 <_Z16_fetch_usbserialv+0x36>
 808319c:	aa01      	add	r2, sp, #4
 808319e:	4621      	mov	r1, r4
 80831a0:	4807      	ldr	r0, [pc, #28]	; (80831c0 <_Z16_fetch_usbserialv+0x40>)
 80831a2:	f7ff ffc3 	bl	808312c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 80831a6:	4628      	mov	r0, r5
 80831a8:	f7fc ff80 	bl	80800ac <__cxa_guard_release>
 80831ac:	4a05      	ldr	r2, [pc, #20]	; (80831c4 <_Z16_fetch_usbserialv+0x44>)
 80831ae:	4906      	ldr	r1, [pc, #24]	; (80831c8 <_Z16_fetch_usbserialv+0x48>)
 80831b0:	4803      	ldr	r0, [pc, #12]	; (80831c0 <_Z16_fetch_usbserialv+0x40>)
 80831b2:	f000 f9eb 	bl	808358c <__aeabi_atexit>
	return _usbserial;
}
 80831b6:	4802      	ldr	r0, [pc, #8]	; (80831c0 <_Z16_fetch_usbserialv+0x40>)
 80831b8:	b007      	add	sp, #28
 80831ba:	bd30      	pop	{r4, r5, pc}
 80831bc:	20000820 	.word	0x20000820
 80831c0:	200009a8 	.word	0x200009a8
 80831c4:	20000550 	.word	0x20000550
 80831c8:	080830dd 	.word	0x080830dd

080831cc <_Z23acquireUSBSerial1Bufferv>:

#if Wiring_USBSerial1

HAL_USB_USART_Config __attribute__((weak)) acquireUSBSerial1Buffer()
{
 80831cc:	b510      	push	{r4, lr}
 80831ce:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
 80831d0:	2214      	movs	r2, #20
 80831d2:	2100      	movs	r1, #0
 80831d4:	f001 fb8f 	bl	80848f6 <memset>

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80831d8:	4b05      	ldr	r3, [pc, #20]	; (80831f0 <_Z23acquireUSBSerial1Bufferv+0x24>)
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
 80831da:	4620      	mov	r0, r4

#if defined(USB_SERIAL_USERSPACE_BUFFERS) && ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
  static uint8_t usbserial1_rx_buffer[USB_RX_BUFFER_SIZE];
  static uint8_t usbserial1_tx_buffer[USB_TX_BUFFER_SIZE];

  conf.rx_buffer = usbserial1_rx_buffer;
 80831dc:	6063      	str	r3, [r4, #4]
  conf.tx_buffer = usbserial1_tx_buffer;
 80831de:	4b05      	ldr	r3, [pc, #20]	; (80831f4 <_Z23acquireUSBSerial1Bufferv+0x28>)
 80831e0:	60e3      	str	r3, [r4, #12]
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
 80831e2:	f240 1301 	movw	r3, #257	; 0x101
 80831e6:	8123      	strh	r3, [r4, #8]
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
 80831e8:	2381      	movs	r3, #129	; 0x81
 80831ea:	8223      	strh	r3, [r4, #16]
#endif

  return conf;
}
 80831ec:	bd10      	pop	{r4, pc}
 80831ee:	bf00      	nop
 80831f0:	20000a58 	.word	0x20000a58
 80831f4:	200009c0 	.word	0x200009c0

080831f8 <_Z17_fetch_usbserial1v>:

USBSerial& _fetch_usbserial1()
{
 80831f8:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 80831fa:	4c0e      	ldr	r4, [pc, #56]	; (8083234 <_Z17_fetch_usbserial1v+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial1()
{
 80831fc:	b086      	sub	sp, #24
  HAL_USB_USART_Config conf = acquireUSBSerial1Buffer();
 80831fe:	a801      	add	r0, sp, #4
 8083200:	f7ff ffe4 	bl	80831cc <_Z23acquireUSBSerial1Bufferv>
  static USBSerial _usbserial1(HAL_USB_USART_SERIAL1, conf);
 8083204:	6823      	ldr	r3, [r4, #0]
 8083206:	07db      	lsls	r3, r3, #31
 8083208:	d410      	bmi.n	808322c <_Z17_fetch_usbserial1v+0x34>
 808320a:	4620      	mov	r0, r4
 808320c:	f7fc ff49 	bl	80800a2 <__cxa_guard_acquire>
 8083210:	b160      	cbz	r0, 808322c <_Z17_fetch_usbserial1v+0x34>
 8083212:	aa01      	add	r2, sp, #4
 8083214:	2101      	movs	r1, #1
 8083216:	4808      	ldr	r0, [pc, #32]	; (8083238 <_Z17_fetch_usbserial1v+0x40>)
 8083218:	f7ff ff88 	bl	808312c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
 808321c:	4620      	mov	r0, r4
 808321e:	f7fc ff45 	bl	80800ac <__cxa_guard_release>
 8083222:	4a06      	ldr	r2, [pc, #24]	; (808323c <_Z17_fetch_usbserial1v+0x44>)
 8083224:	4906      	ldr	r1, [pc, #24]	; (8083240 <_Z17_fetch_usbserial1v+0x48>)
 8083226:	4804      	ldr	r0, [pc, #16]	; (8083238 <_Z17_fetch_usbserial1v+0x40>)
 8083228:	f000 f9b0 	bl	808358c <__aeabi_atexit>
  return _usbserial1;
}
 808322c:	4802      	ldr	r0, [pc, #8]	; (8083238 <_Z17_fetch_usbserial1v+0x40>)
 808322e:	b006      	add	sp, #24
 8083230:	bd10      	pop	{r4, pc}
 8083232:	bf00      	nop
 8083234:	200009bc 	.word	0x200009bc
 8083238:	20000a44 	.word	0x20000a44
 808323c:	20000550 	.word	0x20000550
 8083240:	080830dd 	.word	0x080830dd

08083244 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
 8083244:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
 8083246:	4b18      	ldr	r3, [pc, #96]	; (80832a8 <serialEventRun+0x64>)
 8083248:	b133      	cbz	r3, 8083258 <serialEventRun+0x14>
 808324a:	f7ff ff99 	bl	8083180 <_Z16_fetch_usbserialv>
 808324e:	6803      	ldr	r3, [r0, #0]
 8083250:	691b      	ldr	r3, [r3, #16]
 8083252:	4798      	blx	r3
 8083254:	2800      	cmp	r0, #0
 8083256:	dc1e      	bgt.n	8083296 <serialEventRun+0x52>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
 8083258:	4b14      	ldr	r3, [pc, #80]	; (80832ac <serialEventRun+0x68>)
 808325a:	b133      	cbz	r3, 808326a <serialEventRun+0x26>
 808325c:	f7ff ff16 	bl	808308c <_Z22__fetch_global_Serial1v>
 8083260:	6803      	ldr	r3, [r0, #0]
 8083262:	691b      	ldr	r3, [r3, #16]
 8083264:	4798      	blx	r3
 8083266:	2800      	cmp	r0, #0
 8083268:	dc18      	bgt.n	808329c <serialEventRun+0x58>
        serialEvent1();

#if Wiring_Serial2
    if (serialEventRun2) serialEventRun2();
 808326a:	4b11      	ldr	r3, [pc, #68]	; (80832b0 <serialEventRun+0x6c>)
 808326c:	b10b      	cbz	r3, 8083272 <serialEventRun+0x2e>
 808326e:	f3af 8000 	nop.w
#if Wiring_Serial3
    if (serialEventRun3) serialEventRun3();
#endif

#if Wiring_Serial4
    if (serialEventRun4) serialEventRun4();
 8083272:	4b10      	ldr	r3, [pc, #64]	; (80832b4 <serialEventRun+0x70>)
 8083274:	b10b      	cbz	r3, 808327a <serialEventRun+0x36>
 8083276:	f3af 8000 	nop.w
#endif

#if Wiring_Serial5
    if (serialEventRun5) serialEventRun5();
 808327a:	4b0f      	ldr	r3, [pc, #60]	; (80832b8 <serialEventRun+0x74>)
 808327c:	b10b      	cbz	r3, 8083282 <serialEventRun+0x3e>
 808327e:	f3af 8000 	nop.w
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
 8083282:	4b0e      	ldr	r3, [pc, #56]	; (80832bc <serialEventRun+0x78>)
 8083284:	b17b      	cbz	r3, 80832a6 <serialEventRun+0x62>
 8083286:	f7ff ffb7 	bl	80831f8 <_Z17_fetch_usbserial1v>
 808328a:	6803      	ldr	r3, [r0, #0]
 808328c:	691b      	ldr	r3, [r3, #16]
 808328e:	4798      	blx	r3
 8083290:	2800      	cmp	r0, #0
 8083292:	dc06      	bgt.n	80832a2 <serialEventRun+0x5e>
 8083294:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
 8083296:	f3af 8000 	nop.w
 808329a:	e7dd      	b.n	8083258 <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
 808329c:	f3af 8000 	nop.w
 80832a0:	e7e3      	b.n	808326a <serialEventRun+0x26>
    if (serialEventRun5) serialEventRun5();
#endif

#if Wiring_USBSerial1
    if (usbSerialEvent1 && USBSerial1.available()>0)
        usbSerialEvent1();
 80832a2:	f3af 8000 	nop.w
 80832a6:	bd08      	pop	{r3, pc}
	...

080832c0 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
 80832c0:	b508      	push	{r3, lr}
	serialEventRun();
 80832c2:	f7ff ffbf 	bl	8083244 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
 80832c6:	f7fe f9e3 	bl	8081690 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
 80832ca:	4b01      	ldr	r3, [pc, #4]	; (80832d0 <_post_loop+0x10>)
 80832cc:	6018      	str	r0, [r3, #0]
 80832ce:	bd08      	pop	{r3, pc}
 80832d0:	20000b64 	.word	0x20000b64

080832d4 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
 80832d4:	4802      	ldr	r0, [pc, #8]	; (80832e0 <_Z33system_initialize_user_backup_ramv+0xc>)
 80832d6:	4a03      	ldr	r2, [pc, #12]	; (80832e4 <_Z33system_initialize_user_backup_ramv+0x10>)
 80832d8:	4903      	ldr	r1, [pc, #12]	; (80832e8 <_Z33system_initialize_user_backup_ramv+0x14>)
 80832da:	1a12      	subs	r2, r2, r0
 80832dc:	f001 bb00 	b.w	80848e0 <memcpy>
 80832e0:	40024000 	.word	0x40024000
 80832e4:	40024004 	.word	0x40024004
 80832e8:	08085ae0 	.word	0x08085ae0

080832ec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
 80832ec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 80832ee:	2300      	movs	r3, #0
 80832f0:	9300      	str	r3, [sp, #0]
 80832f2:	461a      	mov	r2, r3
 80832f4:	f06f 0177 	mvn.w	r1, #119	; 0x77
 80832f8:	f7fe fb84 	bl	8081a04 <system_ctrl_set_result>
}
 80832fc:	b003      	add	sp, #12
 80832fe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08083304 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
 8083304:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
 8083306:	8843      	ldrh	r3, [r0, #2]
 8083308:	2b0a      	cmp	r3, #10
 808330a:	d008      	beq.n	808331e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
 808330c:	2b50      	cmp	r3, #80	; 0x50
 808330e:	d109      	bne.n	8083324 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
 8083310:	4b09      	ldr	r3, [pc, #36]	; (8083338 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
 8083312:	681b      	ldr	r3, [r3, #0]
 8083314:	b13b      	cbz	r3, 8083326 <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
 8083316:	b003      	add	sp, #12
 8083318:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
 808331c:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
 808331e:	f7ff ffe5 	bl	80832ec <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
 8083322:	e006      	b.n	8083332 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
 8083324:	2300      	movs	r3, #0
 8083326:	9300      	str	r3, [sp, #0]
 8083328:	461a      	mov	r2, r3
 808332a:	f06f 0177 	mvn.w	r1, #119	; 0x77
 808332e:	f7fe fb69 	bl	8081a04 <system_ctrl_set_result>
        break;
    }
}
 8083332:	b003      	add	sp, #12
 8083334:	f85d fb04 	ldr.w	pc, [sp], #4
 8083338:	20000b5c 	.word	0x20000b5c

0808333c <module_user_init_hook>:

void module_user_init_hook()
{
 808333c:	b538      	push	{r3, r4, r5, lr}
#if PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
 808333e:	4c10      	ldr	r4, [pc, #64]	; (8083380 <module_user_init_hook+0x44>)
 8083340:	4d10      	ldr	r5, [pc, #64]	; (8083384 <module_user_init_hook+0x48>)
 8083342:	6823      	ldr	r3, [r4, #0]
 8083344:	42ab      	cmp	r3, r5
 8083346:	4b10      	ldr	r3, [pc, #64]	; (8083388 <module_user_init_hook+0x4c>)
 8083348:	bf0c      	ite	eq
 808334a:	2201      	moveq	r2, #1
 808334c:	2200      	movne	r2, #0
 808334e:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
 8083350:	d002      	beq.n	8083358 <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
 8083352:	f7ff ffbf 	bl	80832d4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
 8083356:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
 8083358:	f7fe f98a 	bl	8081670 <HAL_RNG_GetRandomNumber>
 808335c:	4604      	mov	r4, r0
    srand(seed);
 808335e:	f001 fad3 	bl	8084908 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
 8083362:	4b0a      	ldr	r3, [pc, #40]	; (808338c <module_user_init_hook+0x50>)
 8083364:	b113      	cbz	r3, 808336c <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
 8083366:	4620      	mov	r0, r4
 8083368:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
 808336c:	2100      	movs	r1, #0
 808336e:	4807      	ldr	r0, [pc, #28]	; (808338c <module_user_init_hook+0x50>)
 8083370:	f7fe fbaa 	bl	8081ac8 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
 8083374:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
 8083378:	2100      	movs	r1, #0
 808337a:	4805      	ldr	r0, [pc, #20]	; (8083390 <module_user_init_hook+0x54>)
 808337c:	f7fe bb38 	b.w	80819f0 <system_ctrl_set_app_request_handler>
 8083380:	40024000 	.word	0x40024000
 8083384:	9a271c1e 	.word	0x9a271c1e
 8083388:	20000b60 	.word	0x20000b60
 808338c:	00000000 	.word	0x00000000
 8083390:	08083305 	.word	0x08083305

08083394 <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
 8083394:	b510      	push	{r4, lr}
 8083396:	4604      	mov	r4, r0

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
 8083398:	480f      	ldr	r0, [pc, #60]	; (80833d8 <pinAvailable+0x44>)
 808339a:	f7ff fc97 	bl	8082ccc <_ZN8SPIClass9isEnabledEv>
 808339e:	b128      	cbz	r0, 80833ac <pinAvailable+0x18>
 80833a0:	f1a4 030d 	sub.w	r3, r4, #13
 80833a4:	2b02      	cmp	r3, #2
 80833a6:	d801      	bhi.n	80833ac <pinAvailable+0x18>
  {
    return 0; // 'pin' is used
 80833a8:	2000      	movs	r0, #0
 80833aa:	bd10      	pop	{r4, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
 80833ac:	f000 f868 	bl	8083480 <_Z19__fetch_global_Wirev>
 80833b0:	f7ff f909 	bl	80825c6 <_ZN7TwoWire9isEnabledEv>
 80833b4:	b108      	cbz	r0, 80833ba <pinAvailable+0x26>
 80833b6:	2c01      	cmp	r4, #1
 80833b8:	d9f6      	bls.n	80833a8 <pinAvailable+0x14>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
 80833ba:	f7ff fe67 	bl	808308c <_Z22__fetch_global_Serial1v>
 80833be:	f7ff fe61 	bl	8083084 <_ZN11USARTSerial9isEnabledEv>
 80833c2:	b118      	cbz	r0, 80833cc <pinAvailable+0x38>
 80833c4:	f1a4 0312 	sub.w	r3, r4, #18
 80833c8:	2b01      	cmp	r3, #1
 80833ca:	d9ed      	bls.n	80833a8 <pinAvailable+0x14>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
 80833cc:	2c2e      	cmp	r4, #46	; 0x2e
 80833ce:	bf8c      	ite	hi
 80833d0:	2000      	movhi	r0, #0
 80833d2:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
 80833d4:	bd10      	pop	{r4, pc}
 80833d6:	bf00      	nop
 80833d8:	20000ba8 	.word	0x20000ba8

080833dc <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80833dc:	282e      	cmp	r0, #46	; 0x2e
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
 80833de:	b538      	push	{r3, r4, r5, lr}
 80833e0:	4604      	mov	r4, r0
 80833e2:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
 80833e4:	d80a      	bhi.n	80833fc <pinMode+0x20>
 80833e6:	29ff      	cmp	r1, #255	; 0xff
 80833e8:	d008      	beq.n	80833fc <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
 80833ea:	f7ff ffd3 	bl	8083394 <pinAvailable>
 80833ee:	b128      	cbz	r0, 80833fc <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80833f0:	4629      	mov	r1, r5
 80833f2:	4620      	mov	r0, r4
}
 80833f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
 80833f8:	f7fe b992 	b.w	8081720 <HAL_Pin_Mode>
 80833fc:	bd38      	pop	{r3, r4, r5, pc}

080833fe <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
 80833fe:	b538      	push	{r3, r4, r5, lr}
 8083400:	4604      	mov	r4, r0
 8083402:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083404:	f7fe f994 	bl	8081730 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
 8083408:	28ff      	cmp	r0, #255	; 0xff
 808340a:	d010      	beq.n	808342e <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
 808340c:	2806      	cmp	r0, #6
 808340e:	d804      	bhi.n	808341a <digitalWrite+0x1c>
 8083410:	234d      	movs	r3, #77	; 0x4d
 8083412:	fa23 f000 	lsr.w	r0, r3, r0
 8083416:	07c3      	lsls	r3, r0, #31
 8083418:	d409      	bmi.n	808342e <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
 808341a:	4620      	mov	r0, r4
 808341c:	f7ff ffba 	bl	8083394 <pinAvailable>
 8083420:	b128      	cbz	r0, 808342e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
 8083422:	4629      	mov	r1, r5
 8083424:	4620      	mov	r0, r4
}
 8083426:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
 808342a:	f7fe b989 	b.w	8081740 <HAL_GPIO_Write>
 808342e:	bd38      	pop	{r3, r4, r5, pc}

08083430 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
 8083430:	b510      	push	{r4, lr}
 8083432:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
 8083434:	f7fe f97c 	bl	8081730 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
 8083438:	3804      	subs	r0, #4
 808343a:	b2c0      	uxtb	r0, r0
 808343c:	2801      	cmp	r0, #1
 808343e:	d908      	bls.n	8083452 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
 8083440:	4620      	mov	r0, r4
 8083442:	f7ff ffa7 	bl	8083394 <pinAvailable>
 8083446:	b120      	cbz	r0, 8083452 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 8083448:	4620      	mov	r0, r4
}
 808344a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
 808344e:	f7fe b97f 	b.w	8081750 <HAL_GPIO_Read>
}
 8083452:	2000      	movs	r0, #0
 8083454:	bd10      	pop	{r4, pc}
	...

08083458 <_Z21__fetch_global_EEPROMv>:

// we don't use this global instance since there's no actual instance data
// Having this keeps the unoptimized build happy

EEPROMClass& __fetch_global_EEPROM()
{
 8083458:	b510      	push	{r4, lr}
	static EEPROMClass eeprom;
 808345a:	4c07      	ldr	r4, [pc, #28]	; (8083478 <_Z21__fetch_global_EEPROMv+0x20>)
 808345c:	6823      	ldr	r3, [r4, #0]
 808345e:	07db      	lsls	r3, r3, #31
 8083460:	d408      	bmi.n	8083474 <_Z21__fetch_global_EEPROMv+0x1c>
 8083462:	4620      	mov	r0, r4
 8083464:	f7fc fe1d 	bl	80800a2 <__cxa_guard_acquire>
 8083468:	b120      	cbz	r0, 8083474 <_Z21__fetch_global_EEPROMv+0x1c>

struct EEPROMClass{

	EEPROMClass()
    {
    		HAL_EEPROM_Init();
 808346a:	f7fe f921 	bl	80816b0 <HAL_EEPROM_Init>
 808346e:	4620      	mov	r0, r4
 8083470:	f7fc fe1c 	bl	80800ac <__cxa_guard_release>
	return eeprom;
}
 8083474:	4801      	ldr	r0, [pc, #4]	; (808347c <_Z21__fetch_global_EEPROMv+0x24>)
 8083476:	bd10      	pop	{r4, pc}
 8083478:	20000b68 	.word	0x20000b68
 808347c:	20000b6c 	.word	0x20000b6c

08083480 <_Z19__fetch_global_Wirev>:
#include "i2c_hal.h"

#ifndef SPARK_WIRING_NO_I2C

TwoWire& __fetch_global_Wire()
{
 8083480:	b538      	push	{r3, r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1);
 8083482:	4d0b      	ldr	r5, [pc, #44]	; (80834b0 <_Z19__fetch_global_Wirev+0x30>)
 8083484:	6829      	ldr	r1, [r5, #0]
 8083486:	f011 0401 	ands.w	r4, r1, #1
 808348a:	d10f      	bne.n	80834ac <_Z19__fetch_global_Wirev+0x2c>
 808348c:	4628      	mov	r0, r5
 808348e:	f7fc fe08 	bl	80800a2 <__cxa_guard_acquire>
 8083492:	b158      	cbz	r0, 80834ac <_Z19__fetch_global_Wirev+0x2c>
 8083494:	4621      	mov	r1, r4
 8083496:	4807      	ldr	r0, [pc, #28]	; (80834b4 <_Z19__fetch_global_Wirev+0x34>)
 8083498:	f7ff f864 	bl	8082564 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 808349c:	4628      	mov	r0, r5
 808349e:	f7fc fe05 	bl	80800ac <__cxa_guard_release>
 80834a2:	4a05      	ldr	r2, [pc, #20]	; (80834b8 <_Z19__fetch_global_Wirev+0x38>)
 80834a4:	4905      	ldr	r1, [pc, #20]	; (80834bc <_Z19__fetch_global_Wirev+0x3c>)
 80834a6:	4803      	ldr	r0, [pc, #12]	; (80834b4 <_Z19__fetch_global_Wirev+0x34>)
 80834a8:	f000 f870 	bl	808358c <__aeabi_atexit>
	return wire;
}
 80834ac:	4801      	ldr	r0, [pc, #4]	; (80834b4 <_Z19__fetch_global_Wirev+0x34>)
 80834ae:	bd38      	pop	{r3, r4, r5, pc}
 80834b0:	20000b70 	.word	0x20000b70
 80834b4:	20000b88 	.word	0x20000b88
 80834b8:	20000550 	.word	0x20000550
 80834bc:	0808250d 	.word	0x0808250d

080834c0 <_Z20__fetch_global_Wire3v>:
#endif

/* System PMIC and Fuel Gauge I2C3 */
#if Wiring_Wire3
TwoWire& __fetch_global_Wire3()
{
 80834c0:	b510      	push	{r4, lr}
	static TwoWire wire(HAL_I2C_INTERFACE3);
 80834c2:	4c0b      	ldr	r4, [pc, #44]	; (80834f0 <_Z20__fetch_global_Wire3v+0x30>)
 80834c4:	6823      	ldr	r3, [r4, #0]
 80834c6:	07db      	lsls	r3, r3, #31
 80834c8:	d40f      	bmi.n	80834ea <_Z20__fetch_global_Wire3v+0x2a>
 80834ca:	4620      	mov	r0, r4
 80834cc:	f7fc fde9 	bl	80800a2 <__cxa_guard_acquire>
 80834d0:	b158      	cbz	r0, 80834ea <_Z20__fetch_global_Wire3v+0x2a>
 80834d2:	2102      	movs	r1, #2
 80834d4:	4807      	ldr	r0, [pc, #28]	; (80834f4 <_Z20__fetch_global_Wire3v+0x34>)
 80834d6:	f7ff f845 	bl	8082564 <_ZN7TwoWireC1E17HAL_I2C_Interface>
 80834da:	4620      	mov	r0, r4
 80834dc:	f7fc fde6 	bl	80800ac <__cxa_guard_release>
 80834e0:	4a05      	ldr	r2, [pc, #20]	; (80834f8 <_Z20__fetch_global_Wire3v+0x38>)
 80834e2:	4906      	ldr	r1, [pc, #24]	; (80834fc <_Z20__fetch_global_Wire3v+0x3c>)
 80834e4:	4803      	ldr	r0, [pc, #12]	; (80834f4 <_Z20__fetch_global_Wire3v+0x34>)
 80834e6:	f000 f851 	bl	808358c <__aeabi_atexit>
	return wire;
}
 80834ea:	4802      	ldr	r0, [pc, #8]	; (80834f4 <_Z20__fetch_global_Wire3v+0x34>)
 80834ec:	bd10      	pop	{r4, pc}
 80834ee:	bf00      	nop
 80834f0:	20000b9c 	.word	0x20000b9c
 80834f4:	20000b74 	.word	0x20000b74
 80834f8:	20000550 	.word	0x20000550
 80834fc:	0808250d 	.word	0x0808250d

08083500 <_GLOBAL__sub_I_INADDR_NONE>:
#include "spark_wiring_ipaddress.h"

#if !HAL_USE_SOCKET_HAL_POSIX
const IPAddress INADDR_NONE(0, 0, 0, 0);
 8083500:	b513      	push	{r0, r1, r4, lr}
 8083502:	4c08      	ldr	r4, [pc, #32]	; (8083524 <_GLOBAL__sub_I_INADDR_NONE+0x24>)
 8083504:	2300      	movs	r3, #0
 8083506:	461a      	mov	r2, r3
 8083508:	4619      	mov	r1, r3
 808350a:	9300      	str	r3, [sp, #0]
 808350c:	4620      	mov	r0, r4
 808350e:	f7ff f8e1 	bl	80826d4 <_ZN9IPAddressC1Ehhhh>
 8083512:	4620      	mov	r0, r4
 8083514:	4a04      	ldr	r2, [pc, #16]	; (8083528 <_GLOBAL__sub_I_INADDR_NONE+0x28>)
 8083516:	4905      	ldr	r1, [pc, #20]	; (808352c <_GLOBAL__sub_I_INADDR_NONE+0x2c>)
 8083518:	b002      	add	sp, #8
 808351a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 808351e:	f000 b835 	b.w	808358c <__aeabi_atexit>
 8083522:	bf00      	nop
 8083524:	20000ba0 	.word	0x20000ba0
 8083528:	20000550 	.word	0x20000550
 808352c:	08082651 	.word	0x08082651

08083530 <_GLOBAL__sub_I_SPI>:
#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8083530:	b570      	push	{r4, r5, r6, lr}
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8083532:	4e11      	ldr	r6, [pc, #68]	; (8083578 <_GLOBAL__sub_I_SPI+0x48>)
 8083534:	4d11      	ldr	r5, [pc, #68]	; (808357c <_GLOBAL__sub_I_SPI+0x4c>)
 8083536:	4c12      	ldr	r4, [pc, #72]	; (8083580 <_GLOBAL__sub_I_SPI+0x50>)
 8083538:	2100      	movs	r1, #0
 808353a:	4630      	mov	r0, r6
 808353c:	f7ff fbb2 	bl	8082ca4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8083540:	4630      	mov	r0, r6

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8083542:	4e10      	ldr	r6, [pc, #64]	; (8083584 <_GLOBAL__sub_I_SPI+0x54>)
#include "core_hal.h"
#include "spark_macros.h"

#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);
 8083544:	462a      	mov	r2, r5
 8083546:	4621      	mov	r1, r4
 8083548:	f000 f820 	bl	808358c <__aeabi_atexit>

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 808354c:	2101      	movs	r1, #1
 808354e:	4630      	mov	r0, r6
 8083550:	f7ff fba8 	bl	8082ca4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8083554:	4630      	mov	r0, r6
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8083556:	4e0c      	ldr	r6, [pc, #48]	; (8083588 <_GLOBAL__sub_I_SPI+0x58>)
#ifndef SPARK_WIRING_NO_SPI

SPIClass SPI(HAL_SPI_INTERFACE1);

#if Wiring_SPI1
SPIClass SPI1(HAL_SPI_INTERFACE2);
 8083558:	462a      	mov	r2, r5
 808355a:	4621      	mov	r1, r4
 808355c:	f000 f816 	bl	808358c <__aeabi_atexit>
#endif

#if Wiring_SPI2
SPIClass SPI2(HAL_SPI_INTERFACE3);
 8083560:	2102      	movs	r1, #2
 8083562:	4630      	mov	r0, r6
 8083564:	f7ff fb9e 	bl	8082ca4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
 8083568:	462a      	mov	r2, r5
 808356a:	4621      	mov	r1, r4
 808356c:	4630      	mov	r0, r6
 808356e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8083572:	f000 b80b 	b.w	808358c <__aeabi_atexit>
 8083576:	bf00      	nop
 8083578:	20000ba8 	.word	0x20000ba8
 808357c:	20000550 	.word	0x20000550
 8083580:	08082c95 	.word	0x08082c95
 8083584:	20000bb8 	.word	0x20000bb8
 8083588:	20000bc8 	.word	0x20000bc8

0808358c <__aeabi_atexit>:
 808358c:	460b      	mov	r3, r1
 808358e:	4601      	mov	r1, r0
 8083590:	4618      	mov	r0, r3
 8083592:	f001 b89f 	b.w	80846d4 <__cxa_atexit>

08083596 <_ZSt25__throw_bad_function_callv>:
 8083596:	b508      	push	{r3, lr}
 8083598:	f7fe fb1e 	bl	8081bd8 <abort>

0808359c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
 808359c:	4b24      	ldr	r3, [pc, #144]	; (8083630 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
 808359e:	681a      	ldr	r2, [r3, #0]
 80835a0:	07d0      	lsls	r0, r2, #31
 80835a2:	bf5c      	itt	pl
 80835a4:	2201      	movpl	r2, #1
 80835a6:	601a      	strpl	r2, [r3, #0]
 80835a8:	4b22      	ldr	r3, [pc, #136]	; (8083634 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
 80835aa:	681a      	ldr	r2, [r3, #0]
 80835ac:	07d1      	lsls	r1, r2, #31
 80835ae:	bf5c      	itt	pl
 80835b0:	2201      	movpl	r2, #1
 80835b2:	601a      	strpl	r2, [r3, #0]
 80835b4:	4b20      	ldr	r3, [pc, #128]	; (8083638 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
 80835b6:	681a      	ldr	r2, [r3, #0]
 80835b8:	07d2      	lsls	r2, r2, #31
 80835ba:	bf5c      	itt	pl
 80835bc:	2201      	movpl	r2, #1
 80835be:	601a      	strpl	r2, [r3, #0]
 80835c0:	4b1e      	ldr	r3, [pc, #120]	; (808363c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
 80835c2:	681a      	ldr	r2, [r3, #0]
 80835c4:	07d0      	lsls	r0, r2, #31
 80835c6:	bf5c      	itt	pl
 80835c8:	2201      	movpl	r2, #1
 80835ca:	601a      	strpl	r2, [r3, #0]
 80835cc:	4b1c      	ldr	r3, [pc, #112]	; (8083640 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
 80835ce:	681a      	ldr	r2, [r3, #0]
 80835d0:	07d1      	lsls	r1, r2, #31
 80835d2:	bf5c      	itt	pl
 80835d4:	2201      	movpl	r2, #1
 80835d6:	601a      	strpl	r2, [r3, #0]
 80835d8:	4b1a      	ldr	r3, [pc, #104]	; (8083644 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
 80835da:	681a      	ldr	r2, [r3, #0]
 80835dc:	07d2      	lsls	r2, r2, #31
 80835de:	bf5c      	itt	pl
 80835e0:	2201      	movpl	r2, #1
 80835e2:	601a      	strpl	r2, [r3, #0]
 80835e4:	4b18      	ldr	r3, [pc, #96]	; (8083648 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
 80835e6:	681a      	ldr	r2, [r3, #0]
 80835e8:	07d0      	lsls	r0, r2, #31
 80835ea:	bf5c      	itt	pl
 80835ec:	2201      	movpl	r2, #1
 80835ee:	601a      	strpl	r2, [r3, #0]
 80835f0:	4b16      	ldr	r3, [pc, #88]	; (808364c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
 80835f2:	681a      	ldr	r2, [r3, #0]
 80835f4:	07d1      	lsls	r1, r2, #31
 80835f6:	bf5c      	itt	pl
 80835f8:	2201      	movpl	r2, #1
 80835fa:	601a      	strpl	r2, [r3, #0]
 80835fc:	4b14      	ldr	r3, [pc, #80]	; (8083650 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
 80835fe:	681a      	ldr	r2, [r3, #0]
 8083600:	07d2      	lsls	r2, r2, #31
 8083602:	bf5c      	itt	pl
 8083604:	2201      	movpl	r2, #1
 8083606:	601a      	strpl	r2, [r3, #0]
 8083608:	4b12      	ldr	r3, [pc, #72]	; (8083654 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
 808360a:	681a      	ldr	r2, [r3, #0]
 808360c:	07d0      	lsls	r0, r2, #31
 808360e:	bf5c      	itt	pl
 8083610:	2201      	movpl	r2, #1
 8083612:	601a      	strpl	r2, [r3, #0]
 8083614:	4b10      	ldr	r3, [pc, #64]	; (8083658 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
 8083616:	681a      	ldr	r2, [r3, #0]
 8083618:	07d1      	lsls	r1, r2, #31
 808361a:	bf5c      	itt	pl
 808361c:	2201      	movpl	r2, #1
 808361e:	601a      	strpl	r2, [r3, #0]
 8083620:	4b0e      	ldr	r3, [pc, #56]	; (808365c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
 8083622:	681a      	ldr	r2, [r3, #0]
 8083624:	07d2      	lsls	r2, r2, #31
 8083626:	bf5c      	itt	pl
 8083628:	2201      	movpl	r2, #1
 808362a:	601a      	strpl	r2, [r3, #0]
 808362c:	4770      	bx	lr
 808362e:	bf00      	nop
 8083630:	20000c04 	.word	0x20000c04
 8083634:	20000c00 	.word	0x20000c00
 8083638:	20000bfc 	.word	0x20000bfc
 808363c:	20000bf8 	.word	0x20000bf8
 8083640:	20000bf4 	.word	0x20000bf4
 8083644:	20000bf0 	.word	0x20000bf0
 8083648:	20000bec 	.word	0x20000bec
 808364c:	20000be8 	.word	0x20000be8
 8083650:	20000be4 	.word	0x20000be4
 8083654:	20000be0 	.word	0x20000be0
 8083658:	20000bdc 	.word	0x20000bdc
 808365c:	20000bd8 	.word	0x20000bd8

08083660 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 8083660:	4b18      	ldr	r3, [pc, #96]	; (80836c4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 8083662:	681a      	ldr	r2, [r3, #0]
 8083664:	07d1      	lsls	r1, r2, #31
 8083666:	bf5c      	itt	pl
 8083668:	2201      	movpl	r2, #1
 808366a:	601a      	strpl	r2, [r3, #0]
 808366c:	4b16      	ldr	r3, [pc, #88]	; (80836c8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 808366e:	681a      	ldr	r2, [r3, #0]
 8083670:	07d2      	lsls	r2, r2, #31
 8083672:	bf5c      	itt	pl
 8083674:	2201      	movpl	r2, #1
 8083676:	601a      	strpl	r2, [r3, #0]
 8083678:	4b14      	ldr	r3, [pc, #80]	; (80836cc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 808367a:	681a      	ldr	r2, [r3, #0]
 808367c:	07d0      	lsls	r0, r2, #31
 808367e:	bf5c      	itt	pl
 8083680:	2201      	movpl	r2, #1
 8083682:	601a      	strpl	r2, [r3, #0]
 8083684:	4b12      	ldr	r3, [pc, #72]	; (80836d0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 8083686:	681a      	ldr	r2, [r3, #0]
 8083688:	07d1      	lsls	r1, r2, #31
 808368a:	bf5c      	itt	pl
 808368c:	2201      	movpl	r2, #1
 808368e:	601a      	strpl	r2, [r3, #0]
 8083690:	4b10      	ldr	r3, [pc, #64]	; (80836d4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083692:	681a      	ldr	r2, [r3, #0]
 8083694:	07d2      	lsls	r2, r2, #31
 8083696:	bf5c      	itt	pl
 8083698:	2201      	movpl	r2, #1
 808369a:	601a      	strpl	r2, [r3, #0]
 808369c:	4b0e      	ldr	r3, [pc, #56]	; (80836d8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 808369e:	681a      	ldr	r2, [r3, #0]
 80836a0:	07d0      	lsls	r0, r2, #31
 80836a2:	bf5c      	itt	pl
 80836a4:	2201      	movpl	r2, #1
 80836a6:	601a      	strpl	r2, [r3, #0]
 80836a8:	4b0c      	ldr	r3, [pc, #48]	; (80836dc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 80836aa:	681a      	ldr	r2, [r3, #0]
 80836ac:	07d1      	lsls	r1, r2, #31
 80836ae:	bf5c      	itt	pl
 80836b0:	2201      	movpl	r2, #1
 80836b2:	601a      	strpl	r2, [r3, #0]
 80836b4:	4b0a      	ldr	r3, [pc, #40]	; (80836e0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 80836b6:	681a      	ldr	r2, [r3, #0]
 80836b8:	07d2      	lsls	r2, r2, #31
 80836ba:	bf5c      	itt	pl
 80836bc:	2201      	movpl	r2, #1
 80836be:	601a      	strpl	r2, [r3, #0]
 80836c0:	4770      	bx	lr
 80836c2:	bf00      	nop
 80836c4:	20000c24 	.word	0x20000c24
 80836c8:	20000c20 	.word	0x20000c20
 80836cc:	20000c1c 	.word	0x20000c1c
 80836d0:	20000c18 	.word	0x20000c18
 80836d4:	20000c14 	.word	0x20000c14
 80836d8:	20000c10 	.word	0x20000c10
 80836dc:	20000c0c 	.word	0x20000c0c
 80836e0:	20000c08 	.word	0x20000c08

080836e4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
 80836e4:	4b18      	ldr	r3, [pc, #96]	; (8083748 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
 80836e6:	681a      	ldr	r2, [r3, #0]
 80836e8:	07d1      	lsls	r1, r2, #31
 80836ea:	bf5c      	itt	pl
 80836ec:	2201      	movpl	r2, #1
 80836ee:	601a      	strpl	r2, [r3, #0]
 80836f0:	4b16      	ldr	r3, [pc, #88]	; (808374c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
 80836f2:	681a      	ldr	r2, [r3, #0]
 80836f4:	07d2      	lsls	r2, r2, #31
 80836f6:	bf5c      	itt	pl
 80836f8:	2201      	movpl	r2, #1
 80836fa:	601a      	strpl	r2, [r3, #0]
 80836fc:	4b14      	ldr	r3, [pc, #80]	; (8083750 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
 80836fe:	681a      	ldr	r2, [r3, #0]
 8083700:	07d0      	lsls	r0, r2, #31
 8083702:	bf5c      	itt	pl
 8083704:	2201      	movpl	r2, #1
 8083706:	601a      	strpl	r2, [r3, #0]
 8083708:	4b12      	ldr	r3, [pc, #72]	; (8083754 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
 808370a:	681a      	ldr	r2, [r3, #0]
 808370c:	07d1      	lsls	r1, r2, #31
 808370e:	bf5c      	itt	pl
 8083710:	2201      	movpl	r2, #1
 8083712:	601a      	strpl	r2, [r3, #0]
 8083714:	4b10      	ldr	r3, [pc, #64]	; (8083758 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
 8083716:	681a      	ldr	r2, [r3, #0]
 8083718:	07d2      	lsls	r2, r2, #31
 808371a:	bf5c      	itt	pl
 808371c:	2201      	movpl	r2, #1
 808371e:	601a      	strpl	r2, [r3, #0]
 8083720:	4b0e      	ldr	r3, [pc, #56]	; (808375c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
 8083722:	681a      	ldr	r2, [r3, #0]
 8083724:	07d0      	lsls	r0, r2, #31
 8083726:	bf5c      	itt	pl
 8083728:	2201      	movpl	r2, #1
 808372a:	601a      	strpl	r2, [r3, #0]
 808372c:	4b0c      	ldr	r3, [pc, #48]	; (8083760 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
 808372e:	681a      	ldr	r2, [r3, #0]
 8083730:	07d1      	lsls	r1, r2, #31
 8083732:	bf5c      	itt	pl
 8083734:	2201      	movpl	r2, #1
 8083736:	601a      	strpl	r2, [r3, #0]
 8083738:	4b0a      	ldr	r3, [pc, #40]	; (8083764 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
 808373a:	681a      	ldr	r2, [r3, #0]
 808373c:	07d2      	lsls	r2, r2, #31
 808373e:	bf5c      	itt	pl
 8083740:	2201      	movpl	r2, #1
 8083742:	601a      	strpl	r2, [r3, #0]
 8083744:	4770      	bx	lr
 8083746:	bf00      	nop
 8083748:	20000c44 	.word	0x20000c44
 808374c:	20000c40 	.word	0x20000c40
 8083750:	20000c3c 	.word	0x20000c3c
 8083754:	20000c38 	.word	0x20000c38
 8083758:	20000c34 	.word	0x20000c34
 808375c:	20000c30 	.word	0x20000c30
 8083760:	20000c2c 	.word	0x20000c2c
 8083764:	20000c28 	.word	0x20000c28

08083768 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
 8083768:	4b24      	ldr	r3, [pc, #144]	; (80837fc <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
 808376a:	681a      	ldr	r2, [r3, #0]
 808376c:	07d0      	lsls	r0, r2, #31
 808376e:	bf5c      	itt	pl
 8083770:	2201      	movpl	r2, #1
 8083772:	601a      	strpl	r2, [r3, #0]
 8083774:	4b22      	ldr	r3, [pc, #136]	; (8083800 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
 8083776:	681a      	ldr	r2, [r3, #0]
 8083778:	07d1      	lsls	r1, r2, #31
 808377a:	bf5c      	itt	pl
 808377c:	2201      	movpl	r2, #1
 808377e:	601a      	strpl	r2, [r3, #0]
 8083780:	4b20      	ldr	r3, [pc, #128]	; (8083804 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
 8083782:	681a      	ldr	r2, [r3, #0]
 8083784:	07d2      	lsls	r2, r2, #31
 8083786:	bf5c      	itt	pl
 8083788:	2201      	movpl	r2, #1
 808378a:	601a      	strpl	r2, [r3, #0]
 808378c:	4b1e      	ldr	r3, [pc, #120]	; (8083808 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
 808378e:	681a      	ldr	r2, [r3, #0]
 8083790:	07d0      	lsls	r0, r2, #31
 8083792:	bf5c      	itt	pl
 8083794:	2201      	movpl	r2, #1
 8083796:	601a      	strpl	r2, [r3, #0]
 8083798:	4b1c      	ldr	r3, [pc, #112]	; (808380c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
 808379a:	681a      	ldr	r2, [r3, #0]
 808379c:	07d1      	lsls	r1, r2, #31
 808379e:	bf5c      	itt	pl
 80837a0:	2201      	movpl	r2, #1
 80837a2:	601a      	strpl	r2, [r3, #0]
 80837a4:	4b1a      	ldr	r3, [pc, #104]	; (8083810 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
 80837a6:	681a      	ldr	r2, [r3, #0]
 80837a8:	07d2      	lsls	r2, r2, #31
 80837aa:	bf5c      	itt	pl
 80837ac:	2201      	movpl	r2, #1
 80837ae:	601a      	strpl	r2, [r3, #0]
 80837b0:	4b18      	ldr	r3, [pc, #96]	; (8083814 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
 80837b2:	681a      	ldr	r2, [r3, #0]
 80837b4:	07d0      	lsls	r0, r2, #31
 80837b6:	bf5c      	itt	pl
 80837b8:	2201      	movpl	r2, #1
 80837ba:	601a      	strpl	r2, [r3, #0]
 80837bc:	4b16      	ldr	r3, [pc, #88]	; (8083818 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
 80837be:	681a      	ldr	r2, [r3, #0]
 80837c0:	07d1      	lsls	r1, r2, #31
 80837c2:	bf5c      	itt	pl
 80837c4:	2201      	movpl	r2, #1
 80837c6:	601a      	strpl	r2, [r3, #0]
 80837c8:	4b14      	ldr	r3, [pc, #80]	; (808381c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
 80837ca:	681a      	ldr	r2, [r3, #0]
 80837cc:	07d2      	lsls	r2, r2, #31
 80837ce:	bf5c      	itt	pl
 80837d0:	2201      	movpl	r2, #1
 80837d2:	601a      	strpl	r2, [r3, #0]
 80837d4:	4b12      	ldr	r3, [pc, #72]	; (8083820 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
 80837d6:	681a      	ldr	r2, [r3, #0]
 80837d8:	07d0      	lsls	r0, r2, #31
 80837da:	bf5c      	itt	pl
 80837dc:	2201      	movpl	r2, #1
 80837de:	601a      	strpl	r2, [r3, #0]
 80837e0:	4b10      	ldr	r3, [pc, #64]	; (8083824 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
 80837e2:	681a      	ldr	r2, [r3, #0]
 80837e4:	07d1      	lsls	r1, r2, #31
 80837e6:	bf5c      	itt	pl
 80837e8:	2201      	movpl	r2, #1
 80837ea:	601a      	strpl	r2, [r3, #0]
 80837ec:	4b0e      	ldr	r3, [pc, #56]	; (8083828 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
 80837ee:	681a      	ldr	r2, [r3, #0]
 80837f0:	07d2      	lsls	r2, r2, #31
 80837f2:	bf5c      	itt	pl
 80837f4:	2201      	movpl	r2, #1
 80837f6:	601a      	strpl	r2, [r3, #0]
 80837f8:	4770      	bx	lr
 80837fa:	bf00      	nop
 80837fc:	20000c74 	.word	0x20000c74
 8083800:	20000c70 	.word	0x20000c70
 8083804:	20000c6c 	.word	0x20000c6c
 8083808:	20000c68 	.word	0x20000c68
 808380c:	20000c64 	.word	0x20000c64
 8083810:	20000c60 	.word	0x20000c60
 8083814:	20000c5c 	.word	0x20000c5c
 8083818:	20000c58 	.word	0x20000c58
 808381c:	20000c54 	.word	0x20000c54
 8083820:	20000c50 	.word	0x20000c50
 8083824:	20000c4c 	.word	0x20000c4c
 8083828:	20000c48 	.word	0x20000c48

0808382c <__aeabi_drsub>:
 808382c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8083830:	e002      	b.n	8083838 <__adddf3>
 8083832:	bf00      	nop

08083834 <__aeabi_dsub>:
 8083834:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08083838 <__adddf3>:
 8083838:	b530      	push	{r4, r5, lr}
 808383a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 808383e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8083842:	ea94 0f05 	teq	r4, r5
 8083846:	bf08      	it	eq
 8083848:	ea90 0f02 	teqeq	r0, r2
 808384c:	bf1f      	itttt	ne
 808384e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8083852:	ea55 0c02 	orrsne.w	ip, r5, r2
 8083856:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 808385a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 808385e:	f000 80e2 	beq.w	8083a26 <__adddf3+0x1ee>
 8083862:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8083866:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 808386a:	bfb8      	it	lt
 808386c:	426d      	neglt	r5, r5
 808386e:	dd0c      	ble.n	808388a <__adddf3+0x52>
 8083870:	442c      	add	r4, r5
 8083872:	ea80 0202 	eor.w	r2, r0, r2
 8083876:	ea81 0303 	eor.w	r3, r1, r3
 808387a:	ea82 0000 	eor.w	r0, r2, r0
 808387e:	ea83 0101 	eor.w	r1, r3, r1
 8083882:	ea80 0202 	eor.w	r2, r0, r2
 8083886:	ea81 0303 	eor.w	r3, r1, r3
 808388a:	2d36      	cmp	r5, #54	; 0x36
 808388c:	bf88      	it	hi
 808388e:	bd30      	pophi	{r4, r5, pc}
 8083890:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8083894:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083898:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 808389c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80838a0:	d002      	beq.n	80838a8 <__adddf3+0x70>
 80838a2:	4240      	negs	r0, r0
 80838a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80838a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80838ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80838b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80838b4:	d002      	beq.n	80838bc <__adddf3+0x84>
 80838b6:	4252      	negs	r2, r2
 80838b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80838bc:	ea94 0f05 	teq	r4, r5
 80838c0:	f000 80a7 	beq.w	8083a12 <__adddf3+0x1da>
 80838c4:	f1a4 0401 	sub.w	r4, r4, #1
 80838c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80838cc:	db0d      	blt.n	80838ea <__adddf3+0xb2>
 80838ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80838d2:	fa22 f205 	lsr.w	r2, r2, r5
 80838d6:	1880      	adds	r0, r0, r2
 80838d8:	f141 0100 	adc.w	r1, r1, #0
 80838dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80838e0:	1880      	adds	r0, r0, r2
 80838e2:	fa43 f305 	asr.w	r3, r3, r5
 80838e6:	4159      	adcs	r1, r3
 80838e8:	e00e      	b.n	8083908 <__adddf3+0xd0>
 80838ea:	f1a5 0520 	sub.w	r5, r5, #32
 80838ee:	f10e 0e20 	add.w	lr, lr, #32
 80838f2:	2a01      	cmp	r2, #1
 80838f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80838f8:	bf28      	it	cs
 80838fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80838fe:	fa43 f305 	asr.w	r3, r3, r5
 8083902:	18c0      	adds	r0, r0, r3
 8083904:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8083908:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 808390c:	d507      	bpl.n	808391e <__adddf3+0xe6>
 808390e:	f04f 0e00 	mov.w	lr, #0
 8083912:	f1dc 0c00 	rsbs	ip, ip, #0
 8083916:	eb7e 0000 	sbcs.w	r0, lr, r0
 808391a:	eb6e 0101 	sbc.w	r1, lr, r1
 808391e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8083922:	d31b      	bcc.n	808395c <__adddf3+0x124>
 8083924:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8083928:	d30c      	bcc.n	8083944 <__adddf3+0x10c>
 808392a:	0849      	lsrs	r1, r1, #1
 808392c:	ea5f 0030 	movs.w	r0, r0, rrx
 8083930:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8083934:	f104 0401 	add.w	r4, r4, #1
 8083938:	ea4f 5244 	mov.w	r2, r4, lsl #21
 808393c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8083940:	f080 809a 	bcs.w	8083a78 <__adddf3+0x240>
 8083944:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8083948:	bf08      	it	eq
 808394a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 808394e:	f150 0000 	adcs.w	r0, r0, #0
 8083952:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083956:	ea41 0105 	orr.w	r1, r1, r5
 808395a:	bd30      	pop	{r4, r5, pc}
 808395c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8083960:	4140      	adcs	r0, r0
 8083962:	eb41 0101 	adc.w	r1, r1, r1
 8083966:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 808396a:	f1a4 0401 	sub.w	r4, r4, #1
 808396e:	d1e9      	bne.n	8083944 <__adddf3+0x10c>
 8083970:	f091 0f00 	teq	r1, #0
 8083974:	bf04      	itt	eq
 8083976:	4601      	moveq	r1, r0
 8083978:	2000      	moveq	r0, #0
 808397a:	fab1 f381 	clz	r3, r1
 808397e:	bf08      	it	eq
 8083980:	3320      	addeq	r3, #32
 8083982:	f1a3 030b 	sub.w	r3, r3, #11
 8083986:	f1b3 0220 	subs.w	r2, r3, #32
 808398a:	da0c      	bge.n	80839a6 <__adddf3+0x16e>
 808398c:	320c      	adds	r2, #12
 808398e:	dd08      	ble.n	80839a2 <__adddf3+0x16a>
 8083990:	f102 0c14 	add.w	ip, r2, #20
 8083994:	f1c2 020c 	rsb	r2, r2, #12
 8083998:	fa01 f00c 	lsl.w	r0, r1, ip
 808399c:	fa21 f102 	lsr.w	r1, r1, r2
 80839a0:	e00c      	b.n	80839bc <__adddf3+0x184>
 80839a2:	f102 0214 	add.w	r2, r2, #20
 80839a6:	bfd8      	it	le
 80839a8:	f1c2 0c20 	rsble	ip, r2, #32
 80839ac:	fa01 f102 	lsl.w	r1, r1, r2
 80839b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80839b4:	bfdc      	itt	le
 80839b6:	ea41 010c 	orrle.w	r1, r1, ip
 80839ba:	4090      	lslle	r0, r2
 80839bc:	1ae4      	subs	r4, r4, r3
 80839be:	bfa2      	ittt	ge
 80839c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80839c4:	4329      	orrge	r1, r5
 80839c6:	bd30      	popge	{r4, r5, pc}
 80839c8:	ea6f 0404 	mvn.w	r4, r4
 80839cc:	3c1f      	subs	r4, #31
 80839ce:	da1c      	bge.n	8083a0a <__adddf3+0x1d2>
 80839d0:	340c      	adds	r4, #12
 80839d2:	dc0e      	bgt.n	80839f2 <__adddf3+0x1ba>
 80839d4:	f104 0414 	add.w	r4, r4, #20
 80839d8:	f1c4 0220 	rsb	r2, r4, #32
 80839dc:	fa20 f004 	lsr.w	r0, r0, r4
 80839e0:	fa01 f302 	lsl.w	r3, r1, r2
 80839e4:	ea40 0003 	orr.w	r0, r0, r3
 80839e8:	fa21 f304 	lsr.w	r3, r1, r4
 80839ec:	ea45 0103 	orr.w	r1, r5, r3
 80839f0:	bd30      	pop	{r4, r5, pc}
 80839f2:	f1c4 040c 	rsb	r4, r4, #12
 80839f6:	f1c4 0220 	rsb	r2, r4, #32
 80839fa:	fa20 f002 	lsr.w	r0, r0, r2
 80839fe:	fa01 f304 	lsl.w	r3, r1, r4
 8083a02:	ea40 0003 	orr.w	r0, r0, r3
 8083a06:	4629      	mov	r1, r5
 8083a08:	bd30      	pop	{r4, r5, pc}
 8083a0a:	fa21 f004 	lsr.w	r0, r1, r4
 8083a0e:	4629      	mov	r1, r5
 8083a10:	bd30      	pop	{r4, r5, pc}
 8083a12:	f094 0f00 	teq	r4, #0
 8083a16:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8083a1a:	bf06      	itte	eq
 8083a1c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8083a20:	3401      	addeq	r4, #1
 8083a22:	3d01      	subne	r5, #1
 8083a24:	e74e      	b.n	80838c4 <__adddf3+0x8c>
 8083a26:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083a2a:	bf18      	it	ne
 8083a2c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8083a30:	d029      	beq.n	8083a86 <__adddf3+0x24e>
 8083a32:	ea94 0f05 	teq	r4, r5
 8083a36:	bf08      	it	eq
 8083a38:	ea90 0f02 	teqeq	r0, r2
 8083a3c:	d005      	beq.n	8083a4a <__adddf3+0x212>
 8083a3e:	ea54 0c00 	orrs.w	ip, r4, r0
 8083a42:	bf04      	itt	eq
 8083a44:	4619      	moveq	r1, r3
 8083a46:	4610      	moveq	r0, r2
 8083a48:	bd30      	pop	{r4, r5, pc}
 8083a4a:	ea91 0f03 	teq	r1, r3
 8083a4e:	bf1e      	ittt	ne
 8083a50:	2100      	movne	r1, #0
 8083a52:	2000      	movne	r0, #0
 8083a54:	bd30      	popne	{r4, r5, pc}
 8083a56:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8083a5a:	d105      	bne.n	8083a68 <__adddf3+0x230>
 8083a5c:	0040      	lsls	r0, r0, #1
 8083a5e:	4149      	adcs	r1, r1
 8083a60:	bf28      	it	cs
 8083a62:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8083a66:	bd30      	pop	{r4, r5, pc}
 8083a68:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8083a6c:	bf3c      	itt	cc
 8083a6e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8083a72:	bd30      	popcc	{r4, r5, pc}
 8083a74:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083a78:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8083a7c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083a80:	f04f 0000 	mov.w	r0, #0
 8083a84:	bd30      	pop	{r4, r5, pc}
 8083a86:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8083a8a:	bf1a      	itte	ne
 8083a8c:	4619      	movne	r1, r3
 8083a8e:	4610      	movne	r0, r2
 8083a90:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8083a94:	bf1c      	itt	ne
 8083a96:	460b      	movne	r3, r1
 8083a98:	4602      	movne	r2, r0
 8083a9a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083a9e:	bf06      	itte	eq
 8083aa0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8083aa4:	ea91 0f03 	teqeq	r1, r3
 8083aa8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8083aac:	bd30      	pop	{r4, r5, pc}
 8083aae:	bf00      	nop

08083ab0 <__aeabi_ui2d>:
 8083ab0:	f090 0f00 	teq	r0, #0
 8083ab4:	bf04      	itt	eq
 8083ab6:	2100      	moveq	r1, #0
 8083ab8:	4770      	bxeq	lr
 8083aba:	b530      	push	{r4, r5, lr}
 8083abc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083ac0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083ac4:	f04f 0500 	mov.w	r5, #0
 8083ac8:	f04f 0100 	mov.w	r1, #0
 8083acc:	e750      	b.n	8083970 <__adddf3+0x138>
 8083ace:	bf00      	nop

08083ad0 <__aeabi_i2d>:
 8083ad0:	f090 0f00 	teq	r0, #0
 8083ad4:	bf04      	itt	eq
 8083ad6:	2100      	moveq	r1, #0
 8083ad8:	4770      	bxeq	lr
 8083ada:	b530      	push	{r4, r5, lr}
 8083adc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083ae0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083ae4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8083ae8:	bf48      	it	mi
 8083aea:	4240      	negmi	r0, r0
 8083aec:	f04f 0100 	mov.w	r1, #0
 8083af0:	e73e      	b.n	8083970 <__adddf3+0x138>
 8083af2:	bf00      	nop

08083af4 <__aeabi_f2d>:
 8083af4:	0042      	lsls	r2, r0, #1
 8083af6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8083afa:	ea4f 0131 	mov.w	r1, r1, rrx
 8083afe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8083b02:	bf1f      	itttt	ne
 8083b04:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8083b08:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083b0c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8083b10:	4770      	bxne	lr
 8083b12:	f092 0f00 	teq	r2, #0
 8083b16:	bf14      	ite	ne
 8083b18:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8083b1c:	4770      	bxeq	lr
 8083b1e:	b530      	push	{r4, r5, lr}
 8083b20:	f44f 7460 	mov.w	r4, #896	; 0x380
 8083b24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8083b28:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083b2c:	e720      	b.n	8083970 <__adddf3+0x138>
 8083b2e:	bf00      	nop

08083b30 <__aeabi_ul2d>:
 8083b30:	ea50 0201 	orrs.w	r2, r0, r1
 8083b34:	bf08      	it	eq
 8083b36:	4770      	bxeq	lr
 8083b38:	b530      	push	{r4, r5, lr}
 8083b3a:	f04f 0500 	mov.w	r5, #0
 8083b3e:	e00a      	b.n	8083b56 <__aeabi_l2d+0x16>

08083b40 <__aeabi_l2d>:
 8083b40:	ea50 0201 	orrs.w	r2, r0, r1
 8083b44:	bf08      	it	eq
 8083b46:	4770      	bxeq	lr
 8083b48:	b530      	push	{r4, r5, lr}
 8083b4a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8083b4e:	d502      	bpl.n	8083b56 <__aeabi_l2d+0x16>
 8083b50:	4240      	negs	r0, r0
 8083b52:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8083b56:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8083b5a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8083b5e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8083b62:	f43f aedc 	beq.w	808391e <__adddf3+0xe6>
 8083b66:	f04f 0203 	mov.w	r2, #3
 8083b6a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083b6e:	bf18      	it	ne
 8083b70:	3203      	addne	r2, #3
 8083b72:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8083b76:	bf18      	it	ne
 8083b78:	3203      	addne	r2, #3
 8083b7a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8083b7e:	f1c2 0320 	rsb	r3, r2, #32
 8083b82:	fa00 fc03 	lsl.w	ip, r0, r3
 8083b86:	fa20 f002 	lsr.w	r0, r0, r2
 8083b8a:	fa01 fe03 	lsl.w	lr, r1, r3
 8083b8e:	ea40 000e 	orr.w	r0, r0, lr
 8083b92:	fa21 f102 	lsr.w	r1, r1, r2
 8083b96:	4414      	add	r4, r2
 8083b98:	e6c1      	b.n	808391e <__adddf3+0xe6>
 8083b9a:	bf00      	nop

08083b9c <__aeabi_dmul>:
 8083b9c:	b570      	push	{r4, r5, r6, lr}
 8083b9e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083ba2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083ba6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083baa:	bf1d      	ittte	ne
 8083bac:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083bb0:	ea94 0f0c 	teqne	r4, ip
 8083bb4:	ea95 0f0c 	teqne	r5, ip
 8083bb8:	f000 f8de 	bleq	8083d78 <__aeabi_dmul+0x1dc>
 8083bbc:	442c      	add	r4, r5
 8083bbe:	ea81 0603 	eor.w	r6, r1, r3
 8083bc2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8083bc6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8083bca:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8083bce:	bf18      	it	ne
 8083bd0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8083bd4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083bd8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8083bdc:	d038      	beq.n	8083c50 <__aeabi_dmul+0xb4>
 8083bde:	fba0 ce02 	umull	ip, lr, r0, r2
 8083be2:	f04f 0500 	mov.w	r5, #0
 8083be6:	fbe1 e502 	umlal	lr, r5, r1, r2
 8083bea:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8083bee:	fbe0 e503 	umlal	lr, r5, r0, r3
 8083bf2:	f04f 0600 	mov.w	r6, #0
 8083bf6:	fbe1 5603 	umlal	r5, r6, r1, r3
 8083bfa:	f09c 0f00 	teq	ip, #0
 8083bfe:	bf18      	it	ne
 8083c00:	f04e 0e01 	orrne.w	lr, lr, #1
 8083c04:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8083c08:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8083c0c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8083c10:	d204      	bcs.n	8083c1c <__aeabi_dmul+0x80>
 8083c12:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8083c16:	416d      	adcs	r5, r5
 8083c18:	eb46 0606 	adc.w	r6, r6, r6
 8083c1c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8083c20:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8083c24:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8083c28:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8083c2c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8083c30:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083c34:	bf88      	it	hi
 8083c36:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083c3a:	d81e      	bhi.n	8083c7a <__aeabi_dmul+0xde>
 8083c3c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8083c40:	bf08      	it	eq
 8083c42:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8083c46:	f150 0000 	adcs.w	r0, r0, #0
 8083c4a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083c4e:	bd70      	pop	{r4, r5, r6, pc}
 8083c50:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8083c54:	ea46 0101 	orr.w	r1, r6, r1
 8083c58:	ea40 0002 	orr.w	r0, r0, r2
 8083c5c:	ea81 0103 	eor.w	r1, r1, r3
 8083c60:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8083c64:	bfc2      	ittt	gt
 8083c66:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083c6a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083c6e:	bd70      	popgt	{r4, r5, r6, pc}
 8083c70:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083c74:	f04f 0e00 	mov.w	lr, #0
 8083c78:	3c01      	subs	r4, #1
 8083c7a:	f300 80ab 	bgt.w	8083dd4 <__aeabi_dmul+0x238>
 8083c7e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8083c82:	bfde      	ittt	le
 8083c84:	2000      	movle	r0, #0
 8083c86:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8083c8a:	bd70      	pople	{r4, r5, r6, pc}
 8083c8c:	f1c4 0400 	rsb	r4, r4, #0
 8083c90:	3c20      	subs	r4, #32
 8083c92:	da35      	bge.n	8083d00 <__aeabi_dmul+0x164>
 8083c94:	340c      	adds	r4, #12
 8083c96:	dc1b      	bgt.n	8083cd0 <__aeabi_dmul+0x134>
 8083c98:	f104 0414 	add.w	r4, r4, #20
 8083c9c:	f1c4 0520 	rsb	r5, r4, #32
 8083ca0:	fa00 f305 	lsl.w	r3, r0, r5
 8083ca4:	fa20 f004 	lsr.w	r0, r0, r4
 8083ca8:	fa01 f205 	lsl.w	r2, r1, r5
 8083cac:	ea40 0002 	orr.w	r0, r0, r2
 8083cb0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8083cb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8083cb8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083cbc:	fa21 f604 	lsr.w	r6, r1, r4
 8083cc0:	eb42 0106 	adc.w	r1, r2, r6
 8083cc4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083cc8:	bf08      	it	eq
 8083cca:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083cce:	bd70      	pop	{r4, r5, r6, pc}
 8083cd0:	f1c4 040c 	rsb	r4, r4, #12
 8083cd4:	f1c4 0520 	rsb	r5, r4, #32
 8083cd8:	fa00 f304 	lsl.w	r3, r0, r4
 8083cdc:	fa20 f005 	lsr.w	r0, r0, r5
 8083ce0:	fa01 f204 	lsl.w	r2, r1, r4
 8083ce4:	ea40 0002 	orr.w	r0, r0, r2
 8083ce8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083cec:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8083cf0:	f141 0100 	adc.w	r1, r1, #0
 8083cf4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083cf8:	bf08      	it	eq
 8083cfa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083cfe:	bd70      	pop	{r4, r5, r6, pc}
 8083d00:	f1c4 0520 	rsb	r5, r4, #32
 8083d04:	fa00 f205 	lsl.w	r2, r0, r5
 8083d08:	ea4e 0e02 	orr.w	lr, lr, r2
 8083d0c:	fa20 f304 	lsr.w	r3, r0, r4
 8083d10:	fa01 f205 	lsl.w	r2, r1, r5
 8083d14:	ea43 0302 	orr.w	r3, r3, r2
 8083d18:	fa21 f004 	lsr.w	r0, r1, r4
 8083d1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083d20:	fa21 f204 	lsr.w	r2, r1, r4
 8083d24:	ea20 0002 	bic.w	r0, r0, r2
 8083d28:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8083d2c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8083d30:	bf08      	it	eq
 8083d32:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8083d36:	bd70      	pop	{r4, r5, r6, pc}
 8083d38:	f094 0f00 	teq	r4, #0
 8083d3c:	d10f      	bne.n	8083d5e <__aeabi_dmul+0x1c2>
 8083d3e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8083d42:	0040      	lsls	r0, r0, #1
 8083d44:	eb41 0101 	adc.w	r1, r1, r1
 8083d48:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083d4c:	bf08      	it	eq
 8083d4e:	3c01      	subeq	r4, #1
 8083d50:	d0f7      	beq.n	8083d42 <__aeabi_dmul+0x1a6>
 8083d52:	ea41 0106 	orr.w	r1, r1, r6
 8083d56:	f095 0f00 	teq	r5, #0
 8083d5a:	bf18      	it	ne
 8083d5c:	4770      	bxne	lr
 8083d5e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8083d62:	0052      	lsls	r2, r2, #1
 8083d64:	eb43 0303 	adc.w	r3, r3, r3
 8083d68:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8083d6c:	bf08      	it	eq
 8083d6e:	3d01      	subeq	r5, #1
 8083d70:	d0f7      	beq.n	8083d62 <__aeabi_dmul+0x1c6>
 8083d72:	ea43 0306 	orr.w	r3, r3, r6
 8083d76:	4770      	bx	lr
 8083d78:	ea94 0f0c 	teq	r4, ip
 8083d7c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083d80:	bf18      	it	ne
 8083d82:	ea95 0f0c 	teqne	r5, ip
 8083d86:	d00c      	beq.n	8083da2 <__aeabi_dmul+0x206>
 8083d88:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083d8c:	bf18      	it	ne
 8083d8e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083d92:	d1d1      	bne.n	8083d38 <__aeabi_dmul+0x19c>
 8083d94:	ea81 0103 	eor.w	r1, r1, r3
 8083d98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083d9c:	f04f 0000 	mov.w	r0, #0
 8083da0:	bd70      	pop	{r4, r5, r6, pc}
 8083da2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083da6:	bf06      	itte	eq
 8083da8:	4610      	moveq	r0, r2
 8083daa:	4619      	moveq	r1, r3
 8083dac:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083db0:	d019      	beq.n	8083de6 <__aeabi_dmul+0x24a>
 8083db2:	ea94 0f0c 	teq	r4, ip
 8083db6:	d102      	bne.n	8083dbe <__aeabi_dmul+0x222>
 8083db8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8083dbc:	d113      	bne.n	8083de6 <__aeabi_dmul+0x24a>
 8083dbe:	ea95 0f0c 	teq	r5, ip
 8083dc2:	d105      	bne.n	8083dd0 <__aeabi_dmul+0x234>
 8083dc4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8083dc8:	bf1c      	itt	ne
 8083dca:	4610      	movne	r0, r2
 8083dcc:	4619      	movne	r1, r3
 8083dce:	d10a      	bne.n	8083de6 <__aeabi_dmul+0x24a>
 8083dd0:	ea81 0103 	eor.w	r1, r1, r3
 8083dd4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8083dd8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083ddc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8083de0:	f04f 0000 	mov.w	r0, #0
 8083de4:	bd70      	pop	{r4, r5, r6, pc}
 8083de6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8083dea:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8083dee:	bd70      	pop	{r4, r5, r6, pc}

08083df0 <__aeabi_ddiv>:
 8083df0:	b570      	push	{r4, r5, r6, lr}
 8083df2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8083df6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8083dfa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8083dfe:	bf1d      	ittte	ne
 8083e00:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8083e04:	ea94 0f0c 	teqne	r4, ip
 8083e08:	ea95 0f0c 	teqne	r5, ip
 8083e0c:	f000 f8a7 	bleq	8083f5e <__aeabi_ddiv+0x16e>
 8083e10:	eba4 0405 	sub.w	r4, r4, r5
 8083e14:	ea81 0e03 	eor.w	lr, r1, r3
 8083e18:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083e1c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8083e20:	f000 8088 	beq.w	8083f34 <__aeabi_ddiv+0x144>
 8083e24:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8083e28:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8083e2c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8083e30:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8083e34:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8083e38:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8083e3c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8083e40:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8083e44:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8083e48:	429d      	cmp	r5, r3
 8083e4a:	bf08      	it	eq
 8083e4c:	4296      	cmpeq	r6, r2
 8083e4e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8083e52:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8083e56:	d202      	bcs.n	8083e5e <__aeabi_ddiv+0x6e>
 8083e58:	085b      	lsrs	r3, r3, #1
 8083e5a:	ea4f 0232 	mov.w	r2, r2, rrx
 8083e5e:	1ab6      	subs	r6, r6, r2
 8083e60:	eb65 0503 	sbc.w	r5, r5, r3
 8083e64:	085b      	lsrs	r3, r3, #1
 8083e66:	ea4f 0232 	mov.w	r2, r2, rrx
 8083e6a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8083e6e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8083e72:	ebb6 0e02 	subs.w	lr, r6, r2
 8083e76:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083e7a:	bf22      	ittt	cs
 8083e7c:	1ab6      	subcs	r6, r6, r2
 8083e7e:	4675      	movcs	r5, lr
 8083e80:	ea40 000c 	orrcs.w	r0, r0, ip
 8083e84:	085b      	lsrs	r3, r3, #1
 8083e86:	ea4f 0232 	mov.w	r2, r2, rrx
 8083e8a:	ebb6 0e02 	subs.w	lr, r6, r2
 8083e8e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083e92:	bf22      	ittt	cs
 8083e94:	1ab6      	subcs	r6, r6, r2
 8083e96:	4675      	movcs	r5, lr
 8083e98:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8083e9c:	085b      	lsrs	r3, r3, #1
 8083e9e:	ea4f 0232 	mov.w	r2, r2, rrx
 8083ea2:	ebb6 0e02 	subs.w	lr, r6, r2
 8083ea6:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083eaa:	bf22      	ittt	cs
 8083eac:	1ab6      	subcs	r6, r6, r2
 8083eae:	4675      	movcs	r5, lr
 8083eb0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8083eb4:	085b      	lsrs	r3, r3, #1
 8083eb6:	ea4f 0232 	mov.w	r2, r2, rrx
 8083eba:	ebb6 0e02 	subs.w	lr, r6, r2
 8083ebe:	eb75 0e03 	sbcs.w	lr, r5, r3
 8083ec2:	bf22      	ittt	cs
 8083ec4:	1ab6      	subcs	r6, r6, r2
 8083ec6:	4675      	movcs	r5, lr
 8083ec8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8083ecc:	ea55 0e06 	orrs.w	lr, r5, r6
 8083ed0:	d018      	beq.n	8083f04 <__aeabi_ddiv+0x114>
 8083ed2:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8083ed6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8083eda:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8083ede:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8083ee2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8083ee6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8083eea:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8083eee:	d1c0      	bne.n	8083e72 <__aeabi_ddiv+0x82>
 8083ef0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083ef4:	d10b      	bne.n	8083f0e <__aeabi_ddiv+0x11e>
 8083ef6:	ea41 0100 	orr.w	r1, r1, r0
 8083efa:	f04f 0000 	mov.w	r0, #0
 8083efe:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8083f02:	e7b6      	b.n	8083e72 <__aeabi_ddiv+0x82>
 8083f04:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8083f08:	bf04      	itt	eq
 8083f0a:	4301      	orreq	r1, r0
 8083f0c:	2000      	moveq	r0, #0
 8083f0e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8083f12:	bf88      	it	hi
 8083f14:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8083f18:	f63f aeaf 	bhi.w	8083c7a <__aeabi_dmul+0xde>
 8083f1c:	ebb5 0c03 	subs.w	ip, r5, r3
 8083f20:	bf04      	itt	eq
 8083f22:	ebb6 0c02 	subseq.w	ip, r6, r2
 8083f26:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8083f2a:	f150 0000 	adcs.w	r0, r0, #0
 8083f2e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8083f32:	bd70      	pop	{r4, r5, r6, pc}
 8083f34:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8083f38:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8083f3c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8083f40:	bfc2      	ittt	gt
 8083f42:	ebd4 050c 	rsbsgt	r5, r4, ip
 8083f46:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8083f4a:	bd70      	popgt	{r4, r5, r6, pc}
 8083f4c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8083f50:	f04f 0e00 	mov.w	lr, #0
 8083f54:	3c01      	subs	r4, #1
 8083f56:	e690      	b.n	8083c7a <__aeabi_dmul+0xde>
 8083f58:	ea45 0e06 	orr.w	lr, r5, r6
 8083f5c:	e68d      	b.n	8083c7a <__aeabi_dmul+0xde>
 8083f5e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8083f62:	ea94 0f0c 	teq	r4, ip
 8083f66:	bf08      	it	eq
 8083f68:	ea95 0f0c 	teqeq	r5, ip
 8083f6c:	f43f af3b 	beq.w	8083de6 <__aeabi_dmul+0x24a>
 8083f70:	ea94 0f0c 	teq	r4, ip
 8083f74:	d10a      	bne.n	8083f8c <__aeabi_ddiv+0x19c>
 8083f76:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8083f7a:	f47f af34 	bne.w	8083de6 <__aeabi_dmul+0x24a>
 8083f7e:	ea95 0f0c 	teq	r5, ip
 8083f82:	f47f af25 	bne.w	8083dd0 <__aeabi_dmul+0x234>
 8083f86:	4610      	mov	r0, r2
 8083f88:	4619      	mov	r1, r3
 8083f8a:	e72c      	b.n	8083de6 <__aeabi_dmul+0x24a>
 8083f8c:	ea95 0f0c 	teq	r5, ip
 8083f90:	d106      	bne.n	8083fa0 <__aeabi_ddiv+0x1b0>
 8083f92:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8083f96:	f43f aefd 	beq.w	8083d94 <__aeabi_dmul+0x1f8>
 8083f9a:	4610      	mov	r0, r2
 8083f9c:	4619      	mov	r1, r3
 8083f9e:	e722      	b.n	8083de6 <__aeabi_dmul+0x24a>
 8083fa0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8083fa4:	bf18      	it	ne
 8083fa6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8083faa:	f47f aec5 	bne.w	8083d38 <__aeabi_dmul+0x19c>
 8083fae:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8083fb2:	f47f af0d 	bne.w	8083dd0 <__aeabi_dmul+0x234>
 8083fb6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8083fba:	f47f aeeb 	bne.w	8083d94 <__aeabi_dmul+0x1f8>
 8083fbe:	e712      	b.n	8083de6 <__aeabi_dmul+0x24a>

08083fc0 <__aeabi_d2f>:
 8083fc0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8083fc4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8083fc8:	bf24      	itt	cs
 8083fca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8083fce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8083fd2:	d90d      	bls.n	8083ff0 <__aeabi_d2f+0x30>
 8083fd4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8083fd8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8083fdc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8083fe0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8083fe4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8083fe8:	bf08      	it	eq
 8083fea:	f020 0001 	biceq.w	r0, r0, #1
 8083fee:	4770      	bx	lr
 8083ff0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8083ff4:	d121      	bne.n	808403a <__aeabi_d2f+0x7a>
 8083ff6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8083ffa:	bfbc      	itt	lt
 8083ffc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8084000:	4770      	bxlt	lr
 8084002:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8084006:	ea4f 5252 	mov.w	r2, r2, lsr #21
 808400a:	f1c2 0218 	rsb	r2, r2, #24
 808400e:	f1c2 0c20 	rsb	ip, r2, #32
 8084012:	fa10 f30c 	lsls.w	r3, r0, ip
 8084016:	fa20 f002 	lsr.w	r0, r0, r2
 808401a:	bf18      	it	ne
 808401c:	f040 0001 	orrne.w	r0, r0, #1
 8084020:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8084024:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8084028:	fa03 fc0c 	lsl.w	ip, r3, ip
 808402c:	ea40 000c 	orr.w	r0, r0, ip
 8084030:	fa23 f302 	lsr.w	r3, r3, r2
 8084034:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8084038:	e7cc      	b.n	8083fd4 <__aeabi_d2f+0x14>
 808403a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 808403e:	d107      	bne.n	8084050 <__aeabi_d2f+0x90>
 8084040:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8084044:	bf1e      	ittt	ne
 8084046:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 808404a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 808404e:	4770      	bxne	lr
 8084050:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8084054:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8084058:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 808405c:	4770      	bx	lr
 808405e:	bf00      	nop

08084060 <__aeabi_frsub>:
 8084060:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8084064:	e002      	b.n	808406c <__addsf3>
 8084066:	bf00      	nop

08084068 <__aeabi_fsub>:
 8084068:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

0808406c <__addsf3>:
 808406c:	0042      	lsls	r2, r0, #1
 808406e:	bf1f      	itttt	ne
 8084070:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8084074:	ea92 0f03 	teqne	r2, r3
 8084078:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 808407c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084080:	d06a      	beq.n	8084158 <__addsf3+0xec>
 8084082:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8084086:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 808408a:	bfc1      	itttt	gt
 808408c:	18d2      	addgt	r2, r2, r3
 808408e:	4041      	eorgt	r1, r0
 8084090:	4048      	eorgt	r0, r1
 8084092:	4041      	eorgt	r1, r0
 8084094:	bfb8      	it	lt
 8084096:	425b      	neglt	r3, r3
 8084098:	2b19      	cmp	r3, #25
 808409a:	bf88      	it	hi
 808409c:	4770      	bxhi	lr
 808409e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80840a2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80840a6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80840aa:	bf18      	it	ne
 80840ac:	4240      	negne	r0, r0
 80840ae:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80840b2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80840b6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80840ba:	bf18      	it	ne
 80840bc:	4249      	negne	r1, r1
 80840be:	ea92 0f03 	teq	r2, r3
 80840c2:	d03f      	beq.n	8084144 <__addsf3+0xd8>
 80840c4:	f1a2 0201 	sub.w	r2, r2, #1
 80840c8:	fa41 fc03 	asr.w	ip, r1, r3
 80840cc:	eb10 000c 	adds.w	r0, r0, ip
 80840d0:	f1c3 0320 	rsb	r3, r3, #32
 80840d4:	fa01 f103 	lsl.w	r1, r1, r3
 80840d8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80840dc:	d502      	bpl.n	80840e4 <__addsf3+0x78>
 80840de:	4249      	negs	r1, r1
 80840e0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80840e4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80840e8:	d313      	bcc.n	8084112 <__addsf3+0xa6>
 80840ea:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80840ee:	d306      	bcc.n	80840fe <__addsf3+0x92>
 80840f0:	0840      	lsrs	r0, r0, #1
 80840f2:	ea4f 0131 	mov.w	r1, r1, rrx
 80840f6:	f102 0201 	add.w	r2, r2, #1
 80840fa:	2afe      	cmp	r2, #254	; 0xfe
 80840fc:	d251      	bcs.n	80841a2 <__addsf3+0x136>
 80840fe:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8084102:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084106:	bf08      	it	eq
 8084108:	f020 0001 	biceq.w	r0, r0, #1
 808410c:	ea40 0003 	orr.w	r0, r0, r3
 8084110:	4770      	bx	lr
 8084112:	0049      	lsls	r1, r1, #1
 8084114:	eb40 0000 	adc.w	r0, r0, r0
 8084118:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
 808411c:	f1a2 0201 	sub.w	r2, r2, #1
 8084120:	d1ed      	bne.n	80840fe <__addsf3+0x92>
 8084122:	fab0 fc80 	clz	ip, r0
 8084126:	f1ac 0c08 	sub.w	ip, ip, #8
 808412a:	ebb2 020c 	subs.w	r2, r2, ip
 808412e:	fa00 f00c 	lsl.w	r0, r0, ip
 8084132:	bfaa      	itet	ge
 8084134:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8084138:	4252      	neglt	r2, r2
 808413a:	4318      	orrge	r0, r3
 808413c:	bfbc      	itt	lt
 808413e:	40d0      	lsrlt	r0, r2
 8084140:	4318      	orrlt	r0, r3
 8084142:	4770      	bx	lr
 8084144:	f092 0f00 	teq	r2, #0
 8084148:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 808414c:	bf06      	itte	eq
 808414e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8084152:	3201      	addeq	r2, #1
 8084154:	3b01      	subne	r3, #1
 8084156:	e7b5      	b.n	80840c4 <__addsf3+0x58>
 8084158:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808415c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084160:	bf18      	it	ne
 8084162:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084166:	d021      	beq.n	80841ac <__addsf3+0x140>
 8084168:	ea92 0f03 	teq	r2, r3
 808416c:	d004      	beq.n	8084178 <__addsf3+0x10c>
 808416e:	f092 0f00 	teq	r2, #0
 8084172:	bf08      	it	eq
 8084174:	4608      	moveq	r0, r1
 8084176:	4770      	bx	lr
 8084178:	ea90 0f01 	teq	r0, r1
 808417c:	bf1c      	itt	ne
 808417e:	2000      	movne	r0, #0
 8084180:	4770      	bxne	lr
 8084182:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8084186:	d104      	bne.n	8084192 <__addsf3+0x126>
 8084188:	0040      	lsls	r0, r0, #1
 808418a:	bf28      	it	cs
 808418c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8084190:	4770      	bx	lr
 8084192:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8084196:	bf3c      	itt	cc
 8084198:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 808419c:	4770      	bxcc	lr
 808419e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80841a2:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 80841a6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80841aa:	4770      	bx	lr
 80841ac:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80841b0:	bf16      	itet	ne
 80841b2:	4608      	movne	r0, r1
 80841b4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80841b8:	4601      	movne	r1, r0
 80841ba:	0242      	lsls	r2, r0, #9
 80841bc:	bf06      	itte	eq
 80841be:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80841c2:	ea90 0f01 	teqeq	r0, r1
 80841c6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 80841ca:	4770      	bx	lr

080841cc <__aeabi_ui2f>:
 80841cc:	f04f 0300 	mov.w	r3, #0
 80841d0:	e004      	b.n	80841dc <__aeabi_i2f+0x8>
 80841d2:	bf00      	nop

080841d4 <__aeabi_i2f>:
 80841d4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 80841d8:	bf48      	it	mi
 80841da:	4240      	negmi	r0, r0
 80841dc:	ea5f 0c00 	movs.w	ip, r0
 80841e0:	bf08      	it	eq
 80841e2:	4770      	bxeq	lr
 80841e4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 80841e8:	4601      	mov	r1, r0
 80841ea:	f04f 0000 	mov.w	r0, #0
 80841ee:	e01c      	b.n	808422a <__aeabi_l2f+0x2a>

080841f0 <__aeabi_ul2f>:
 80841f0:	ea50 0201 	orrs.w	r2, r0, r1
 80841f4:	bf08      	it	eq
 80841f6:	4770      	bxeq	lr
 80841f8:	f04f 0300 	mov.w	r3, #0
 80841fc:	e00a      	b.n	8084214 <__aeabi_l2f+0x14>
 80841fe:	bf00      	nop

08084200 <__aeabi_l2f>:
 8084200:	ea50 0201 	orrs.w	r2, r0, r1
 8084204:	bf08      	it	eq
 8084206:	4770      	bxeq	lr
 8084208:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 808420c:	d502      	bpl.n	8084214 <__aeabi_l2f+0x14>
 808420e:	4240      	negs	r0, r0
 8084210:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8084214:	ea5f 0c01 	movs.w	ip, r1
 8084218:	bf02      	ittt	eq
 808421a:	4684      	moveq	ip, r0
 808421c:	4601      	moveq	r1, r0
 808421e:	2000      	moveq	r0, #0
 8084220:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8084224:	bf08      	it	eq
 8084226:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 808422a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 808422e:	fabc f28c 	clz	r2, ip
 8084232:	3a08      	subs	r2, #8
 8084234:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8084238:	db10      	blt.n	808425c <__aeabi_l2f+0x5c>
 808423a:	fa01 fc02 	lsl.w	ip, r1, r2
 808423e:	4463      	add	r3, ip
 8084240:	fa00 fc02 	lsl.w	ip, r0, r2
 8084244:	f1c2 0220 	rsb	r2, r2, #32
 8084248:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 808424c:	fa20 f202 	lsr.w	r2, r0, r2
 8084250:	eb43 0002 	adc.w	r0, r3, r2
 8084254:	bf08      	it	eq
 8084256:	f020 0001 	biceq.w	r0, r0, #1
 808425a:	4770      	bx	lr
 808425c:	f102 0220 	add.w	r2, r2, #32
 8084260:	fa01 fc02 	lsl.w	ip, r1, r2
 8084264:	f1c2 0220 	rsb	r2, r2, #32
 8084268:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 808426c:	fa21 f202 	lsr.w	r2, r1, r2
 8084270:	eb43 0002 	adc.w	r0, r3, r2
 8084274:	bf08      	it	eq
 8084276:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 808427a:	4770      	bx	lr

0808427c <__aeabi_fmul>:
 808427c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8084280:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8084284:	bf1e      	ittt	ne
 8084286:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 808428a:	ea92 0f0c 	teqne	r2, ip
 808428e:	ea93 0f0c 	teqne	r3, ip
 8084292:	d06f      	beq.n	8084374 <__aeabi_fmul+0xf8>
 8084294:	441a      	add	r2, r3
 8084296:	ea80 0c01 	eor.w	ip, r0, r1
 808429a:	0240      	lsls	r0, r0, #9
 808429c:	bf18      	it	ne
 808429e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 80842a2:	d01e      	beq.n	80842e2 <__aeabi_fmul+0x66>
 80842a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80842a8:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 80842ac:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80842b0:	fba0 3101 	umull	r3, r1, r0, r1
 80842b4:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80842b8:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80842bc:	bf3e      	ittt	cc
 80842be:	0049      	lslcc	r1, r1, #1
 80842c0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80842c4:	005b      	lslcc	r3, r3, #1
 80842c6:	ea40 0001 	orr.w	r0, r0, r1
 80842ca:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80842ce:	2afd      	cmp	r2, #253	; 0xfd
 80842d0:	d81d      	bhi.n	808430e <__aeabi_fmul+0x92>
 80842d2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80842d6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80842da:	bf08      	it	eq
 80842dc:	f020 0001 	biceq.w	r0, r0, #1
 80842e0:	4770      	bx	lr
 80842e2:	f090 0f00 	teq	r0, #0
 80842e6:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80842ea:	bf08      	it	eq
 80842ec:	0249      	lsleq	r1, r1, #9
 80842ee:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80842f2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80842f6:	3a7f      	subs	r2, #127	; 0x7f
 80842f8:	bfc2      	ittt	gt
 80842fa:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80842fe:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8084302:	4770      	bxgt	lr
 8084304:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084308:	f04f 0300 	mov.w	r3, #0
 808430c:	3a01      	subs	r2, #1
 808430e:	dc5d      	bgt.n	80843cc <__aeabi_fmul+0x150>
 8084310:	f112 0f19 	cmn.w	r2, #25
 8084314:	bfdc      	itt	le
 8084316:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 808431a:	4770      	bxle	lr
 808431c:	f1c2 0200 	rsb	r2, r2, #0
 8084320:	0041      	lsls	r1, r0, #1
 8084322:	fa21 f102 	lsr.w	r1, r1, r2
 8084326:	f1c2 0220 	rsb	r2, r2, #32
 808432a:	fa00 fc02 	lsl.w	ip, r0, r2
 808432e:	ea5f 0031 	movs.w	r0, r1, rrx
 8084332:	f140 0000 	adc.w	r0, r0, #0
 8084336:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 808433a:	bf08      	it	eq
 808433c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8084340:	4770      	bx	lr
 8084342:	f092 0f00 	teq	r2, #0
 8084346:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 808434a:	bf02      	ittt	eq
 808434c:	0040      	lsleq	r0, r0, #1
 808434e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8084352:	3a01      	subeq	r2, #1
 8084354:	d0f9      	beq.n	808434a <__aeabi_fmul+0xce>
 8084356:	ea40 000c 	orr.w	r0, r0, ip
 808435a:	f093 0f00 	teq	r3, #0
 808435e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8084362:	bf02      	ittt	eq
 8084364:	0049      	lsleq	r1, r1, #1
 8084366:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 808436a:	3b01      	subeq	r3, #1
 808436c:	d0f9      	beq.n	8084362 <__aeabi_fmul+0xe6>
 808436e:	ea41 010c 	orr.w	r1, r1, ip
 8084372:	e78f      	b.n	8084294 <__aeabi_fmul+0x18>
 8084374:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8084378:	ea92 0f0c 	teq	r2, ip
 808437c:	bf18      	it	ne
 808437e:	ea93 0f0c 	teqne	r3, ip
 8084382:	d00a      	beq.n	808439a <__aeabi_fmul+0x11e>
 8084384:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8084388:	bf18      	it	ne
 808438a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 808438e:	d1d8      	bne.n	8084342 <__aeabi_fmul+0xc6>
 8084390:	ea80 0001 	eor.w	r0, r0, r1
 8084394:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8084398:	4770      	bx	lr
 808439a:	f090 0f00 	teq	r0, #0
 808439e:	bf17      	itett	ne
 80843a0:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 80843a4:	4608      	moveq	r0, r1
 80843a6:	f091 0f00 	teqne	r1, #0
 80843aa:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 80843ae:	d014      	beq.n	80843da <__aeabi_fmul+0x15e>
 80843b0:	ea92 0f0c 	teq	r2, ip
 80843b4:	d101      	bne.n	80843ba <__aeabi_fmul+0x13e>
 80843b6:	0242      	lsls	r2, r0, #9
 80843b8:	d10f      	bne.n	80843da <__aeabi_fmul+0x15e>
 80843ba:	ea93 0f0c 	teq	r3, ip
 80843be:	d103      	bne.n	80843c8 <__aeabi_fmul+0x14c>
 80843c0:	024b      	lsls	r3, r1, #9
 80843c2:	bf18      	it	ne
 80843c4:	4608      	movne	r0, r1
 80843c6:	d108      	bne.n	80843da <__aeabi_fmul+0x15e>
 80843c8:	ea80 0001 	eor.w	r0, r0, r1
 80843cc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80843d0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80843d4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80843d8:	4770      	bx	lr
 80843da:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80843de:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80843e2:	4770      	bx	lr

080843e4 <__aeabi_fdiv>:
 80843e4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80843e8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80843ec:	bf1e      	ittt	ne
 80843ee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80843f2:	ea92 0f0c 	teqne	r2, ip
 80843f6:	ea93 0f0c 	teqne	r3, ip
 80843fa:	d069      	beq.n	80844d0 <__aeabi_fdiv+0xec>
 80843fc:	eba2 0203 	sub.w	r2, r2, r3
 8084400:	ea80 0c01 	eor.w	ip, r0, r1
 8084404:	0249      	lsls	r1, r1, #9
 8084406:	ea4f 2040 	mov.w	r0, r0, lsl #9
 808440a:	d037      	beq.n	808447c <__aeabi_fdiv+0x98>
 808440c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8084410:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8084414:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8084418:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 808441c:	428b      	cmp	r3, r1
 808441e:	bf38      	it	cc
 8084420:	005b      	lslcc	r3, r3, #1
 8084422:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8084426:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 808442a:	428b      	cmp	r3, r1
 808442c:	bf24      	itt	cs
 808442e:	1a5b      	subcs	r3, r3, r1
 8084430:	ea40 000c 	orrcs.w	r0, r0, ip
 8084434:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8084438:	bf24      	itt	cs
 808443a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 808443e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8084442:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8084446:	bf24      	itt	cs
 8084448:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 808444c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8084450:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8084454:	bf24      	itt	cs
 8084456:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 808445a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 808445e:	011b      	lsls	r3, r3, #4
 8084460:	bf18      	it	ne
 8084462:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8084466:	d1e0      	bne.n	808442a <__aeabi_fdiv+0x46>
 8084468:	2afd      	cmp	r2, #253	; 0xfd
 808446a:	f63f af50 	bhi.w	808430e <__aeabi_fmul+0x92>
 808446e:	428b      	cmp	r3, r1
 8084470:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8084474:	bf08      	it	eq
 8084476:	f020 0001 	biceq.w	r0, r0, #1
 808447a:	4770      	bx	lr
 808447c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8084480:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8084484:	327f      	adds	r2, #127	; 0x7f
 8084486:	bfc2      	ittt	gt
 8084488:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 808448c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8084490:	4770      	bxgt	lr
 8084492:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8084496:	f04f 0300 	mov.w	r3, #0
 808449a:	3a01      	subs	r2, #1
 808449c:	e737      	b.n	808430e <__aeabi_fmul+0x92>
 808449e:	f092 0f00 	teq	r2, #0
 80844a2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80844a6:	bf02      	ittt	eq
 80844a8:	0040      	lsleq	r0, r0, #1
 80844aa:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80844ae:	3a01      	subeq	r2, #1
 80844b0:	d0f9      	beq.n	80844a6 <__aeabi_fdiv+0xc2>
 80844b2:	ea40 000c 	orr.w	r0, r0, ip
 80844b6:	f093 0f00 	teq	r3, #0
 80844ba:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80844be:	bf02      	ittt	eq
 80844c0:	0049      	lsleq	r1, r1, #1
 80844c2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80844c6:	3b01      	subeq	r3, #1
 80844c8:	d0f9      	beq.n	80844be <__aeabi_fdiv+0xda>
 80844ca:	ea41 010c 	orr.w	r1, r1, ip
 80844ce:	e795      	b.n	80843fc <__aeabi_fdiv+0x18>
 80844d0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80844d4:	ea92 0f0c 	teq	r2, ip
 80844d8:	d108      	bne.n	80844ec <__aeabi_fdiv+0x108>
 80844da:	0242      	lsls	r2, r0, #9
 80844dc:	f47f af7d 	bne.w	80843da <__aeabi_fmul+0x15e>
 80844e0:	ea93 0f0c 	teq	r3, ip
 80844e4:	f47f af70 	bne.w	80843c8 <__aeabi_fmul+0x14c>
 80844e8:	4608      	mov	r0, r1
 80844ea:	e776      	b.n	80843da <__aeabi_fmul+0x15e>
 80844ec:	ea93 0f0c 	teq	r3, ip
 80844f0:	d104      	bne.n	80844fc <__aeabi_fdiv+0x118>
 80844f2:	024b      	lsls	r3, r1, #9
 80844f4:	f43f af4c 	beq.w	8084390 <__aeabi_fmul+0x114>
 80844f8:	4608      	mov	r0, r1
 80844fa:	e76e      	b.n	80843da <__aeabi_fmul+0x15e>
 80844fc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8084500:	bf18      	it	ne
 8084502:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8084506:	d1ca      	bne.n	808449e <__aeabi_fdiv+0xba>
 8084508:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 808450c:	f47f af5c 	bne.w	80843c8 <__aeabi_fmul+0x14c>
 8084510:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8084514:	f47f af3c 	bne.w	8084390 <__aeabi_fmul+0x114>
 8084518:	e75f      	b.n	80843da <__aeabi_fmul+0x15e>
 808451a:	bf00      	nop

0808451c <__gesf2>:
 808451c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8084520:	e006      	b.n	8084530 <__cmpsf2+0x4>
 8084522:	bf00      	nop

08084524 <__lesf2>:
 8084524:	f04f 0c01 	mov.w	ip, #1
 8084528:	e002      	b.n	8084530 <__cmpsf2+0x4>
 808452a:	bf00      	nop

0808452c <__cmpsf2>:
 808452c:	f04f 0c01 	mov.w	ip, #1
 8084530:	f84d cd04 	str.w	ip, [sp, #-4]!
 8084534:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8084538:	ea4f 0341 	mov.w	r3, r1, lsl #1
 808453c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084540:	bf18      	it	ne
 8084542:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8084546:	d011      	beq.n	808456c <__cmpsf2+0x40>
 8084548:	b001      	add	sp, #4
 808454a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 808454e:	bf18      	it	ne
 8084550:	ea90 0f01 	teqne	r0, r1
 8084554:	bf58      	it	pl
 8084556:	ebb2 0003 	subspl.w	r0, r2, r3
 808455a:	bf88      	it	hi
 808455c:	17c8      	asrhi	r0, r1, #31
 808455e:	bf38      	it	cc
 8084560:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8084564:	bf18      	it	ne
 8084566:	f040 0001 	orrne.w	r0, r0, #1
 808456a:	4770      	bx	lr
 808456c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8084570:	d102      	bne.n	8084578 <__cmpsf2+0x4c>
 8084572:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8084576:	d105      	bne.n	8084584 <__cmpsf2+0x58>
 8084578:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 808457c:	d1e4      	bne.n	8084548 <__cmpsf2+0x1c>
 808457e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8084582:	d0e1      	beq.n	8084548 <__cmpsf2+0x1c>
 8084584:	f85d 0b04 	ldr.w	r0, [sp], #4
 8084588:	4770      	bx	lr
 808458a:	bf00      	nop

0808458c <__aeabi_cfrcmple>:
 808458c:	4684      	mov	ip, r0
 808458e:	4608      	mov	r0, r1
 8084590:	4661      	mov	r1, ip
 8084592:	e7ff      	b.n	8084594 <__aeabi_cfcmpeq>

08084594 <__aeabi_cfcmpeq>:
 8084594:	b50f      	push	{r0, r1, r2, r3, lr}
 8084596:	f7ff ffc9 	bl	808452c <__cmpsf2>
 808459a:	2800      	cmp	r0, #0
 808459c:	bf48      	it	mi
 808459e:	f110 0f00 	cmnmi.w	r0, #0
 80845a2:	bd0f      	pop	{r0, r1, r2, r3, pc}

080845a4 <__aeabi_fcmpeq>:
 80845a4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80845a8:	f7ff fff4 	bl	8084594 <__aeabi_cfcmpeq>
 80845ac:	bf0c      	ite	eq
 80845ae:	2001      	moveq	r0, #1
 80845b0:	2000      	movne	r0, #0
 80845b2:	f85d fb08 	ldr.w	pc, [sp], #8
 80845b6:	bf00      	nop

080845b8 <__aeabi_fcmplt>:
 80845b8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80845bc:	f7ff ffea 	bl	8084594 <__aeabi_cfcmpeq>
 80845c0:	bf34      	ite	cc
 80845c2:	2001      	movcc	r0, #1
 80845c4:	2000      	movcs	r0, #0
 80845c6:	f85d fb08 	ldr.w	pc, [sp], #8
 80845ca:	bf00      	nop

080845cc <__aeabi_fcmple>:
 80845cc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80845d0:	f7ff ffe0 	bl	8084594 <__aeabi_cfcmpeq>
 80845d4:	bf94      	ite	ls
 80845d6:	2001      	movls	r0, #1
 80845d8:	2000      	movhi	r0, #0
 80845da:	f85d fb08 	ldr.w	pc, [sp], #8
 80845de:	bf00      	nop

080845e0 <__aeabi_fcmpge>:
 80845e0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80845e4:	f7ff ffd2 	bl	808458c <__aeabi_cfrcmple>
 80845e8:	bf94      	ite	ls
 80845ea:	2001      	movls	r0, #1
 80845ec:	2000      	movhi	r0, #0
 80845ee:	f85d fb08 	ldr.w	pc, [sp], #8
 80845f2:	bf00      	nop

080845f4 <__aeabi_fcmpgt>:
 80845f4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80845f8:	f7ff ffc8 	bl	808458c <__aeabi_cfrcmple>
 80845fc:	bf34      	ite	cc
 80845fe:	2001      	movcc	r0, #1
 8084600:	2000      	movcs	r0, #0
 8084602:	f85d fb08 	ldr.w	pc, [sp], #8
 8084606:	bf00      	nop

08084608 <__aeabi_f2iz>:
 8084608:	ea4f 0240 	mov.w	r2, r0, lsl #1
 808460c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8084610:	d30f      	bcc.n	8084632 <__aeabi_f2iz+0x2a>
 8084612:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8084616:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 808461a:	d90d      	bls.n	8084638 <__aeabi_f2iz+0x30>
 808461c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8084620:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8084624:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8084628:	fa23 f002 	lsr.w	r0, r3, r2
 808462c:	bf18      	it	ne
 808462e:	4240      	negne	r0, r0
 8084630:	4770      	bx	lr
 8084632:	f04f 0000 	mov.w	r0, #0
 8084636:	4770      	bx	lr
 8084638:	f112 0f61 	cmn.w	r2, #97	; 0x61
 808463c:	d101      	bne.n	8084642 <__aeabi_f2iz+0x3a>
 808463e:	0242      	lsls	r2, r0, #9
 8084640:	d105      	bne.n	808464e <__aeabi_f2iz+0x46>
 8084642:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8084646:	bf08      	it	eq
 8084648:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 808464c:	4770      	bx	lr
 808464e:	f04f 0000 	mov.w	r0, #0
 8084652:	4770      	bx	lr

08084654 <asctime>:
 8084654:	4b09      	ldr	r3, [pc, #36]	; (808467c <asctime+0x28>)
 8084656:	b570      	push	{r4, r5, r6, lr}
 8084658:	681c      	ldr	r4, [r3, #0]
 808465a:	4606      	mov	r6, r0
 808465c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 808465e:	b93d      	cbnz	r5, 8084670 <asctime+0x1c>
 8084660:	201a      	movs	r0, #26
 8084662:	f7fd fa89 	bl	8081b78 <malloc>
 8084666:	221a      	movs	r2, #26
 8084668:	6420      	str	r0, [r4, #64]	; 0x40
 808466a:	4629      	mov	r1, r5
 808466c:	f000 f943 	bl	80848f6 <memset>
 8084670:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8084672:	4630      	mov	r0, r6
 8084674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8084678:	f000 b802 	b.w	8084680 <asctime_r>
 808467c:	20000500 	.word	0x20000500

08084680 <asctime_r>:
 8084680:	b510      	push	{r4, lr}
 8084682:	460c      	mov	r4, r1
 8084684:	6941      	ldr	r1, [r0, #20]
 8084686:	b086      	sub	sp, #24
 8084688:	f201 716c 	addw	r1, r1, #1900	; 0x76c
 808468c:	6903      	ldr	r3, [r0, #16]
 808468e:	6982      	ldr	r2, [r0, #24]
 8084690:	9104      	str	r1, [sp, #16]
 8084692:	6801      	ldr	r1, [r0, #0]
 8084694:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8084698:	9103      	str	r1, [sp, #12]
 808469a:	6841      	ldr	r1, [r0, #4]
 808469c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80846a0:	9102      	str	r1, [sp, #8]
 80846a2:	6881      	ldr	r1, [r0, #8]
 80846a4:	9101      	str	r1, [sp, #4]
 80846a6:	68c1      	ldr	r1, [r0, #12]
 80846a8:	4620      	mov	r0, r4
 80846aa:	9100      	str	r1, [sp, #0]
 80846ac:	4904      	ldr	r1, [pc, #16]	; (80846c0 <asctime_r+0x40>)
 80846ae:	440b      	add	r3, r1
 80846b0:	4904      	ldr	r1, [pc, #16]	; (80846c4 <asctime_r+0x44>)
 80846b2:	440a      	add	r2, r1
 80846b4:	4904      	ldr	r1, [pc, #16]	; (80846c8 <asctime_r+0x48>)
 80846b6:	f7fd fa77 	bl	8081ba8 <siprintf>
 80846ba:	4620      	mov	r0, r4
 80846bc:	b006      	add	sp, #24
 80846be:	bd10      	pop	{r4, pc}
 80846c0:	08085861 	.word	0x08085861
 80846c4:	0808584c 	.word	0x0808584c
 80846c8:	08085885 	.word	0x08085885

080846cc <atoi>:
 80846cc:	220a      	movs	r2, #10
 80846ce:	2100      	movs	r1, #0
 80846d0:	f000 ba26 	b.w	8084b20 <strtol>

080846d4 <__cxa_atexit>:
 80846d4:	b510      	push	{r4, lr}
 80846d6:	4c05      	ldr	r4, [pc, #20]	; (80846ec <__cxa_atexit+0x18>)
 80846d8:	4613      	mov	r3, r2
 80846da:	b12c      	cbz	r4, 80846e8 <__cxa_atexit+0x14>
 80846dc:	460a      	mov	r2, r1
 80846de:	4601      	mov	r1, r0
 80846e0:	2002      	movs	r0, #2
 80846e2:	f3af 8000 	nop.w
 80846e6:	bd10      	pop	{r4, pc}
 80846e8:	4620      	mov	r0, r4
 80846ea:	bd10      	pop	{r4, pc}
 80846ec:	00000000 	.word	0x00000000

080846f0 <localtime>:
 80846f0:	b538      	push	{r3, r4, r5, lr}
 80846f2:	4b07      	ldr	r3, [pc, #28]	; (8084710 <localtime+0x20>)
 80846f4:	4605      	mov	r5, r0
 80846f6:	681c      	ldr	r4, [r3, #0]
 80846f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80846fa:	b91b      	cbnz	r3, 8084704 <localtime+0x14>
 80846fc:	2024      	movs	r0, #36	; 0x24
 80846fe:	f7fd fa3b 	bl	8081b78 <malloc>
 8084702:	63e0      	str	r0, [r4, #60]	; 0x3c
 8084704:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8084706:	4628      	mov	r0, r5
 8084708:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 808470c:	f000 b802 	b.w	8084714 <localtime_r>
 8084710:	20000500 	.word	0x20000500

08084714 <localtime_r>:
 8084714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8084718:	460c      	mov	r4, r1
 808471a:	4680      	mov	r8, r0
 808471c:	f000 fd06 	bl	808512c <__gettzinfo>
 8084720:	4621      	mov	r1, r4
 8084722:	4607      	mov	r7, r0
 8084724:	4640      	mov	r0, r8
 8084726:	f000 fd05 	bl	8085134 <gmtime_r>
 808472a:	6946      	ldr	r6, [r0, #20]
 808472c:	4604      	mov	r4, r0
 808472e:	f206 766c 	addw	r6, r6, #1900	; 0x76c
 8084732:	07b3      	lsls	r3, r6, #30
 8084734:	d105      	bne.n	8084742 <localtime_r+0x2e>
 8084736:	2264      	movs	r2, #100	; 0x64
 8084738:	fb96 f3f2 	sdiv	r3, r6, r2
 808473c:	fb02 6313 	mls	r3, r2, r3, r6
 8084740:	b94b      	cbnz	r3, 8084756 <localtime_r+0x42>
 8084742:	f44f 75c8 	mov.w	r5, #400	; 0x190
 8084746:	fb96 f3f5 	sdiv	r3, r6, r5
 808474a:	fb05 6513 	mls	r5, r5, r3, r6
 808474e:	fab5 f385 	clz	r3, r5
 8084752:	095b      	lsrs	r3, r3, #5
 8084754:	e000      	b.n	8084758 <localtime_r+0x44>
 8084756:	2301      	movs	r3, #1
 8084758:	4a5f      	ldr	r2, [pc, #380]	; (80848d8 <localtime_r+0x1c4>)
 808475a:	2530      	movs	r5, #48	; 0x30
 808475c:	fb05 2503 	mla	r5, r5, r3, r2
 8084760:	f000 fb18 	bl	8084d94 <__tz_lock>
 8084764:	f000 fb18 	bl	8084d98 <_tzset_unlocked>
 8084768:	4b5c      	ldr	r3, [pc, #368]	; (80848dc <localtime_r+0x1c8>)
 808476a:	681b      	ldr	r3, [r3, #0]
 808476c:	b1f3      	cbz	r3, 80847ac <localtime_r+0x98>
 808476e:	687b      	ldr	r3, [r7, #4]
 8084770:	429e      	cmp	r6, r3
 8084772:	d105      	bne.n	8084780 <localtime_r+0x6c>
 8084774:	6839      	ldr	r1, [r7, #0]
 8084776:	f8d8 3000 	ldr.w	r3, [r8]
 808477a:	69fa      	ldr	r2, [r7, #28]
 808477c:	b941      	cbnz	r1, 8084790 <localtime_r+0x7c>
 808477e:	e00a      	b.n	8084796 <localtime_r+0x82>
 8084780:	4630      	mov	r0, r6
 8084782:	f000 fa5f 	bl	8084c44 <__tzcalc_limits>
 8084786:	2800      	cmp	r0, #0
 8084788:	d1f4      	bne.n	8084774 <localtime_r+0x60>
 808478a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 808478e:	e00d      	b.n	80847ac <localtime_r+0x98>
 8084790:	4293      	cmp	r3, r2
 8084792:	db08      	blt.n	80847a6 <localtime_r+0x92>
 8084794:	e001      	b.n	808479a <localtime_r+0x86>
 8084796:	4293      	cmp	r3, r2
 8084798:	da07      	bge.n	80847aa <localtime_r+0x96>
 808479a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 808479c:	4293      	cmp	r3, r2
 808479e:	bfac      	ite	ge
 80847a0:	2300      	movge	r3, #0
 80847a2:	2301      	movlt	r3, #1
 80847a4:	e002      	b.n	80847ac <localtime_r+0x98>
 80847a6:	2300      	movs	r3, #0
 80847a8:	e000      	b.n	80847ac <localtime_r+0x98>
 80847aa:	2301      	movs	r3, #1
 80847ac:	6223      	str	r3, [r4, #32]
 80847ae:	6a23      	ldr	r3, [r4, #32]
 80847b0:	203c      	movs	r0, #60	; 0x3c
 80847b2:	2b01      	cmp	r3, #1
 80847b4:	bf0c      	ite	eq
 80847b6:	6bf9      	ldreq	r1, [r7, #60]	; 0x3c
 80847b8:	6a39      	ldrne	r1, [r7, #32]
 80847ba:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80847be:	fb91 f6f3 	sdiv	r6, r1, r3
 80847c2:	fb03 1316 	mls	r3, r3, r6, r1
 80847c6:	fb93 f2f0 	sdiv	r2, r3, r0
 80847ca:	fb00 3012 	mls	r0, r0, r2, r3
 80847ce:	6861      	ldr	r1, [r4, #4]
 80847d0:	6823      	ldr	r3, [r4, #0]
 80847d2:	1a89      	subs	r1, r1, r2
 80847d4:	68a2      	ldr	r2, [r4, #8]
 80847d6:	1a1b      	subs	r3, r3, r0
 80847d8:	1b92      	subs	r2, r2, r6
 80847da:	2b3b      	cmp	r3, #59	; 0x3b
 80847dc:	6023      	str	r3, [r4, #0]
 80847de:	6061      	str	r1, [r4, #4]
 80847e0:	60a2      	str	r2, [r4, #8]
 80847e2:	dd03      	ble.n	80847ec <localtime_r+0xd8>
 80847e4:	3101      	adds	r1, #1
 80847e6:	6061      	str	r1, [r4, #4]
 80847e8:	3b3c      	subs	r3, #60	; 0x3c
 80847ea:	e004      	b.n	80847f6 <localtime_r+0xe2>
 80847ec:	2b00      	cmp	r3, #0
 80847ee:	da03      	bge.n	80847f8 <localtime_r+0xe4>
 80847f0:	3901      	subs	r1, #1
 80847f2:	6061      	str	r1, [r4, #4]
 80847f4:	333c      	adds	r3, #60	; 0x3c
 80847f6:	6023      	str	r3, [r4, #0]
 80847f8:	6863      	ldr	r3, [r4, #4]
 80847fa:	2b3b      	cmp	r3, #59	; 0x3b
 80847fc:	dd03      	ble.n	8084806 <localtime_r+0xf2>
 80847fe:	3201      	adds	r2, #1
 8084800:	60a2      	str	r2, [r4, #8]
 8084802:	3b3c      	subs	r3, #60	; 0x3c
 8084804:	e004      	b.n	8084810 <localtime_r+0xfc>
 8084806:	2b00      	cmp	r3, #0
 8084808:	da03      	bge.n	8084812 <localtime_r+0xfe>
 808480a:	3a01      	subs	r2, #1
 808480c:	60a2      	str	r2, [r4, #8]
 808480e:	333c      	adds	r3, #60	; 0x3c
 8084810:	6063      	str	r3, [r4, #4]
 8084812:	68a3      	ldr	r3, [r4, #8]
 8084814:	2b17      	cmp	r3, #23
 8084816:	dd22      	ble.n	808485e <localtime_r+0x14a>
 8084818:	69e2      	ldr	r2, [r4, #28]
 808481a:	3b18      	subs	r3, #24
 808481c:	3201      	adds	r2, #1
 808481e:	61e2      	str	r2, [r4, #28]
 8084820:	69a2      	ldr	r2, [r4, #24]
 8084822:	60a3      	str	r3, [r4, #8]
 8084824:	3201      	adds	r2, #1
 8084826:	2a06      	cmp	r2, #6
 8084828:	bfc8      	it	gt
 808482a:	2200      	movgt	r2, #0
 808482c:	61a2      	str	r2, [r4, #24]
 808482e:	68e2      	ldr	r2, [r4, #12]
 8084830:	6923      	ldr	r3, [r4, #16]
 8084832:	3201      	adds	r2, #1
 8084834:	60e2      	str	r2, [r4, #12]
 8084836:	f855 1023 	ldr.w	r1, [r5, r3, lsl #2]
 808483a:	428a      	cmp	r2, r1
 808483c:	dd46      	ble.n	80848cc <localtime_r+0x1b8>
 808483e:	3301      	adds	r3, #1
 8084840:	2b0c      	cmp	r3, #12
 8084842:	bf08      	it	eq
 8084844:	6963      	ldreq	r3, [r4, #20]
 8084846:	eba2 0201 	sub.w	r2, r2, r1
 808484a:	60e2      	str	r2, [r4, #12]
 808484c:	bf05      	ittet	eq
 808484e:	3301      	addeq	r3, #1
 8084850:	2200      	moveq	r2, #0
 8084852:	6123      	strne	r3, [r4, #16]
 8084854:	6122      	streq	r2, [r4, #16]
 8084856:	bf04      	itt	eq
 8084858:	6163      	streq	r3, [r4, #20]
 808485a:	61e2      	streq	r2, [r4, #28]
 808485c:	e036      	b.n	80848cc <localtime_r+0x1b8>
 808485e:	2b00      	cmp	r3, #0
 8084860:	da34      	bge.n	80848cc <localtime_r+0x1b8>
 8084862:	69e2      	ldr	r2, [r4, #28]
 8084864:	3318      	adds	r3, #24
 8084866:	3a01      	subs	r2, #1
 8084868:	61e2      	str	r2, [r4, #28]
 808486a:	69a2      	ldr	r2, [r4, #24]
 808486c:	60a3      	str	r3, [r4, #8]
 808486e:	3a01      	subs	r2, #1
 8084870:	bf48      	it	mi
 8084872:	2206      	movmi	r2, #6
 8084874:	61a2      	str	r2, [r4, #24]
 8084876:	68e2      	ldr	r2, [r4, #12]
 8084878:	3a01      	subs	r2, #1
 808487a:	60e2      	str	r2, [r4, #12]
 808487c:	bb32      	cbnz	r2, 80848cc <localtime_r+0x1b8>
 808487e:	6923      	ldr	r3, [r4, #16]
 8084880:	3b01      	subs	r3, #1
 8084882:	d401      	bmi.n	8084888 <localtime_r+0x174>
 8084884:	6123      	str	r3, [r4, #16]
 8084886:	e01d      	b.n	80848c4 <localtime_r+0x1b0>
 8084888:	230b      	movs	r3, #11
 808488a:	6123      	str	r3, [r4, #16]
 808488c:	6963      	ldr	r3, [r4, #20]
 808488e:	1e5a      	subs	r2, r3, #1
 8084890:	f012 0f03 	tst.w	r2, #3
 8084894:	6162      	str	r2, [r4, #20]
 8084896:	f203 736b 	addw	r3, r3, #1899	; 0x76b
 808489a:	d105      	bne.n	80848a8 <localtime_r+0x194>
 808489c:	2164      	movs	r1, #100	; 0x64
 808489e:	fb93 f2f1 	sdiv	r2, r3, r1
 80848a2:	fb01 3212 	mls	r2, r1, r2, r3
 80848a6:	b94a      	cbnz	r2, 80848bc <localtime_r+0x1a8>
 80848a8:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80848ac:	fb93 f2f1 	sdiv	r2, r3, r1
 80848b0:	fb01 3312 	mls	r3, r1, r2, r3
 80848b4:	fab3 f383 	clz	r3, r3
 80848b8:	095b      	lsrs	r3, r3, #5
 80848ba:	e000      	b.n	80848be <localtime_r+0x1aa>
 80848bc:	2301      	movs	r3, #1
 80848be:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 80848c2:	61e3      	str	r3, [r4, #28]
 80848c4:	6923      	ldr	r3, [r4, #16]
 80848c6:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
 80848ca:	60e3      	str	r3, [r4, #12]
 80848cc:	f000 fa63 	bl	8084d96 <__tz_unlock>
 80848d0:	4620      	mov	r0, r4
 80848d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80848d6:	bf00      	nop
 80848d8:	08085a08 	.word	0x08085a08
 80848dc:	20000c94 	.word	0x20000c94

080848e0 <memcpy>:
 80848e0:	b510      	push	{r4, lr}
 80848e2:	1e43      	subs	r3, r0, #1
 80848e4:	440a      	add	r2, r1
 80848e6:	4291      	cmp	r1, r2
 80848e8:	d004      	beq.n	80848f4 <memcpy+0x14>
 80848ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80848ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80848f2:	e7f8      	b.n	80848e6 <memcpy+0x6>
 80848f4:	bd10      	pop	{r4, pc}

080848f6 <memset>:
 80848f6:	4603      	mov	r3, r0
 80848f8:	4402      	add	r2, r0
 80848fa:	4293      	cmp	r3, r2
 80848fc:	d002      	beq.n	8084904 <memset+0xe>
 80848fe:	f803 1b01 	strb.w	r1, [r3], #1
 8084902:	e7fa      	b.n	80848fa <memset+0x4>
 8084904:	4770      	bx	lr
	...

08084908 <srand>:
 8084908:	b538      	push	{r3, r4, r5, lr}
 808490a:	4b12      	ldr	r3, [pc, #72]	; (8084954 <srand+0x4c>)
 808490c:	4605      	mov	r5, r0
 808490e:	681c      	ldr	r4, [r3, #0]
 8084910:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8084912:	b9d3      	cbnz	r3, 808494a <srand+0x42>
 8084914:	2018      	movs	r0, #24
 8084916:	f7fd f92f 	bl	8081b78 <malloc>
 808491a:	f243 330e 	movw	r3, #13070	; 0x330e
 808491e:	63a0      	str	r0, [r4, #56]	; 0x38
 8084920:	8003      	strh	r3, [r0, #0]
 8084922:	f64a 33cd 	movw	r3, #43981	; 0xabcd
 8084926:	8043      	strh	r3, [r0, #2]
 8084928:	f241 2334 	movw	r3, #4660	; 0x1234
 808492c:	8083      	strh	r3, [r0, #4]
 808492e:	f24e 636d 	movw	r3, #58989	; 0xe66d
 8084932:	80c3      	strh	r3, [r0, #6]
 8084934:	f64d 63ec 	movw	r3, #57068	; 0xdeec
 8084938:	8103      	strh	r3, [r0, #8]
 808493a:	2305      	movs	r3, #5
 808493c:	8143      	strh	r3, [r0, #10]
 808493e:	230b      	movs	r3, #11
 8084940:	8183      	strh	r3, [r0, #12]
 8084942:	2201      	movs	r2, #1
 8084944:	2300      	movs	r3, #0
 8084946:	e9c0 2304 	strd	r2, r3, [r0, #16]
 808494a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 808494c:	2200      	movs	r2, #0
 808494e:	611d      	str	r5, [r3, #16]
 8084950:	615a      	str	r2, [r3, #20]
 8084952:	bd38      	pop	{r3, r4, r5, pc}
 8084954:	20000500 	.word	0x20000500

08084958 <strcmp>:
 8084958:	f810 2b01 	ldrb.w	r2, [r0], #1
 808495c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8084960:	2a01      	cmp	r2, #1
 8084962:	bf28      	it	cs
 8084964:	429a      	cmpcs	r2, r3
 8084966:	d0f7      	beq.n	8084958 <strcmp>
 8084968:	1ad0      	subs	r0, r2, r3
 808496a:	4770      	bx	lr

0808496c <strcpy>:
 808496c:	4603      	mov	r3, r0
 808496e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8084972:	f803 2b01 	strb.w	r2, [r3], #1
 8084976:	2a00      	cmp	r2, #0
 8084978:	d1f9      	bne.n	808496e <strcpy+0x2>
 808497a:	4770      	bx	lr

0808497c <strdup>:
 808497c:	4b02      	ldr	r3, [pc, #8]	; (8084988 <strdup+0xc>)
 808497e:	4601      	mov	r1, r0
 8084980:	6818      	ldr	r0, [r3, #0]
 8084982:	f000 b803 	b.w	808498c <_strdup_r>
 8084986:	bf00      	nop
 8084988:	20000500 	.word	0x20000500

0808498c <_strdup_r>:
 808498c:	b570      	push	{r4, r5, r6, lr}
 808498e:	4606      	mov	r6, r0
 8084990:	4608      	mov	r0, r1
 8084992:	460c      	mov	r4, r1
 8084994:	f000 f80d 	bl	80849b2 <strlen>
 8084998:	1c45      	adds	r5, r0, #1
 808499a:	4629      	mov	r1, r5
 808499c:	4630      	mov	r0, r6
 808499e:	f7fd f923 	bl	8081be8 <_malloc_r>
 80849a2:	4606      	mov	r6, r0
 80849a4:	b118      	cbz	r0, 80849ae <_strdup_r+0x22>
 80849a6:	462a      	mov	r2, r5
 80849a8:	4621      	mov	r1, r4
 80849aa:	f7ff ff99 	bl	80848e0 <memcpy>
 80849ae:	4630      	mov	r0, r6
 80849b0:	bd70      	pop	{r4, r5, r6, pc}

080849b2 <strlen>:
 80849b2:	4603      	mov	r3, r0
 80849b4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80849b8:	2a00      	cmp	r2, #0
 80849ba:	d1fb      	bne.n	80849b4 <strlen+0x2>
 80849bc:	1a18      	subs	r0, r3, r0
 80849be:	3801      	subs	r0, #1
 80849c0:	4770      	bx	lr

080849c2 <strncmp>:
 80849c2:	b530      	push	{r4, r5, lr}
 80849c4:	b182      	cbz	r2, 80849e8 <strncmp+0x26>
 80849c6:	1e45      	subs	r5, r0, #1
 80849c8:	3901      	subs	r1, #1
 80849ca:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80849ce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80849d2:	42a3      	cmp	r3, r4
 80849d4:	d106      	bne.n	80849e4 <strncmp+0x22>
 80849d6:	43ec      	mvns	r4, r5
 80849d8:	4414      	add	r4, r2
 80849da:	42e0      	cmn	r0, r4
 80849dc:	d001      	beq.n	80849e2 <strncmp+0x20>
 80849de:	2b00      	cmp	r3, #0
 80849e0:	d1f3      	bne.n	80849ca <strncmp+0x8>
 80849e2:	461c      	mov	r4, r3
 80849e4:	1b18      	subs	r0, r3, r4
 80849e6:	bd30      	pop	{r4, r5, pc}
 80849e8:	4610      	mov	r0, r2
 80849ea:	bd30      	pop	{r4, r5, pc}

080849ec <strncpy>:
 80849ec:	4603      	mov	r3, r0
 80849ee:	b510      	push	{r4, lr}
 80849f0:	b142      	cbz	r2, 8084a04 <strncpy+0x18>
 80849f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80849f6:	3a01      	subs	r2, #1
 80849f8:	f803 4b01 	strb.w	r4, [r3], #1
 80849fc:	2c00      	cmp	r4, #0
 80849fe:	d1f7      	bne.n	80849f0 <strncpy+0x4>
 8084a00:	441a      	add	r2, r3
 8084a02:	e000      	b.n	8084a06 <strncpy+0x1a>
 8084a04:	bd10      	pop	{r4, pc}
 8084a06:	4293      	cmp	r3, r2
 8084a08:	d002      	beq.n	8084a10 <strncpy+0x24>
 8084a0a:	f803 4b01 	strb.w	r4, [r3], #1
 8084a0e:	e7fa      	b.n	8084a06 <strncpy+0x1a>
 8084a10:	bd10      	pop	{r4, pc}
	...

08084a14 <_strtol_r>:
 8084a14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084a18:	460f      	mov	r7, r1
 8084a1a:	4680      	mov	r8, r0
 8084a1c:	483f      	ldr	r0, [pc, #252]	; (8084b1c <_strtol_r+0x108>)
 8084a1e:	f8d0 9000 	ldr.w	r9, [r0]
 8084a22:	463d      	mov	r5, r7
 8084a24:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084a28:	eb09 0004 	add.w	r0, r9, r4
 8084a2c:	7840      	ldrb	r0, [r0, #1]
 8084a2e:	f000 0008 	and.w	r0, r0, #8
 8084a32:	f000 06ff 	and.w	r6, r0, #255	; 0xff
 8084a36:	b108      	cbz	r0, 8084a3c <_strtol_r+0x28>
 8084a38:	462f      	mov	r7, r5
 8084a3a:	e7f2      	b.n	8084a22 <_strtol_r+0xe>
 8084a3c:	2c2d      	cmp	r4, #45	; 0x2d
 8084a3e:	d103      	bne.n	8084a48 <_strtol_r+0x34>
 8084a40:	1cbd      	adds	r5, r7, #2
 8084a42:	787c      	ldrb	r4, [r7, #1]
 8084a44:	2601      	movs	r6, #1
 8084a46:	e003      	b.n	8084a50 <_strtol_r+0x3c>
 8084a48:	2c2b      	cmp	r4, #43	; 0x2b
 8084a4a:	bf04      	itt	eq
 8084a4c:	787c      	ldrbeq	r4, [r7, #1]
 8084a4e:	1cbd      	addeq	r5, r7, #2
 8084a50:	b113      	cbz	r3, 8084a58 <_strtol_r+0x44>
 8084a52:	2b10      	cmp	r3, #16
 8084a54:	d10a      	bne.n	8084a6c <_strtol_r+0x58>
 8084a56:	e05b      	b.n	8084b10 <_strtol_r+0xfc>
 8084a58:	2c30      	cmp	r4, #48	; 0x30
 8084a5a:	d157      	bne.n	8084b0c <_strtol_r+0xf8>
 8084a5c:	7828      	ldrb	r0, [r5, #0]
 8084a5e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8084a62:	2858      	cmp	r0, #88	; 0x58
 8084a64:	d14d      	bne.n	8084b02 <_strtol_r+0xee>
 8084a66:	786c      	ldrb	r4, [r5, #1]
 8084a68:	2310      	movs	r3, #16
 8084a6a:	3502      	adds	r5, #2
 8084a6c:	2e00      	cmp	r6, #0
 8084a6e:	bf14      	ite	ne
 8084a70:	f04f 4c00 	movne.w	ip, #2147483648	; 0x80000000
 8084a74:	f06f 4c00 	mvneq.w	ip, #2147483648	; 0x80000000
 8084a78:	fbbc faf3 	udiv	sl, ip, r3
 8084a7c:	2700      	movs	r7, #0
 8084a7e:	4638      	mov	r0, r7
 8084a80:	fb03 cc1a 	mls	ip, r3, sl, ip
 8084a84:	eb09 0e04 	add.w	lr, r9, r4
 8084a88:	f89e e001 	ldrb.w	lr, [lr, #1]
 8084a8c:	f01e 0f04 	tst.w	lr, #4
 8084a90:	d001      	beq.n	8084a96 <_strtol_r+0x82>
 8084a92:	3c30      	subs	r4, #48	; 0x30
 8084a94:	e00b      	b.n	8084aae <_strtol_r+0x9a>
 8084a96:	f01e 0e03 	ands.w	lr, lr, #3
 8084a9a:	d01b      	beq.n	8084ad4 <_strtol_r+0xc0>
 8084a9c:	f1be 0f01 	cmp.w	lr, #1
 8084aa0:	bf0c      	ite	eq
 8084aa2:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8084aa6:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8084aaa:	ebce 0404 	rsb	r4, lr, r4
 8084aae:	42a3      	cmp	r3, r4
 8084ab0:	dd10      	ble.n	8084ad4 <_strtol_r+0xc0>
 8084ab2:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
 8084ab6:	d00a      	beq.n	8084ace <_strtol_r+0xba>
 8084ab8:	4550      	cmp	r0, sl
 8084aba:	d806      	bhi.n	8084aca <_strtol_r+0xb6>
 8084abc:	d101      	bne.n	8084ac2 <_strtol_r+0xae>
 8084abe:	4564      	cmp	r4, ip
 8084ac0:	dc03      	bgt.n	8084aca <_strtol_r+0xb6>
 8084ac2:	fb03 4000 	mla	r0, r3, r0, r4
 8084ac6:	2701      	movs	r7, #1
 8084ac8:	e001      	b.n	8084ace <_strtol_r+0xba>
 8084aca:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8084ace:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084ad2:	e7d7      	b.n	8084a84 <_strtol_r+0x70>
 8084ad4:	1c7b      	adds	r3, r7, #1
 8084ad6:	d10c      	bne.n	8084af2 <_strtol_r+0xde>
 8084ad8:	2e00      	cmp	r6, #0
 8084ada:	f04f 0322 	mov.w	r3, #34	; 0x22
 8084ade:	bf14      	ite	ne
 8084ae0:	f04f 4000 	movne.w	r0, #2147483648	; 0x80000000
 8084ae4:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8084ae8:	f8c8 3000 	str.w	r3, [r8]
 8084aec:	b92a      	cbnz	r2, 8084afa <_strtol_r+0xe6>
 8084aee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084af2:	b106      	cbz	r6, 8084af6 <_strtol_r+0xe2>
 8084af4:	4240      	negs	r0, r0
 8084af6:	b172      	cbz	r2, 8084b16 <_strtol_r+0x102>
 8084af8:	b107      	cbz	r7, 8084afc <_strtol_r+0xe8>
 8084afa:	1e69      	subs	r1, r5, #1
 8084afc:	6011      	str	r1, [r2, #0]
 8084afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084b02:	2430      	movs	r4, #48	; 0x30
 8084b04:	2b00      	cmp	r3, #0
 8084b06:	d1b1      	bne.n	8084a6c <_strtol_r+0x58>
 8084b08:	2308      	movs	r3, #8
 8084b0a:	e7af      	b.n	8084a6c <_strtol_r+0x58>
 8084b0c:	230a      	movs	r3, #10
 8084b0e:	e7ad      	b.n	8084a6c <_strtol_r+0x58>
 8084b10:	2c30      	cmp	r4, #48	; 0x30
 8084b12:	d0a3      	beq.n	8084a5c <_strtol_r+0x48>
 8084b14:	e7aa      	b.n	8084a6c <_strtol_r+0x58>
 8084b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084b1a:	bf00      	nop
 8084b1c:	2000049c 	.word	0x2000049c

08084b20 <strtol>:
 8084b20:	4613      	mov	r3, r2
 8084b22:	460a      	mov	r2, r1
 8084b24:	4601      	mov	r1, r0
 8084b26:	4802      	ldr	r0, [pc, #8]	; (8084b30 <strtol+0x10>)
 8084b28:	6800      	ldr	r0, [r0, #0]
 8084b2a:	f7ff bf73 	b.w	8084a14 <_strtol_r>
 8084b2e:	bf00      	nop
 8084b30:	20000500 	.word	0x20000500

08084b34 <_strtoul_r>:
 8084b34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8084b38:	460e      	mov	r6, r1
 8084b3a:	4680      	mov	r8, r0
 8084b3c:	483b      	ldr	r0, [pc, #236]	; (8084c2c <_strtoul_r+0xf8>)
 8084b3e:	f8d0 9000 	ldr.w	r9, [r0]
 8084b42:	4635      	mov	r5, r6
 8084b44:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084b48:	eb09 0004 	add.w	r0, r9, r4
 8084b4c:	7840      	ldrb	r0, [r0, #1]
 8084b4e:	f000 0008 	and.w	r0, r0, #8
 8084b52:	f000 07ff 	and.w	r7, r0, #255	; 0xff
 8084b56:	b108      	cbz	r0, 8084b5c <_strtoul_r+0x28>
 8084b58:	462e      	mov	r6, r5
 8084b5a:	e7f2      	b.n	8084b42 <_strtoul_r+0xe>
 8084b5c:	2c2d      	cmp	r4, #45	; 0x2d
 8084b5e:	d103      	bne.n	8084b68 <_strtoul_r+0x34>
 8084b60:	1cb5      	adds	r5, r6, #2
 8084b62:	7874      	ldrb	r4, [r6, #1]
 8084b64:	2701      	movs	r7, #1
 8084b66:	e003      	b.n	8084b70 <_strtoul_r+0x3c>
 8084b68:	2c2b      	cmp	r4, #43	; 0x2b
 8084b6a:	bf04      	itt	eq
 8084b6c:	7874      	ldrbeq	r4, [r6, #1]
 8084b6e:	1cb5      	addeq	r5, r6, #2
 8084b70:	b113      	cbz	r3, 8084b78 <_strtoul_r+0x44>
 8084b72:	2b10      	cmp	r3, #16
 8084b74:	d10a      	bne.n	8084b8c <_strtoul_r+0x58>
 8084b76:	e053      	b.n	8084c20 <_strtoul_r+0xec>
 8084b78:	2c30      	cmp	r4, #48	; 0x30
 8084b7a:	d14f      	bne.n	8084c1c <_strtoul_r+0xe8>
 8084b7c:	7828      	ldrb	r0, [r5, #0]
 8084b7e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8084b82:	2858      	cmp	r0, #88	; 0x58
 8084b84:	d145      	bne.n	8084c12 <_strtoul_r+0xde>
 8084b86:	786c      	ldrb	r4, [r5, #1]
 8084b88:	2310      	movs	r3, #16
 8084b8a:	3502      	adds	r5, #2
 8084b8c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8084b90:	fbbc fcf3 	udiv	ip, ip, r3
 8084b94:	fb03 fa0c 	mul.w	sl, r3, ip
 8084b98:	2600      	movs	r6, #0
 8084b9a:	ea6f 0a0a 	mvn.w	sl, sl
 8084b9e:	4630      	mov	r0, r6
 8084ba0:	eb09 0e04 	add.w	lr, r9, r4
 8084ba4:	f89e e001 	ldrb.w	lr, [lr, #1]
 8084ba8:	f01e 0f04 	tst.w	lr, #4
 8084bac:	d001      	beq.n	8084bb2 <_strtoul_r+0x7e>
 8084bae:	3c30      	subs	r4, #48	; 0x30
 8084bb0:	e00b      	b.n	8084bca <_strtoul_r+0x96>
 8084bb2:	f01e 0e03 	ands.w	lr, lr, #3
 8084bb6:	d01a      	beq.n	8084bee <_strtoul_r+0xba>
 8084bb8:	f1be 0f01 	cmp.w	lr, #1
 8084bbc:	bf0c      	ite	eq
 8084bbe:	f04f 0e37 	moveq.w	lr, #55	; 0x37
 8084bc2:	f04f 0e57 	movne.w	lr, #87	; 0x57
 8084bc6:	ebce 0404 	rsb	r4, lr, r4
 8084bca:	42a3      	cmp	r3, r4
 8084bcc:	dd0f      	ble.n	8084bee <_strtoul_r+0xba>
 8084bce:	2e00      	cmp	r6, #0
 8084bd0:	db08      	blt.n	8084be4 <_strtoul_r+0xb0>
 8084bd2:	4560      	cmp	r0, ip
 8084bd4:	d806      	bhi.n	8084be4 <_strtoul_r+0xb0>
 8084bd6:	d101      	bne.n	8084bdc <_strtoul_r+0xa8>
 8084bd8:	4554      	cmp	r4, sl
 8084bda:	dc03      	bgt.n	8084be4 <_strtoul_r+0xb0>
 8084bdc:	fb03 4000 	mla	r0, r3, r0, r4
 8084be0:	2601      	movs	r6, #1
 8084be2:	e001      	b.n	8084be8 <_strtoul_r+0xb4>
 8084be4:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8084be8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8084bec:	e7d8      	b.n	8084ba0 <_strtoul_r+0x6c>
 8084bee:	2e00      	cmp	r6, #0
 8084bf0:	da07      	bge.n	8084c02 <_strtoul_r+0xce>
 8084bf2:	2322      	movs	r3, #34	; 0x22
 8084bf4:	f8c8 3000 	str.w	r3, [r8]
 8084bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8084bfc:	b92a      	cbnz	r2, 8084c0a <_strtoul_r+0xd6>
 8084bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084c02:	b107      	cbz	r7, 8084c06 <_strtoul_r+0xd2>
 8084c04:	4240      	negs	r0, r0
 8084c06:	b172      	cbz	r2, 8084c26 <_strtoul_r+0xf2>
 8084c08:	b106      	cbz	r6, 8084c0c <_strtoul_r+0xd8>
 8084c0a:	1e69      	subs	r1, r5, #1
 8084c0c:	6011      	str	r1, [r2, #0]
 8084c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084c12:	2430      	movs	r4, #48	; 0x30
 8084c14:	2b00      	cmp	r3, #0
 8084c16:	d1b9      	bne.n	8084b8c <_strtoul_r+0x58>
 8084c18:	2308      	movs	r3, #8
 8084c1a:	e7b7      	b.n	8084b8c <_strtoul_r+0x58>
 8084c1c:	230a      	movs	r3, #10
 8084c1e:	e7b5      	b.n	8084b8c <_strtoul_r+0x58>
 8084c20:	2c30      	cmp	r4, #48	; 0x30
 8084c22:	d0ab      	beq.n	8084b7c <_strtoul_r+0x48>
 8084c24:	e7b2      	b.n	8084b8c <_strtoul_r+0x58>
 8084c26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8084c2a:	bf00      	nop
 8084c2c:	2000049c 	.word	0x2000049c

08084c30 <strtoul>:
 8084c30:	4613      	mov	r3, r2
 8084c32:	460a      	mov	r2, r1
 8084c34:	4601      	mov	r1, r0
 8084c36:	4802      	ldr	r0, [pc, #8]	; (8084c40 <strtoul+0x10>)
 8084c38:	6800      	ldr	r0, [r0, #0]
 8084c3a:	f7ff bf7b 	b.w	8084b34 <_strtoul_r>
 8084c3e:	bf00      	nop
 8084c40:	20000500 	.word	0x20000500

08084c44 <__tzcalc_limits>:
 8084c44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084c48:	4604      	mov	r4, r0
 8084c4a:	f000 fa6f 	bl	808512c <__gettzinfo>
 8084c4e:	f240 73b1 	movw	r3, #1969	; 0x7b1
 8084c52:	429c      	cmp	r4, r3
 8084c54:	f340 8096 	ble.w	8084d84 <__tzcalc_limits+0x140>
 8084c58:	f240 156d 	movw	r5, #365	; 0x16d
 8084c5c:	f46f 63f6 	mvn.w	r3, #1968	; 0x7b0
 8084c60:	18e3      	adds	r3, r4, r3
 8084c62:	f2a4 72b2 	subw	r2, r4, #1970	; 0x7b2
 8084c66:	109b      	asrs	r3, r3, #2
 8084c68:	fb05 3502 	mla	r5, r5, r2, r3
 8084c6c:	f2a4 726d 	subw	r2, r4, #1901	; 0x76d
 8084c70:	f06f 0363 	mvn.w	r3, #99	; 0x63
 8084c74:	fb92 f3f3 	sdiv	r3, r2, r3
 8084c78:	f46f 62c8 	mvn.w	r2, #1600	; 0x640
 8084c7c:	442b      	add	r3, r5
 8084c7e:	18a5      	adds	r5, r4, r2
 8084c80:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8084c84:	fb94 f7f2 	sdiv	r7, r4, r2
 8084c88:	fb95 f5f2 	sdiv	r5, r5, r2
 8084c8c:	fb02 4717 	mls	r7, r2, r7, r4
 8084c90:	441d      	add	r5, r3
 8084c92:	2364      	movs	r3, #100	; 0x64
 8084c94:	fb94 f6f3 	sdiv	r6, r4, r3
 8084c98:	fab7 fe87 	clz	lr, r7
 8084c9c:	4601      	mov	r1, r0
 8084c9e:	fb03 4616 	mls	r6, r3, r6, r4
 8084ca2:	f100 0338 	add.w	r3, r0, #56	; 0x38
 8084ca6:	9301      	str	r3, [sp, #4]
 8084ca8:	f004 0303 	and.w	r3, r4, #3
 8084cac:	6044      	str	r4, [r0, #4]
 8084cae:	ea4f 1e5e 	mov.w	lr, lr, lsr #5
 8084cb2:	9300      	str	r3, [sp, #0]
 8084cb4:	f04f 0c07 	mov.w	ip, #7
 8084cb8:	7a0b      	ldrb	r3, [r1, #8]
 8084cba:	2b4a      	cmp	r3, #74	; 0x4a
 8084cbc:	d10e      	bne.n	8084cdc <__tzcalc_limits+0x98>
 8084cbe:	694b      	ldr	r3, [r1, #20]
 8084cc0:	9a00      	ldr	r2, [sp, #0]
 8084cc2:	18ec      	adds	r4, r5, r3
 8084cc4:	b902      	cbnz	r2, 8084cc8 <__tzcalc_limits+0x84>
 8084cc6:	b906      	cbnz	r6, 8084cca <__tzcalc_limits+0x86>
 8084cc8:	b927      	cbnz	r7, 8084cd4 <__tzcalc_limits+0x90>
 8084cca:	2b3b      	cmp	r3, #59	; 0x3b
 8084ccc:	bfd4      	ite	le
 8084cce:	2300      	movle	r3, #0
 8084cd0:	2301      	movgt	r3, #1
 8084cd2:	e000      	b.n	8084cd6 <__tzcalc_limits+0x92>
 8084cd4:	2300      	movs	r3, #0
 8084cd6:	4423      	add	r3, r4
 8084cd8:	3b01      	subs	r3, #1
 8084cda:	e03f      	b.n	8084d5c <__tzcalc_limits+0x118>
 8084cdc:	2b44      	cmp	r3, #68	; 0x44
 8084cde:	d102      	bne.n	8084ce6 <__tzcalc_limits+0xa2>
 8084ce0:	694b      	ldr	r3, [r1, #20]
 8084ce2:	442b      	add	r3, r5
 8084ce4:	e03a      	b.n	8084d5c <__tzcalc_limits+0x118>
 8084ce6:	9b00      	ldr	r3, [sp, #0]
 8084ce8:	b92b      	cbnz	r3, 8084cf6 <__tzcalc_limits+0xb2>
 8084cea:	2e00      	cmp	r6, #0
 8084cec:	bf0c      	ite	eq
 8084cee:	46f0      	moveq	r8, lr
 8084cf0:	f04f 0801 	movne.w	r8, #1
 8084cf4:	e000      	b.n	8084cf8 <__tzcalc_limits+0xb4>
 8084cf6:	46f0      	mov	r8, lr
 8084cf8:	46a9      	mov	r9, r5
 8084cfa:	4b24      	ldr	r3, [pc, #144]	; (8084d8c <__tzcalc_limits+0x148>)
 8084cfc:	2230      	movs	r2, #48	; 0x30
 8084cfe:	fb02 3808 	mla	r8, r2, r8, r3
 8084d02:	68cc      	ldr	r4, [r1, #12]
 8084d04:	f1a8 0a04 	sub.w	sl, r8, #4
 8084d08:	2301      	movs	r3, #1
 8084d0a:	42a3      	cmp	r3, r4
 8084d0c:	da04      	bge.n	8084d18 <__tzcalc_limits+0xd4>
 8084d0e:	f85a bf04 	ldr.w	fp, [sl, #4]!
 8084d12:	3301      	adds	r3, #1
 8084d14:	44d9      	add	r9, fp
 8084d16:	e7f8      	b.n	8084d0a <__tzcalc_limits+0xc6>
 8084d18:	f109 0304 	add.w	r3, r9, #4
 8084d1c:	fb93 fbfc 	sdiv	fp, r3, ip
 8084d20:	ebcb 0acb 	rsb	sl, fp, fp, lsl #3
 8084d24:	ebca 0a03 	rsb	sl, sl, r3
 8084d28:	694b      	ldr	r3, [r1, #20]
 8084d2a:	2c01      	cmp	r4, #1
 8084d2c:	bfb8      	it	lt
 8084d2e:	2401      	movlt	r4, #1
 8084d30:	ebb3 0a0a 	subs.w	sl, r3, sl
 8084d34:	690b      	ldr	r3, [r1, #16]
 8084d36:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 8084d3a:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8084d3e:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 8084d42:	bf48      	it	mi
 8084d44:	f10a 0a07 	addmi.w	sl, sl, #7
 8084d48:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8084d4c:	f858 4024 	ldr.w	r4, [r8, r4, lsl #2]
 8084d50:	4453      	add	r3, sl
 8084d52:	42a3      	cmp	r3, r4
 8084d54:	db01      	blt.n	8084d5a <__tzcalc_limits+0x116>
 8084d56:	3b07      	subs	r3, #7
 8084d58:	e7fb      	b.n	8084d52 <__tzcalc_limits+0x10e>
 8084d5a:	444b      	add	r3, r9
 8084d5c:	698c      	ldr	r4, [r1, #24]
 8084d5e:	4a0c      	ldr	r2, [pc, #48]	; (8084d90 <__tzcalc_limits+0x14c>)
 8084d60:	fb02 4303 	mla	r3, r2, r3, r4
 8084d64:	6a0c      	ldr	r4, [r1, #32]
 8084d66:	4423      	add	r3, r4
 8084d68:	f841 3f1c 	str.w	r3, [r1, #28]!
 8084d6c:	9b01      	ldr	r3, [sp, #4]
 8084d6e:	4299      	cmp	r1, r3
 8084d70:	d1a2      	bne.n	8084cb8 <__tzcalc_limits+0x74>
 8084d72:	69c3      	ldr	r3, [r0, #28]
 8084d74:	6b82      	ldr	r2, [r0, #56]	; 0x38
 8084d76:	4293      	cmp	r3, r2
 8084d78:	bfac      	ite	ge
 8084d7a:	2300      	movge	r3, #0
 8084d7c:	2301      	movlt	r3, #1
 8084d7e:	6003      	str	r3, [r0, #0]
 8084d80:	2001      	movs	r0, #1
 8084d82:	e000      	b.n	8084d86 <__tzcalc_limits+0x142>
 8084d84:	2000      	movs	r0, #0
 8084d86:	b003      	add	sp, #12
 8084d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8084d8c:	08085a08 	.word	0x08085a08
 8084d90:	00015180 	.word	0x00015180

08084d94 <__tz_lock>:
 8084d94:	4770      	bx	lr

08084d96 <__tz_unlock>:
 8084d96:	4770      	bx	lr

08084d98 <_tzset_unlocked>:
 8084d98:	4b01      	ldr	r3, [pc, #4]	; (8084da0 <_tzset_unlocked+0x8>)
 8084d9a:	6818      	ldr	r0, [r3, #0]
 8084d9c:	f000 b802 	b.w	8084da4 <_tzset_unlocked_r>
 8084da0:	20000500 	.word	0x20000500

08084da4 <_tzset_unlocked_r>:
 8084da4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8084da8:	b08d      	sub	sp, #52	; 0x34
 8084daa:	4607      	mov	r7, r0
 8084dac:	f000 f9be 	bl	808512c <__gettzinfo>
 8084db0:	49b0      	ldr	r1, [pc, #704]	; (8085074 <_tzset_unlocked_r+0x2d0>)
 8084db2:	4604      	mov	r4, r0
 8084db4:	4638      	mov	r0, r7
 8084db6:	f000 f9b1 	bl	808511c <_getenv_r>
 8084dba:	4eaf      	ldr	r6, [pc, #700]	; (8085078 <_tzset_unlocked_r+0x2d4>)
 8084dbc:	4605      	mov	r5, r0
 8084dbe:	b960      	cbnz	r0, 8084dda <_tzset_unlocked_r+0x36>
 8084dc0:	4bae      	ldr	r3, [pc, #696]	; (808507c <_tzset_unlocked_r+0x2d8>)
 8084dc2:	4aaf      	ldr	r2, [pc, #700]	; (8085080 <_tzset_unlocked_r+0x2dc>)
 8084dc4:	6018      	str	r0, [r3, #0]
 8084dc6:	4baf      	ldr	r3, [pc, #700]	; (8085084 <_tzset_unlocked_r+0x2e0>)
 8084dc8:	6018      	str	r0, [r3, #0]
 8084dca:	4baf      	ldr	r3, [pc, #700]	; (8085088 <_tzset_unlocked_r+0x2e4>)
 8084dcc:	6830      	ldr	r0, [r6, #0]
 8084dce:	601a      	str	r2, [r3, #0]
 8084dd0:	605a      	str	r2, [r3, #4]
 8084dd2:	f7fc fed9 	bl	8081b88 <free>
 8084dd6:	6035      	str	r5, [r6, #0]
 8084dd8:	e148      	b.n	808506c <_tzset_unlocked_r+0x2c8>
 8084dda:	6831      	ldr	r1, [r6, #0]
 8084ddc:	b979      	cbnz	r1, 8084dfe <_tzset_unlocked_r+0x5a>
 8084dde:	6830      	ldr	r0, [r6, #0]
 8084de0:	f7fc fed2 	bl	8081b88 <free>
 8084de4:	4628      	mov	r0, r5
 8084de6:	f7ff fde4 	bl	80849b2 <strlen>
 8084dea:	1c41      	adds	r1, r0, #1
 8084dec:	4638      	mov	r0, r7
 8084dee:	f7fc fefb 	bl	8081be8 <_malloc_r>
 8084df2:	6030      	str	r0, [r6, #0]
 8084df4:	b148      	cbz	r0, 8084e0a <_tzset_unlocked_r+0x66>
 8084df6:	4629      	mov	r1, r5
 8084df8:	f7ff fdb8 	bl	808496c <strcpy>
 8084dfc:	e005      	b.n	8084e0a <_tzset_unlocked_r+0x66>
 8084dfe:	f7ff fdab 	bl	8084958 <strcmp>
 8084e02:	2800      	cmp	r0, #0
 8084e04:	f000 8132 	beq.w	808506c <_tzset_unlocked_r+0x2c8>
 8084e08:	e7e9      	b.n	8084dde <_tzset_unlocked_r+0x3a>
 8084e0a:	782b      	ldrb	r3, [r5, #0]
 8084e0c:	ae0a      	add	r6, sp, #40	; 0x28
 8084e0e:	2b3a      	cmp	r3, #58	; 0x3a
 8084e10:	bf08      	it	eq
 8084e12:	3501      	addeq	r5, #1
 8084e14:	4633      	mov	r3, r6
 8084e16:	4a9d      	ldr	r2, [pc, #628]	; (808508c <_tzset_unlocked_r+0x2e8>)
 8084e18:	499d      	ldr	r1, [pc, #628]	; (8085090 <_tzset_unlocked_r+0x2ec>)
 8084e1a:	4628      	mov	r0, r5
 8084e1c:	f7fc fecc 	bl	8081bb8 <siscanf>
 8084e20:	2800      	cmp	r0, #0
 8084e22:	f340 8123 	ble.w	808506c <_tzset_unlocked_r+0x2c8>
 8084e26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084e28:	18ef      	adds	r7, r5, r3
 8084e2a:	5ceb      	ldrb	r3, [r5, r3]
 8084e2c:	2b2d      	cmp	r3, #45	; 0x2d
 8084e2e:	d103      	bne.n	8084e38 <_tzset_unlocked_r+0x94>
 8084e30:	3701      	adds	r7, #1
 8084e32:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8084e36:	e003      	b.n	8084e40 <_tzset_unlocked_r+0x9c>
 8084e38:	2b2b      	cmp	r3, #43	; 0x2b
 8084e3a:	bf08      	it	eq
 8084e3c:	3701      	addeq	r7, #1
 8084e3e:	2501      	movs	r5, #1
 8084e40:	f10d 0a20 	add.w	sl, sp, #32
 8084e44:	f10d 0b1e 	add.w	fp, sp, #30
 8084e48:	f04f 0800 	mov.w	r8, #0
 8084e4c:	9603      	str	r6, [sp, #12]
 8084e4e:	f8cd a008 	str.w	sl, [sp, #8]
 8084e52:	9601      	str	r6, [sp, #4]
 8084e54:	f8cd b000 	str.w	fp, [sp]
 8084e58:	4633      	mov	r3, r6
 8084e5a:	aa07      	add	r2, sp, #28
 8084e5c:	498d      	ldr	r1, [pc, #564]	; (8085094 <_tzset_unlocked_r+0x2f0>)
 8084e5e:	4638      	mov	r0, r7
 8084e60:	f8ad 801e 	strh.w	r8, [sp, #30]
 8084e64:	f8ad 8020 	strh.w	r8, [sp, #32]
 8084e68:	f7fc fea6 	bl	8081bb8 <siscanf>
 8084e6c:	4540      	cmp	r0, r8
 8084e6e:	f340 80fd 	ble.w	808506c <_tzset_unlocked_r+0x2c8>
 8084e72:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084e76:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084e7a:	213c      	movs	r1, #60	; 0x3c
 8084e7c:	fb01 3302 	mla	r3, r1, r2, r3
 8084e80:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084e84:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084e88:	fb01 3302 	mla	r3, r1, r2, r3
 8084e8c:	435d      	muls	r5, r3
 8084e8e:	4b7f      	ldr	r3, [pc, #508]	; (808508c <_tzset_unlocked_r+0x2e8>)
 8084e90:	6225      	str	r5, [r4, #32]
 8084e92:	4d7d      	ldr	r5, [pc, #500]	; (8085088 <_tzset_unlocked_r+0x2e4>)
 8084e94:	f8df 9208 	ldr.w	r9, [pc, #520]	; 80850a0 <_tzset_unlocked_r+0x2fc>
 8084e98:	602b      	str	r3, [r5, #0]
 8084e9a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084e9c:	464a      	mov	r2, r9
 8084e9e:	441f      	add	r7, r3
 8084ea0:	497b      	ldr	r1, [pc, #492]	; (8085090 <_tzset_unlocked_r+0x2ec>)
 8084ea2:	4633      	mov	r3, r6
 8084ea4:	4638      	mov	r0, r7
 8084ea6:	f7fc fe87 	bl	8081bb8 <siscanf>
 8084eaa:	4540      	cmp	r0, r8
 8084eac:	dc08      	bgt.n	8084ec0 <_tzset_unlocked_r+0x11c>
 8084eae:	682b      	ldr	r3, [r5, #0]
 8084eb0:	6a22      	ldr	r2, [r4, #32]
 8084eb2:	606b      	str	r3, [r5, #4]
 8084eb4:	4b71      	ldr	r3, [pc, #452]	; (808507c <_tzset_unlocked_r+0x2d8>)
 8084eb6:	601a      	str	r2, [r3, #0]
 8084eb8:	4b72      	ldr	r3, [pc, #456]	; (8085084 <_tzset_unlocked_r+0x2e0>)
 8084eba:	f8c3 8000 	str.w	r8, [r3]
 8084ebe:	e0d5      	b.n	808506c <_tzset_unlocked_r+0x2c8>
 8084ec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084ec2:	f8c5 9004 	str.w	r9, [r5, #4]
 8084ec6:	18fd      	adds	r5, r7, r3
 8084ec8:	5cfb      	ldrb	r3, [r7, r3]
 8084eca:	2b2d      	cmp	r3, #45	; 0x2d
 8084ecc:	d103      	bne.n	8084ed6 <_tzset_unlocked_r+0x132>
 8084ece:	3501      	adds	r5, #1
 8084ed0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8084ed4:	e003      	b.n	8084ede <_tzset_unlocked_r+0x13a>
 8084ed6:	2b2b      	cmp	r3, #43	; 0x2b
 8084ed8:	bf08      	it	eq
 8084eda:	3501      	addeq	r5, #1
 8084edc:	2701      	movs	r7, #1
 8084ede:	2300      	movs	r3, #0
 8084ee0:	f8ad 301c 	strh.w	r3, [sp, #28]
 8084ee4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8084ee8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8084eec:	930a      	str	r3, [sp, #40]	; 0x28
 8084eee:	9603      	str	r6, [sp, #12]
 8084ef0:	f8cd a008 	str.w	sl, [sp, #8]
 8084ef4:	9601      	str	r6, [sp, #4]
 8084ef6:	f8cd b000 	str.w	fp, [sp]
 8084efa:	4633      	mov	r3, r6
 8084efc:	aa07      	add	r2, sp, #28
 8084efe:	4965      	ldr	r1, [pc, #404]	; (8085094 <_tzset_unlocked_r+0x2f0>)
 8084f00:	4628      	mov	r0, r5
 8084f02:	f7fc fe59 	bl	8081bb8 <siscanf>
 8084f06:	2800      	cmp	r0, #0
 8084f08:	dc04      	bgt.n	8084f14 <_tzset_unlocked_r+0x170>
 8084f0a:	6a23      	ldr	r3, [r4, #32]
 8084f0c:	f5a3 6361 	sub.w	r3, r3, #3600	; 0xe10
 8084f10:	63e3      	str	r3, [r4, #60]	; 0x3c
 8084f12:	e00e      	b.n	8084f32 <_tzset_unlocked_r+0x18e>
 8084f14:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8084f18:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8084f1c:	213c      	movs	r1, #60	; 0x3c
 8084f1e:	fb01 3302 	mla	r3, r1, r2, r3
 8084f22:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8084f26:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8084f2a:	fb01 3302 	mla	r3, r1, r2, r3
 8084f2e:	435f      	muls	r7, r3
 8084f30:	63e7      	str	r7, [r4, #60]	; 0x3c
 8084f32:	4627      	mov	r7, r4
 8084f34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084f36:	f04f 0900 	mov.w	r9, #0
 8084f3a:	441d      	add	r5, r3
 8084f3c:	782b      	ldrb	r3, [r5, #0]
 8084f3e:	2b2c      	cmp	r3, #44	; 0x2c
 8084f40:	bf08      	it	eq
 8084f42:	3501      	addeq	r5, #1
 8084f44:	f895 8000 	ldrb.w	r8, [r5]
 8084f48:	f1b8 0f4d 	cmp.w	r8, #77	; 0x4d
 8084f4c:	d126      	bne.n	8084f9c <_tzset_unlocked_r+0x1f8>
 8084f4e:	f10d 0326 	add.w	r3, sp, #38	; 0x26
 8084f52:	9302      	str	r3, [sp, #8]
 8084f54:	ab09      	add	r3, sp, #36	; 0x24
 8084f56:	9300      	str	r3, [sp, #0]
 8084f58:	9603      	str	r6, [sp, #12]
 8084f5a:	9601      	str	r6, [sp, #4]
 8084f5c:	4633      	mov	r3, r6
 8084f5e:	f10d 0222 	add.w	r2, sp, #34	; 0x22
 8084f62:	494d      	ldr	r1, [pc, #308]	; (8085098 <_tzset_unlocked_r+0x2f4>)
 8084f64:	4628      	mov	r0, r5
 8084f66:	f7fc fe27 	bl	8081bb8 <siscanf>
 8084f6a:	2803      	cmp	r0, #3
 8084f6c:	d17e      	bne.n	808506c <_tzset_unlocked_r+0x2c8>
 8084f6e:	f8bd 1022 	ldrh.w	r1, [sp, #34]	; 0x22
 8084f72:	1e4b      	subs	r3, r1, #1
 8084f74:	2b0b      	cmp	r3, #11
 8084f76:	d879      	bhi.n	808506c <_tzset_unlocked_r+0x2c8>
 8084f78:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8084f7c:	1e53      	subs	r3, r2, #1
 8084f7e:	2b04      	cmp	r3, #4
 8084f80:	d874      	bhi.n	808506c <_tzset_unlocked_r+0x2c8>
 8084f82:	f8bd 3026 	ldrh.w	r3, [sp, #38]	; 0x26
 8084f86:	2b06      	cmp	r3, #6
 8084f88:	d870      	bhi.n	808506c <_tzset_unlocked_r+0x2c8>
 8084f8a:	f887 8008 	strb.w	r8, [r7, #8]
 8084f8e:	60f9      	str	r1, [r7, #12]
 8084f90:	613a      	str	r2, [r7, #16]
 8084f92:	617b      	str	r3, [r7, #20]
 8084f94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8084f96:	eb05 0803 	add.w	r8, r5, r3
 8084f9a:	e02a      	b.n	8084ff2 <_tzset_unlocked_r+0x24e>
 8084f9c:	f1b8 0f4a 	cmp.w	r8, #74	; 0x4a
 8084fa0:	bf06      	itte	eq
 8084fa2:	4643      	moveq	r3, r8
 8084fa4:	3501      	addeq	r5, #1
 8084fa6:	2344      	movne	r3, #68	; 0x44
 8084fa8:	220a      	movs	r2, #10
 8084faa:	a90b      	add	r1, sp, #44	; 0x2c
 8084fac:	4628      	mov	r0, r5
 8084fae:	9305      	str	r3, [sp, #20]
 8084fb0:	f7ff fe3e 	bl	8084c30 <strtoul>
 8084fb4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8084fb8:	f8ad 0026 	strh.w	r0, [sp, #38]	; 0x26
 8084fbc:	4545      	cmp	r5, r8
 8084fbe:	9b05      	ldr	r3, [sp, #20]
 8084fc0:	d114      	bne.n	8084fec <_tzset_unlocked_r+0x248>
 8084fc2:	234d      	movs	r3, #77	; 0x4d
 8084fc4:	f1b9 0f00 	cmp.w	r9, #0
 8084fc8:	d107      	bne.n	8084fda <_tzset_unlocked_r+0x236>
 8084fca:	7223      	strb	r3, [r4, #8]
 8084fcc:	2303      	movs	r3, #3
 8084fce:	60e3      	str	r3, [r4, #12]
 8084fd0:	2302      	movs	r3, #2
 8084fd2:	6123      	str	r3, [r4, #16]
 8084fd4:	f8c4 9014 	str.w	r9, [r4, #20]
 8084fd8:	e00b      	b.n	8084ff2 <_tzset_unlocked_r+0x24e>
 8084fda:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
 8084fde:	230b      	movs	r3, #11
 8084fe0:	62a3      	str	r3, [r4, #40]	; 0x28
 8084fe2:	2301      	movs	r3, #1
 8084fe4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8084fe6:	2300      	movs	r3, #0
 8084fe8:	6323      	str	r3, [r4, #48]	; 0x30
 8084fea:	e002      	b.n	8084ff2 <_tzset_unlocked_r+0x24e>
 8084fec:	b280      	uxth	r0, r0
 8084fee:	723b      	strb	r3, [r7, #8]
 8084ff0:	6178      	str	r0, [r7, #20]
 8084ff2:	2302      	movs	r3, #2
 8084ff4:	f8ad 301c 	strh.w	r3, [sp, #28]
 8084ff8:	2300      	movs	r3, #0
 8084ffa:	f8ad 301e 	strh.w	r3, [sp, #30]
 8084ffe:	f8ad 3020 	strh.w	r3, [sp, #32]
 8085002:	930a      	str	r3, [sp, #40]	; 0x28
 8085004:	f898 3000 	ldrb.w	r3, [r8]
 8085008:	2b2f      	cmp	r3, #47	; 0x2f
 808500a:	d10b      	bne.n	8085024 <_tzset_unlocked_r+0x280>
 808500c:	9603      	str	r6, [sp, #12]
 808500e:	f8cd a008 	str.w	sl, [sp, #8]
 8085012:	9601      	str	r6, [sp, #4]
 8085014:	f8cd b000 	str.w	fp, [sp]
 8085018:	4633      	mov	r3, r6
 808501a:	aa07      	add	r2, sp, #28
 808501c:	491f      	ldr	r1, [pc, #124]	; (808509c <_tzset_unlocked_r+0x2f8>)
 808501e:	4640      	mov	r0, r8
 8085020:	f7fc fdca 	bl	8081bb8 <siscanf>
 8085024:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8085028:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 808502c:	213c      	movs	r1, #60	; 0x3c
 808502e:	fb01 3302 	mla	r3, r1, r2, r3
 8085032:	f8bd 201c 	ldrh.w	r2, [sp, #28]
 8085036:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 808503a:	fb01 3302 	mla	r3, r1, r2, r3
 808503e:	61bb      	str	r3, [r7, #24]
 8085040:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8085042:	f109 0901 	add.w	r9, r9, #1
 8085046:	f1b9 0f02 	cmp.w	r9, #2
 808504a:	4445      	add	r5, r8
 808504c:	f107 071c 	add.w	r7, r7, #28
 8085050:	f47f af74 	bne.w	8084f3c <_tzset_unlocked_r+0x198>
 8085054:	6860      	ldr	r0, [r4, #4]
 8085056:	f7ff fdf5 	bl	8084c44 <__tzcalc_limits>
 808505a:	6a22      	ldr	r2, [r4, #32]
 808505c:	4b07      	ldr	r3, [pc, #28]	; (808507c <_tzset_unlocked_r+0x2d8>)
 808505e:	601a      	str	r2, [r3, #0]
 8085060:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8085062:	1a9b      	subs	r3, r3, r2
 8085064:	4a07      	ldr	r2, [pc, #28]	; (8085084 <_tzset_unlocked_r+0x2e0>)
 8085066:	bf18      	it	ne
 8085068:	2301      	movne	r3, #1
 808506a:	6013      	str	r3, [r2, #0]
 808506c:	b00d      	add	sp, #52	; 0x34
 808506e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085072:	bf00      	nop
 8085074:	08085a68 	.word	0x08085a68
 8085078:	20000c90 	.word	0x20000c90
 808507c:	20000c98 	.word	0x20000c98
 8085080:	08085a6b 	.word	0x08085a6b
 8085084:	20000c94 	.word	0x20000c94
 8085088:	20000504 	.word	0x20000504
 808508c:	20000c83 	.word	0x20000c83
 8085090:	08085a6f 	.word	0x08085a6f
 8085094:	08085a92 	.word	0x08085a92
 8085098:	08085a7e 	.word	0x08085a7e
 808509c:	08085a91 	.word	0x08085a91
 80850a0:	20000c78 	.word	0x20000c78

080850a4 <_findenv_r>:
 80850a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80850a8:	4607      	mov	r7, r0
 80850aa:	468b      	mov	fp, r1
 80850ac:	4690      	mov	r8, r2
 80850ae:	f000 f8d7 	bl	8085260 <__env_lock>
 80850b2:	4b19      	ldr	r3, [pc, #100]	; (8085118 <_findenv_r+0x74>)
 80850b4:	681d      	ldr	r5, [r3, #0]
 80850b6:	469a      	mov	sl, r3
 80850b8:	b13d      	cbz	r5, 80850ca <_findenv_r+0x26>
 80850ba:	465c      	mov	r4, fp
 80850bc:	4623      	mov	r3, r4
 80850be:	f813 2b01 	ldrb.w	r2, [r3], #1
 80850c2:	b142      	cbz	r2, 80850d6 <_findenv_r+0x32>
 80850c4:	2a3d      	cmp	r2, #61	; 0x3d
 80850c6:	461c      	mov	r4, r3
 80850c8:	d1f8      	bne.n	80850bc <_findenv_r+0x18>
 80850ca:	4638      	mov	r0, r7
 80850cc:	f000 f8c9 	bl	8085262 <__env_unlock>
 80850d0:	2000      	movs	r0, #0
 80850d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80850d6:	ebcb 0404 	rsb	r4, fp, r4
 80850da:	46a9      	mov	r9, r5
 80850dc:	f859 0b04 	ldr.w	r0, [r9], #4
 80850e0:	2800      	cmp	r0, #0
 80850e2:	d0f2      	beq.n	80850ca <_findenv_r+0x26>
 80850e4:	4622      	mov	r2, r4
 80850e6:	4659      	mov	r1, fp
 80850e8:	f7ff fc6b 	bl	80849c2 <strncmp>
 80850ec:	b988      	cbnz	r0, 8085112 <_findenv_r+0x6e>
 80850ee:	f859 3c04 	ldr.w	r3, [r9, #-4]
 80850f2:	191e      	adds	r6, r3, r4
 80850f4:	5d1b      	ldrb	r3, [r3, r4]
 80850f6:	2b3d      	cmp	r3, #61	; 0x3d
 80850f8:	d10b      	bne.n	8085112 <_findenv_r+0x6e>
 80850fa:	f8da 3000 	ldr.w	r3, [sl]
 80850fe:	4638      	mov	r0, r7
 8085100:	1aed      	subs	r5, r5, r3
 8085102:	10ad      	asrs	r5, r5, #2
 8085104:	f8c8 5000 	str.w	r5, [r8]
 8085108:	f000 f8ab 	bl	8085262 <__env_unlock>
 808510c:	1c70      	adds	r0, r6, #1
 808510e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8085112:	464d      	mov	r5, r9
 8085114:	e7e1      	b.n	80850da <_findenv_r+0x36>
 8085116:	bf00      	nop
 8085118:	2000054c 	.word	0x2000054c

0808511c <_getenv_r>:
 808511c:	b507      	push	{r0, r1, r2, lr}
 808511e:	aa01      	add	r2, sp, #4
 8085120:	f7ff ffc0 	bl	80850a4 <_findenv_r>
 8085124:	b003      	add	sp, #12
 8085126:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0808512c <__gettzinfo>:
 808512c:	4800      	ldr	r0, [pc, #0]	; (8085130 <__gettzinfo+0x4>)
 808512e:	4770      	bx	lr
 8085130:	2000050c 	.word	0x2000050c

08085134 <gmtime_r>:
 8085134:	6802      	ldr	r2, [r0, #0]
 8085136:	4b46      	ldr	r3, [pc, #280]	; (8085250 <gmtime_r+0x11c>)
 8085138:	b5f0      	push	{r4, r5, r6, r7, lr}
 808513a:	fb92 f4f3 	sdiv	r4, r2, r3
 808513e:	fb03 2214 	mls	r2, r3, r4, r2
 8085142:	2a00      	cmp	r2, #0
 8085144:	bfbc      	itt	lt
 8085146:	f502 32a8 	addlt.w	r2, r2, #86016	; 0x15000
 808514a:	f502 72c0 	addlt.w	r2, r2, #384	; 0x180
 808514e:	f44f 6061 	mov.w	r0, #3600	; 0xe10
 8085152:	fb92 f3f0 	sdiv	r3, r2, r0
 8085156:	fb00 2213 	mls	r2, r0, r3, r2
 808515a:	f04f 003c 	mov.w	r0, #60	; 0x3c
 808515e:	608b      	str	r3, [r1, #8]
 8085160:	fb92 f3f0 	sdiv	r3, r2, r0
 8085164:	fb00 2213 	mls	r2, r0, r3, r2
 8085168:	f504 242f 	add.w	r4, r4, #716800	; 0xaf000
 808516c:	bfac      	ite	ge
 808516e:	f604 246c 	addwge	r4, r4, #2668	; 0xa6c
 8085172:	f604 246b 	addwlt	r4, r4, #2667	; 0xa6b
 8085176:	604b      	str	r3, [r1, #4]
 8085178:	600a      	str	r2, [r1, #0]
 808517a:	2307      	movs	r3, #7
 808517c:	1ce2      	adds	r2, r4, #3
 808517e:	fb92 f3f3 	sdiv	r3, r2, r3
 8085182:	4d34      	ldr	r5, [pc, #208]	; (8085254 <gmtime_r+0x120>)
 8085184:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
 8085188:	fb94 f5f5 	sdiv	r5, r4, r5
 808518c:	1ad3      	subs	r3, r2, r3
 808518e:	f648 62ac 	movw	r2, #36524	; 0x8eac
 8085192:	f240 57b4 	movw	r7, #1460	; 0x5b4
 8085196:	618b      	str	r3, [r1, #24]
 8085198:	4b2f      	ldr	r3, [pc, #188]	; (8085258 <gmtime_r+0x124>)
 808519a:	4830      	ldr	r0, [pc, #192]	; (808525c <gmtime_r+0x128>)
 808519c:	fb03 4405 	mla	r4, r3, r5, r4
 80851a0:	fbb4 f2f2 	udiv	r2, r4, r2
 80851a4:	fbb4 f3f7 	udiv	r3, r4, r7
 80851a8:	fbb4 f0f0 	udiv	r0, r4, r0
 80851ac:	4422      	add	r2, r4
 80851ae:	1ad2      	subs	r2, r2, r3
 80851b0:	f648 6694 	movw	r6, #36500	; 0x8e94
 80851b4:	1a13      	subs	r3, r2, r0
 80851b6:	f240 126d 	movw	r2, #365	; 0x16d
 80851ba:	fbb3 f6f6 	udiv	r6, r3, r6
 80851be:	fbb3 f0f2 	udiv	r0, r3, r2
 80851c2:	fbb3 f3f7 	udiv	r3, r3, r7
 80851c6:	4434      	add	r4, r6
 80851c8:	1ae3      	subs	r3, r4, r3
 80851ca:	fb02 3310 	mls	r3, r2, r0, r3
 80851ce:	eb03 0283 	add.w	r2, r3, r3, lsl #2
 80851d2:	2499      	movs	r4, #153	; 0x99
 80851d4:	3202      	adds	r2, #2
 80851d6:	fbb2 f2f4 	udiv	r2, r2, r4
 80851da:	4354      	muls	r4, r2
 80851dc:	1ca6      	adds	r6, r4, #2
 80851de:	2405      	movs	r4, #5
 80851e0:	fbb6 f4f4 	udiv	r4, r6, r4
 80851e4:	2a0a      	cmp	r2, #10
 80851e6:	bf34      	ite	cc
 80851e8:	2602      	movcc	r6, #2
 80851ea:	f06f 0609 	mvncs.w	r6, #9
 80851ee:	4416      	add	r6, r2
 80851f0:	f44f 72c8 	mov.w	r2, #400	; 0x190
 80851f4:	fb02 0505 	mla	r5, r2, r5, r0
 80851f8:	1c5f      	adds	r7, r3, #1
 80851fa:	2e01      	cmp	r6, #1
 80851fc:	bf98      	it	ls
 80851fe:	3501      	addls	r5, #1
 8085200:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 8085204:	eba7 0704 	sub.w	r7, r7, r4
 8085208:	d302      	bcc.n	8085210 <gmtime_r+0xdc>
 808520a:	f5a3 7299 	sub.w	r2, r3, #306	; 0x132
 808520e:	e014      	b.n	808523a <gmtime_r+0x106>
 8085210:	0782      	lsls	r2, r0, #30
 8085212:	d105      	bne.n	8085220 <gmtime_r+0xec>
 8085214:	2464      	movs	r4, #100	; 0x64
 8085216:	fbb0 f2f4 	udiv	r2, r0, r4
 808521a:	fb04 0212 	mls	r2, r4, r2, r0
 808521e:	b94a      	cbnz	r2, 8085234 <gmtime_r+0x100>
 8085220:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8085224:	fbb0 f4f2 	udiv	r4, r0, r2
 8085228:	fb02 0014 	mls	r0, r2, r4, r0
 808522c:	fab0 f280 	clz	r2, r0
 8085230:	0952      	lsrs	r2, r2, #5
 8085232:	e000      	b.n	8085236 <gmtime_r+0x102>
 8085234:	2201      	movs	r2, #1
 8085236:	333b      	adds	r3, #59	; 0x3b
 8085238:	441a      	add	r2, r3
 808523a:	f2a5 756c 	subw	r5, r5, #1900	; 0x76c
 808523e:	2300      	movs	r3, #0
 8085240:	61ca      	str	r2, [r1, #28]
 8085242:	614d      	str	r5, [r1, #20]
 8085244:	610e      	str	r6, [r1, #16]
 8085246:	60cf      	str	r7, [r1, #12]
 8085248:	620b      	str	r3, [r1, #32]
 808524a:	4608      	mov	r0, r1
 808524c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 808524e:	bf00      	nop
 8085250:	00015180 	.word	0x00015180
 8085254:	00023ab1 	.word	0x00023ab1
 8085258:	fffdc54f 	.word	0xfffdc54f
 808525c:	00023ab0 	.word	0x00023ab0

08085260 <__env_lock>:
 8085260:	4770      	bx	lr

08085262 <__env_unlock>:
 8085262:	4770      	bx	lr

08085264 <dynalib_user>:
 8085264:	001d 0808 005d 0808 0089 0808 008d 0808     ....]...........
 8085274:	0000 0000 7453 7261 7574 2070 7553 6363     ....Startup Succ
 8085284:	7365 6673 6c75 0000 0000 0000 0000 0000     essful..........
	...
 80852b8:	7325 5320 253a 2e32 6630 2525 202c 3a51     %s S:%2.0f%%, Q:
 80852c8:	3225 302e 2566 2025 2500 2e33 6631 4420     %2.0f%% .%3.1f D
 80852d8:	6765 6572 7365 4320 2500 2069 2525 4100     egrees C.%i %%.A
 80852e8:	2b54 4643 4e55 313d 0d36 000a 227b 6554     T+CFUN=16...{"Te
 80852f8:	706d 7265 7461 7275 2265 253a 2e34 6631     mperature":%4.1f
 8085308:	202c 4822 6d75 6469 7469 2279 253a 2e34     , "Humidity":%4.
 8085318:	6631 202c 5322 696f 636c 6e6f 7564 7463     1f, "Soilconduct
 8085328:	7669 7469 2279 253a 2e34 6631 202c 5322     ivity":%4.1f, "S
 8085338:	696f 746c 6d65 2270 253a 2e34 6631 202c     oiltemp":%4.1f, 
 8085348:	5322 696f 6d6c 696f 7473 7275 2265 253a     "Soilmoisture":%
 8085358:	2e34 6631 202c 4222 7461 6574 7972 3a22     4.1f, "Battery":
 8085368:	6925 202c 5222 7365 7465 2273 253a 2c69     %i, "Resets":%i,
 8085378:	2220 6c41 7265 7374 3a22 6925 007d 6543      "Alerts":%i}.Ce
 8085388:	6c6c 6c75 7261 535f 696f 5f6c 6f48 6b6f     llular_Soil_Hook
 8085398:	4e00 206f 6144 6174 5500 6962 6f64 7374     .No Data.Ubidots
 80853a8:	4820 6f6f 006b 6552 7073 6e6f 6573 5220      Hook.Response R
 80853b8:	6365 6965 6576 0064 7453 7461 0065 6553     eceived.State.Se
 80853c8:	2074 6f53 616c 2072 6f50 6577 6572 2064     t Solar Powered 
 80853d8:	6f4d 6564 4300 656c 7261 6465 5320 6c6f     Mode.Cleared Sol
 80853e8:	7261 5020 776f 7265 6465 4d20 646f 0065     ar Powered Mode.
 80853f8:	6553 2074 6556 6272 736f 2065 6f4d 6564     Set Verbose Mode
 8085408:	4300 656c 7261 6465 5620 7265 6f62 6573     .Cleared Verbose
 8085418:	4d20 646f 0065 6954 656d 7a20 6e6f 2065      Mode.Time zone 
 8085428:	666f 7366 7465 2520 0069 6954 656d 4c00     offset %i.Time.L
 8085438:	776f 5020 776f 7265 4e00 726f 616d 206c     ow Power.Normal 
 8085448:	704f 7265 7461 6f69 736e 4600 6f72 206d     Operations.From 
 8085458:	7325 7420 206f 7325 5300 6174 6574 5420     %s to %s.State T
 8085468:	6172 736e 7469 6f69 006e 7245 6f72 2072     ransition.Error 
 8085478:	6174 696b 676e 4d20 6165 7573 6572 656d     taking Measureme
 8085488:	746e 0073 7073 7261 2f6b 6564 6976 6563     nts.spark/device
 8085498:	732f 7365 6973 6e6f 652f 646e 4700 696f     /session/end.Goi
 80854a8:	676e 7420 206f 6c53 6565 0070 6f4c 2077     ng to Sleep.Low 
 80854b8:	6142 7474 7265 2079 202d 6c53 6565 6970     Battery - Sleepi
 80854c8:	676e 4500 7272 726f 5320 6174 6574 2d20     ng.Error State -
 80854d8:	5220 7365 7465 4500 7272 726f 5320 6174      Reset.Error Sta
 80854e8:	6574 2d20 5020 776f 7265 4320 6379 656c     te - Power Cycle
 80854f8:	4500 7272 726f 5320 6174 6574 2d20 4620     .Error State - F
 8085508:	6c75 206c 6f4d 6564 206d 6552 6573 0074     ull Modem Reset.
 8085518:	6953 6e67 6c61 5200 7365 7465 6f43 6e75     Signal.ResetCoun
 8085528:	0074 6552 656c 7361 0065 7473 7461 4f65     t.Release.stateO
 8085538:	4366 6768 6c00 776f 6f50 6577 4d72 646f     fChg.lowPowerMod
 8085548:	0065 6574 706d 7265 7461 7275 0065 654d     e.temperature.Me
 8085558:	7361 7275 2d65 6f4e 0077 6f4c 5077 776f     asure-Now.LowPow
 8085568:	7265 6f4d 6564 5300 6c6f 7261 4d2d 646f     erMode.Solar-Mod
 8085578:	0065 6556 6272 736f 2d65 6f4d 6564 5300     e.Verbose-Mode.S
 8085588:	7465 6954 656d 6f5a 656e 4600 6961 656c     etTimeZone.Faile
 8085598:	2064 6f74 6320 6e6f 656e 7463 5300 6174     d to connect.Sta
 80855a8:	7472 7075 5500 6b6e 6f6e 6e77 4e00 6e6f     rtup.Unknown.Non
 80855b8:	0065 6957 6946 4700 4d53 5500 544d 0053     e.WiFi.GSM.UMTS.
 80855c8:	4443 414d 4c00 4554 4900 4545 3845 3230     CDMA.LTE.IEEE802
 80855d8:	3531 0034 2e31 0030                         154.1.0.

080855e0 <_ZTVN5spark13CellularClassE>:
	...
 80855e8:	1cc7 0808 1cbd 0808 1cb3 0808 1c25 0808     ............%...
 80855f8:	1ca7 0808 1c9b 0808 1c8f 0808 1c87 0808     ................
 8085608:	1c7d 0808 1c73 0808 1c2f 0808               }...s.../...

08085614 <_ZTV14CellularSignal>:
	...
 808561c:	1d85 0808 1e07 0808 1d87 0808 1e45 0808     ............E...
 808562c:	1d8d 0808 1e15 0808 1db1 0808 1dd5 0808     ................
 808563c:	fffc ffff 0000 0000 1dff 0808               ............

08085648 <_ZTVSt15_Sp_counted_ptrIPN8particle6detail10FutureImplIbNS1_13FutureContextEEELN9__gnu_cxx12_Lock_policyE0EE>:
	...
 8085650:	1e8d 0808 1e93 0808 1ebb 0808 1e9f 0808     ................
 8085660:	1e8f 0808                                   ....

08085664 <_ZTV7TwoWire>:
	...
 808566c:	250d 0808 2557 0808 252f 0808 250f 0808     .%..W%../%...%..
 808567c:	2537 0808 253f 0808 2547 0808 254f 0808     7%..?%..G%..O%..

0808568c <_ZTV9IPAddress>:
	...
 8085694:	265f 0808 2651 0808 2653 0808 0066 6e6c     _&..Q&..S&..f.ln
 80856a4:	6600 006e 6f63 6564 6400 7465 6961 006c     .fn.code.detail.
 80856b4:	3025 3031 2075 5d00 0020 6425 2c00 0020     %010u .] .%d., .
 80856c4:	2928 203a 2000 005b 6f63 6564 3d20 0020     (): . [.code = .
 80856d4:	6564 6174 6c69 2073 203d 6200 7561 0064     details = .baud.
 80856e4:	6553 6972 6c61 5500 4253 6553 6972 6c61     Serial.USBSerial
 80856f4:	0031 7974 6570 7000 7261 6d61 6300 646d     1.type.param.cmd
 8085704:	6900 0064 6e68 0064 7473 6d72 6600 6c69     .id.hnd.strm.fil
 8085714:	0074 766c 006c 6461 4864 6e61 6c64 7265     t.lvl.addHandler
 8085724:	7200 6d65 766f 4865 6e61 6c64 7265 6500     .removeHandler.e
 8085734:	756e 486d 6e61 6c64 7265 0073 534a 4e4f     numHandlers.JSON
 8085744:	7453 6572 6d61 6f4c 4867 6e61 6c64 7265     StreamLogHandler
 8085754:	6100 7070 6e00 6e6f 0065 7274 6361 0065     .app.none.trace.
 8085764:	6e69 6f66 7700 7261 006e 7265 6f72 0072     info.warn.error.
 8085774:	6170 696e 0063 6c61 006c 0000               panic.all...

08085780 <_ZTVN5spark12NetworkClassE>:
	...
 8085788:	26fd 0808 2707 0808 2711 0808 271b 0808     .&...'...'...'..
 8085798:	2725 0808 2731 0808 273d 0808 2749 0808     %'..1'..='..I'..
 80857a8:	2751 0808 275b 0808 2765 0808               Q'..['..e'..

080857b4 <_ZTV8SPIClass>:
	...
 80857bc:	2c95 0808 2c97 0808 2b25 3330 3a64 3025     .,...,..%+03d:%0
 80857cc:	7532 2500 2d59 6d25 252d 5464 4825 253a     2u.%Y-%m-%dT%H:%
 80857dc:	3a4d 5325 7a25 6100 6373 6974 656d 0000     M:%S%z.asctime..

080857ec <_ZTV11USARTSerial>:
	...
 80857f4:	3005 0808 3029 0808 3035 0808 2b4d 0808     .0..)0..50..M+..
 8085804:	3011 0808 301d 0808 3017 0808 3023 0808     .0...0...0..#0..
 8085814:	3007 0808 300b 0808                         .0...0..

0808581c <_ZTV9USBSerial>:
	...
 8085824:	30dd 0808 3121 0808 30fb 0808 2b4d 0808     .0..!1...0..M+..
 8085834:	30f5 0808 30df 0808 30e7 0808 311b 0808     .0...0...0...1..
 8085844:	30ef 0808 30d9 0808                         .0...0..

0808584c <day_name.4723>:
 808584c:	7553 4d6e 6e6f 7554 5765 6465 6854 4675     SunMonTueWedThuF
 808585c:	6972 6153 4a74                                   riSat

08085861 <mon_name.4724>:
 8085861:	614a 466e 6265 614d 4172 7270 614d 4a79     JanFebMarAprMayJ
 8085871:	6e75 754a 416c 6775 6553 4f70 7463 6f4e     unJulAugSepOctNo
 8085881:	4476 6365 2e25 7333 2520 332e 2573 6433     vDec%.3s %.3s%3d
 8085891:	2520 322e 3a64 2e25 6432 253a 322e 2064      %.2d:%.2d:%.2d 
 80858a1:	6425 000a                                   %d..

080858a5 <_ctype_>:
 80858a5:	2000 2020 2020 2020 2020 2828 2828 2028     .         ((((( 
 80858b5:	2020 2020 2020 2020 2020 2020 2020 2020                     
 80858c5:	8820 1010 1010 1010 1010 1010 1010 1010      ...............
 80858d5:	0410 0404 0404 0404 0404 1004 1010 1010     ................
 80858e5:	1010 4141 4141 4141 0101 0101 0101 0101     ..AAAAAA........
 80858f5:	0101 0101 0101 0101 0101 0101 1010 1010     ................
 8085905:	1010 4242 4242 4242 0202 0202 0202 0202     ..BBBBBB........
 8085915:	0202 0202 0202 0202 0202 0202 1010 1010     ................
 8085925:	0020 0000 0000 0000 0000 0000 0000 0000      ...............
	...

080859a8 <__sf_fake_stdin>:
	...

080859c8 <__sf_fake_stdout>:
	...

080859e8 <__sf_fake_stderr>:
	...

08085a08 <__month_lengths>:
 8085a08:	001f 0000 001c 0000 001f 0000 001e 0000     ................
 8085a18:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8085a28:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8085a38:	001f 0000 001d 0000 001f 0000 001e 0000     ................
 8085a48:	001f 0000 001e 0000 001f 0000 001f 0000     ................
 8085a58:	001e 0000 001f 0000 001e 0000 001f 0000     ................
 8085a68:	5a54 4700 544d 2500 3031 5e5b 2d30 2c39     TZ.GMT.%10[^0-9,
 8085a78:	2d2b 255d 006e 254d 7568 6e25 252e 7568     +-]%n.M%hu%n.%hu
 8085a88:	6e25 252e 7568 6e25 2f00 6825 2575 3a6e     %n.%hu%n./%hu%n:
 8085a98:	6825 2575 3a6e 6825 2575 006e               %hu%n:%hu%n.

08085aa4 <link_const_variable_data_end>:
 8085aa4:	08080fdd 	.word	0x08080fdd
 8085aa8:	080812d3 	.word	0x080812d3
 8085aac:	080815fb 	.word	0x080815fb
 8085ab0:	08081d45 	.word	0x08081d45
 8085ab4:	080826ed 	.word	0x080826ed
 8085ab8:	080827b1 	.word	0x080827b1
 8085abc:	08082c79 	.word	0x08082c79
 8085ac0:	08082e51 	.word	0x08082e51
 8085ac4:	08082ff1 	.word	0x08082ff1
 8085ac8:	08083501 	.word	0x08083501
 8085acc:	08083531 	.word	0x08083531
 8085ad0:	0808359d 	.word	0x0808359d
 8085ad4:	08083661 	.word	0x08083661
 8085ad8:	080836e5 	.word	0x080836e5
 8085adc:	08083769 	.word	0x08083769
